{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/error-page.png","path":"img/error-page.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/index.jpg","path":"img/index.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/img/head.svg","path":"img/head.svg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/cover.png","path":"img/docs/md-go/advanced-go-programming-book-master/cover.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/douban.png","path":"img/docs/md-go/advanced-go-programming-book-master/douban.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/toutiao-318517-small.jpg","path":"img/docs/md-go/advanced-go-programming-book-master/toutiao-318517-small.jpg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/toutiao-318517.jpg","path":"img/docs/md-go/advanced-go-programming-book-master/toutiao-318517.jpg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/weappCode-qq-ke.jpg","path":"img/docs/md-go/advanced-go-programming-book-master/weappCode-qq-ke.jpg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/weixin-guanggu-coder-logo.png","path":"img/docs/md-go/advanced-go-programming-book-master/weixin-guanggu-coder-logo.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/weixin-guanggu-coder.jpg","path":"img/docs/md-go/advanced-go-programming-book-master/weixin-guanggu-coder.jpg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/go-secret--interface_files/v2-358347c3a75f2dc1be4747f8bc7966c0_1440w.jpg","path":"img/docs/md-go/go-secret--interface_files/v2-358347c3a75f2dc1be4747f8bc7966c0_1440w.jpg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/go-secret--interface_files/v2-523f8bb5deec35efd3bc636849e88975_1440w.jpg","path":"img/docs/md-go/go-secret--interface_files/v2-523f8bb5deec35efd3bc636849e88975_1440w.jpg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/go-secret--interface_files/v2-554cf44e363c459ec53ad98e0f7b7f72_1440w.jpg","path":"img/docs/md-go/go-secret--interface_files/v2-554cf44e363c459ec53ad98e0f7b7f72_1440w.jpg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/go-secret--interface_files/v2-6989ebff4e17f1f6b51a4e66626b5959_1440w.jpg","path":"img/docs/md-go/go-secret--interface_files/v2-6989ebff4e17f1f6b51a4e66626b5959_1440w.jpg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/go-secret--interface_files/v2-7008ab5b023f82994ba74912bb25f81d_250x0.jpg","path":"img/docs/md-go/go-secret--interface_files/v2-7008ab5b023f82994ba74912bb25f81d_250x0.jpg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/go-secret--interface_files/v2-b27690d8e08032b8b373701189516a75_1440w.jpg","path":"img/docs/md-go/go-secret--interface_files/v2-b27690d8e08032b8b373701189516a75_1440w.jpg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_01.png","path":"img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_01.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_02.png","path":"img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_02.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_03.png","path":"img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_03.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_04.png","path":"img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_04.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_05.png","path":"img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_05.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_06.png","path":"img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_06.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_07.png","path":"img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_07.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_08-09.png","path":"img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_08-09.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/errata/ch3-12-func-call-frame-01.ditaa.png","path":"img/docs/md-go/advanced-go-programming-book-master/errata/ch3-12-func-call-frame-01.ditaa.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/appendix-c-chai2010.jpg","path":"img/docs/md-go/advanced-go-programming-book-master/images/appendix-c-chai2010.jpg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/by-nc-sa-4.0-88x31.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/by-nc-sa-4.0-88x31.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-1-go-family-tree.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch1-1-go-family-tree.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-11-init.ditaa.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch1-11-init.ditaa.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-12-init.ditaa.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch1-12-init.ditaa.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-10-slice-1.ditaa.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch1-10-slice-1.ditaa.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-13-prime-sieve.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch1-13-prime-sieve.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-2-go-log4.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch1-2-go-log4.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-3-go-history.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch1-3-go-history.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-4-go-history.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch1-4-go-history.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-5-prime-sieve.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch1-5-prime-sieve.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-6-alef.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch1-6-alef.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-7-array-4int.ditaa.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch1-7-array-4int.ditaa.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-8-string-1.ditaa.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch1-8-string-1.ditaa.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-9-string-2.ditaa.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch1-9-string-2.ditaa.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch2-1-x-ptr-to-y-ptr.uml.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch2-1-x-ptr-to-y-ptr.uml.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch2-2-int32-to-char-ptr.uml.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch2-2-int32-to-char-ptr.uml.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch2-3-x-slice-to-y-slice.uml.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch2-3-x-slice-to-y-slice.uml.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch2-4-cgo-generated-files.dot.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch2-4-cgo-generated-files.dot.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch2-5-call-c-sum-v1.uml.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch2-5-call-c-sum-v1.uml.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch2-6-call-c-sum-v2.uml.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch2-6-call-c-sum-v2.uml.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-1-arch-hsm-zero.jpg","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch3-1-arch-hsm-zero.jpg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-10-func-arg-01.ditaa.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch3-10-func-arg-01.ditaa.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-11-func-local-var-01.ditaa.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch3-11-func-local-var-01.ditaa.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-2-arch-amd64-01.ditaa.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch3-2-arch-amd64-01.ditaa.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-3-arch-amd64-02.ditaa.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch3-3-arch-amd64-02.ditaa.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-13-func-stack-frame-layout-01.ditaa.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch3-13-func-stack-frame-layout-01.ditaa.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-12-func-call-frame-01.ditaa.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch3-12-func-call-frame-01.ditaa.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-5-ieee754.jpg","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch3-5-ieee754.jpg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-6-pkg-var-decl-02.ditaa.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch3-6-pkg-var-decl-02.ditaa.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-7-pkg-var-decl-03.ditaa.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch3-7-pkg-var-decl-03.ditaa.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-4-pkg-var-decl-01.ditaa.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch3-4-pkg-var-decl-01.ditaa.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-8-func-decl-01.ditaa.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch3-8-func-decl-01.ditaa.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-9-func-decl-02.ditaa.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch3-9-func-decl-02.ditaa.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch4-1-grpc-go-stack.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch4-1-grpc-go-stack.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch4-2-grpc-gateway.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch4-2-grpc-gateway.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch5-online-group.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch5-online-group.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch5-set-time-line.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch5-set-time-line.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch5-set-time-line_2.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch5-set-time-line_2.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch5-token-bucket.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch5-token-bucket.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-radix-get-1.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-radix-get-1.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-radix-get-2.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-radix-get-2.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-radix-get-3.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-radix-get-3.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-radix-get-4.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-radix-get-4.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-radix-put.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-radix-put.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-radix.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-radix.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-trie.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-trie.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-03-gin_contrib.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-03-gin_contrib.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-03-middleware_flow.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-03-middleware_flow.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-04-validate-struct-tree.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-04-validate-struct-tree.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-04-validate.jpg","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-04-validate.jpg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-06-leaky-bucket.jpg","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-06-leaky-bucket.jpg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-code-gen-2.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-code-gen-2.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-code-gen.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-code-gen.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-control-flow-2.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-control-flow-2.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-control-flow.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-control-flow.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-controller-logic-dao.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-controller-logic-dao.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-frontend-backend.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-frontend-backend.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-plugin-arch.jpg","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-plugin-arch.jpg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-09-nats-protocol-pub.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-09-nats-protocol-pub.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-09-nats-protocol-sub.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-09-nats-protocol-sub.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-ast-dsl.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-ast-dsl.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-binary_tree.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-binary_tree.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-binlog-sync.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-binlog-sync.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-controller-logic-dao-storage.uml.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-controller-logic-dao-storage.uml.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-data-dist1.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-data-dist1.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-data-dist2.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-data-dist2.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-dist-crawler.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-dist-crawler.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-four-branch-tree.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-four-branch-tree.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-interface-impl.uml.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-interface-impl.uml.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-posting_list.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-posting_list.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-snowflake-easy.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-snowflake-easy.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-snowflake.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-snowflake.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-snoyflake.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-snoyflake.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-sync.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-sync.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-task-sched.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-task-sched.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-terms.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-terms.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-timewheel.png","path":"img/docs/md-go/advanced-go-programming-book-master/images/ch6-timewheel.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/25f20124d6c242f79aa911c9eaedaaaa.png","path":"img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/25f20124d6c242f79aa911c9eaedaaaa.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/45eb40bea24442f7ab37066c9055da28.png","path":"img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/45eb40bea24442f7ab37066c9055da28.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/5a608da27fc9403ab0df680ba1971646.png","path":"img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/5a608da27fc9403ab0df680ba1971646.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/68ab2ac17a2b4763bf7f3d361167864f.png","path":"img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/68ab2ac17a2b4763bf7f3d361167864f.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/69b2678a700841efad69dca2aa0a4c34.png","path":"img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/69b2678a700841efad69dca2aa0a4c34.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/a8437e646ff54111a778e9246eddad43.png","path":"img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/a8437e646ff54111a778e9246eddad43.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/b935506d68b44320878e934a58824520.png","path":"img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/b935506d68b44320878e934a58824520.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/c555b4cf7b4e461383019db527483d20.png","path":"img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/c555b4cf7b4e461383019db527483d20.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/c7386cbe6be348909afda0b825fc527a.png","path":"img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/c7386cbe6be348909afda0b825fc527a.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/ec10e122d1da464c9a9988f0a94280b3.png","path":"img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/ec10e122d1da464c9a9988f0a94280b3.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/business-website.png","path":"img/docs/md-go/doc-docker/k8s-minikube/business-website.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/deployment-yaml-update.png","path":"img/docs/md-go/doc-docker/k8s-minikube/deployment-yaml-update.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/k8s-cluster1.png","path":"img/docs/md-go/doc-docker/k8s-minikube/k8s-cluster1.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/k8s-control-plane-api.png","path":"img/docs/md-go/doc-docker/k8s-minikube/k8s-control-plane-api.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/k8s-control-plane-monitor-netstat.png","path":"img/docs/md-go/doc-docker/k8s-minikube/k8s-control-plane-monitor-netstat.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/k8s-control-plane-use-backup-pod.png","path":"img/docs/md-go/doc-docker/k8s-minikube/k8s-control-plane-use-backup-pod.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/k8s-control-plane-use-backup-pod1.png","path":"img/docs/md-go/doc-docker/k8s-minikube/k8s-control-plane-use-backup-pod1.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/k8s-control-plane.png","path":"img/docs/md-go/doc-docker/k8s-minikube/k8s-control-plane.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/k8s-node-pod.png","path":"img/docs/md-go/doc-docker/k8s-minikube/k8s-node-pod.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/k8s-pods.png","path":"img/docs/md-go/doc-docker/k8s-minikube/k8s-pods.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/k8s-website.png","path":"img/docs/md-go/doc-docker/k8s-minikube/k8s-website.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/kubectl-0.png","path":"img/docs/md-go/doc-docker/k8s-minikube/kubectl-0.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/kubectl-apply-1.png","path":"img/docs/md-go/doc-docker/k8s-minikube/kubectl-apply-1.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/kubectl-apply-1update.png","path":"img/docs/md-go/doc-docker/k8s-minikube/kubectl-apply-1update.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/kubectl-apply.png","path":"img/docs/md-go/doc-docker/k8s-minikube/kubectl-apply.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/kubectl-delete-1.png","path":"img/docs/md-go/doc-docker/k8s-minikube/kubectl-delete-1.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/kubectl-get-pods.png","path":"img/docs/md-go/doc-docker/k8s-minikube/kubectl-get-pods.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/kubectl-get-services.png","path":"img/docs/md-go/doc-docker/k8s-minikube/kubectl-get-services.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/kubectl-version.png","path":"img/docs/md-go/doc-docker/k8s-minikube/kubectl-version.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/minik-download-install.png","path":"img/docs/md-go/doc-docker/k8s-minikube/minik-download-install.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/minik-example-1.png","path":"img/docs/md-go/doc-docker/k8s-minikube/minik-example-1.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/minik-example-2-pod-communicate.png","path":"img/docs/md-go/doc-docker/k8s-minikube/minik-example-2-pod-communicate.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/minik-example-3-service.png","path":"img/docs/md-go/doc-docker/k8s-minikube/minik-example-3-service.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/minik-example-3-service1.png","path":"img/docs/md-go/doc-docker/k8s-minikube/minik-example-3-service1.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/minik-example-3-service2.png","path":"img/docs/md-go/doc-docker/k8s-minikube/minik-example-3-service2.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/minik-example-3-service3.png","path":"img/docs/md-go/doc-docker/k8s-minikube/minik-example-3-service3.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/minik-fw.png","path":"img/docs/md-go/doc-docker/k8s-minikube/minik-fw.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/minik-example.png","path":"img/docs/md-go/doc-docker/k8s-minikube/minik-example.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/minikube-service-servicename.png","path":"img/docs/md-go/doc-docker/k8s-minikube/minikube-service-servicename.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/open-app-in-browe.png","path":"img/docs/md-go/doc-docker/k8s-minikube/open-app-in-browe.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/open-app-in-browe1.png","path":"img/docs/md-go/doc-docker/k8s-minikube/open-app-in-browe1.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/service-NodePort.png","path":"img/docs/md-go/doc-docker/k8s-minikube/service-NodePort.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/vscode-deployment-yaml-create.png","path":"img/docs/md-go/doc-docker/k8s-minikube/vscode-deployment-yaml-create.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/vscode-k8s-check-status.png","path":"img/docs/md-go/doc-docker/k8s-minikube/vscode-k8s-check-status.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/vscode-kubernets-1.png","path":"img/docs/md-go/doc-docker/k8s-minikube/vscode-kubernets-1.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/vscode-kubernets-2.png","path":"img/docs/md-go/doc-docker/k8s-minikube/vscode-kubernets-2.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/vscode-kubernets-plugin.png","path":"img/docs/md-go/doc-docker/k8s-minikube/vscode-kubernets-plugin.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/go-admin/images/api-Server-init-sequence.png","path":"img/docs/md-go/go-admin/images/api-Server-init-sequence.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/go-admin/images/api-server--Request-Lifecycle.png","path":"img/docs/md-go/go-admin/images/api-server--Request-Lifecycle.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/go-admin/images/api-server-Service-Layer.png","path":"img/docs/md-go/go-admin/images/api-server-Service-Layer.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/go-admin/images/api-server-component-diagram.png","path":"img/docs/md-go/go-admin/images/api-server-component-diagram.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/go-admin/images/api-server-router-sys.png","path":"img/docs/md-go/go-admin/images/api-server-router-sys.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/go-admin/images/go-admin-team.png","path":"img/docs/md-go/go-admin/images/go-admin-team.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/go-admin/images/settings.yml-loading-sequence.png","path":"img/docs/md-go/go-admin/images/settings.yml-loading-sequence.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media/8-1-4-package-init.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media/8-1-4-package-init.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media/8-2-example1-encapsulation.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media/8-2-example1-encapsulation.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media/8-2-example1-encapsulation2.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media/8-2-example1-encapsulation2.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03a/array-slice.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media03a/array-slice.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03a/deep-copy--shallow-copy.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media03a/deep-copy--shallow-copy.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media05a/chan-underlying-struct.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media05a/chan-underlying-struct.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09a/chan-control-max-concurrent-goroutine.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media09a/chan-control-max-concurrent-goroutine.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09a/chan-event.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media09a/chan-event.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09a/chan-producer-consumer.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media09a/chan-producer-consumer.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09a/chan-send-task-2routine-pool.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media09a/chan-send-task-2routine-pool.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image1.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image1.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image10.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image10.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image11.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image11.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image12.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image12.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image13.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image13.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image2.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image2.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image3.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image3.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image4.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image4.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image5.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image5.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image6.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image6.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image7.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image7.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image8.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image8.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image9.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image9.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media05/media/image1.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media05/media/image1.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media05/media/image2.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media05/media/image2.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media05/media/image3.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media05/media/image3.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image10.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image10.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image11.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image11.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image12.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image12.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image13.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image13.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image2.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image2.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image3.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image3.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image4.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image4.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image5.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image5.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image6.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image6.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image7.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image7.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image8.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image8.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image9.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image9.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image1.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image1.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image2.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image2.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image3.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image3.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image4.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image4.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image5.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image5.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image6.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image6.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image7.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image7.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image8.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image8.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image9.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image9.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/empty-interface-etc-structure-aft-assign.jpg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media07/media/empty-interface-etc-structure-aft-assign.jpg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/empty-interface-etc-structure.jpg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media07/media/empty-interface-etc-structure.jpg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/ifc-struct-aft-assign.jpg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media07/media/ifc-struct-aft-assign.jpg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/ifc-struct.jpg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media07/media/ifc-struct.jpg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image1.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image1.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image10.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image10.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image11.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image11.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image12.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image12.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image13.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image13.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image14.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image14.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image15.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image15.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image16.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image16.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image17.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image17.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image18.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image18.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image2.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image2.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image3.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image3.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image4.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image4.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image5.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image5.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image6.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image6.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image7.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image7.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image8.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image8.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image9.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image9.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/itabTable-struct.jpg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media07/media/itabTable-struct.jpg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image1.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image1.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image10.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image10.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image2.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image2.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image3.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image3.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image4.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image4.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image5.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image5.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image6.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image6.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image7.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image7.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image8.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image8.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image9.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image9.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image1.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image1.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image10.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image10.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image11.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image11.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image12.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image12.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image13.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image13.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image14.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image14.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image15.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image15.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image16.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image16.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image17.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image17.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image18.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image18.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image19.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image19.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image2.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image2.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image3.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image3.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image4.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image4.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image5.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image5.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image6.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image6.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image8.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image8.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image7.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image7.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image9.GIF","path":"img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image9.GIF","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media12/media/image1.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media12/media/image1.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media12/media/image2.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media12/media/image2.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media12/media/image3.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media12/media/image3.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image1.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image1.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image10.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image10.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image11.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image11.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image12.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image12.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image13.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image13.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image14.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image14.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image15.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image15.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image16.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image16.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image17.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image17.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image18.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image18.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image19.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image19.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image2.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image2.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image20.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image20.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image21.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image21.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image22.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image22.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image23.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image23.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image24.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image24.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image25.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image25.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image26.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image26.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image27.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image27.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image28.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image28.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image29.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image29.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image3.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image3.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image31.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image31.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image4.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image4.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image5.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image5.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image6.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image6.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image30.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image30.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image8.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image8.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image9.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image9.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image1.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image1.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image10.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image10.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image11.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image11.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image12.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image12.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image14.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image14.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image15.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image15.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image16.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image16.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image17.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image17.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image13.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image13.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image2.jpeg","path":"img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image2.jpeg","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image3.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image3.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image4.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image4.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image5.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image5.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image6.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image6.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image7.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image7.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image8.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image8.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image7.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image7.png","modified":0,"renderable":0},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image9.png","path":"img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image9.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/butterfly/.gitignore","hash":"1e843a7254515d97ddb1d1d32ae83ebfae937f54","modified":1757056082483},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1757056082483},{"_id":"themes/butterfly/README.md","hash":"e1b9096ae0c4e5ef0a911aec05dbad4a3aae3173","modified":1757056082483},{"_id":"themes/butterfly/_config.yml","hash":"972607f3b25177c8a2ac53743a2eee8acabc0cfa","modified":1760149725822},{"_id":"themes/butterfly/README_CN.md","hash":"92e45255b8725f0a00450c88fcfd51ec61e1db67","modified":1757056082484},{"_id":"themes/butterfly/plugins.yml","hash":"6d953cb0665451af0b6ef7441c40f730ce619666","modified":1757056082514},{"_id":"themes/butterfly/package.json","hash":"8732cd296aa3e280a1f2cfe7935a9747ea7c8078","modified":1757056082514},{"_id":"themes/butterfly/languages/default.yml","hash":"2e3beaf7fb585d83c3e7cd1cca51573f42935f3c","modified":1757056082484},{"_id":"themes/butterfly/languages/en.yml","hash":"2e3beaf7fb585d83c3e7cd1cca51573f42935f3c","modified":1757056082484},{"_id":"themes/butterfly/languages/ja.yml","hash":"bde04a89febd0dbf320eac4da4ecd81624f2f29f","modified":1757056082484},{"_id":"themes/butterfly/languages/ko.yml","hash":"70d6df7cf6472799faf4778405b332101ea822c1","modified":1757056082486},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"3cdeb46ad36f3b76703b4f39c72a8aa1a15425cb","modified":1757056082486},{"_id":"themes/butterfly/languages/zh-HK.yml","hash":"c93e510c7b119173226f3b0afb87c5f553f6eea8","modified":1757056082486},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"b59fedd9e1e65112d6a90dc7f55179085d0f1a6a","modified":1757056082486},{"_id":"themes/butterfly/layout/category.pug","hash":"a7e9805a781e34e38d27462e6ce2a5821c34bb9f","modified":1757056082486},{"_id":"themes/butterfly/layout/archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1757056082486},{"_id":"themes/butterfly/layout/index.pug","hash":"a93004cc8ec8050df603d32a6e6e02cd96fd9875","modified":1757056082513},{"_id":"themes/butterfly/layout/page.pug","hash":"7ce2a49c6c41847de4ccea377ade116339984434","modified":1757056082513},{"_id":"themes/butterfly/layout/post.pug","hash":"65c4a49c65c3fc4d9dc88b9791a75710c698c3a1","modified":1757056082513},{"_id":"themes/butterfly/layout/tag.pug","hash":"ca5333bd262cb58c195c844b593a0eed0c721766","modified":1757056082514},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"e1611a30df80cbe7ecf60be2e0cdd816ecabdd03","modified":1757056082487},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"da95d64f44e1e6b516d1f96f57b4b0a537c29c19","modified":1757056082487},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"e5e6c05a621483b3542f2884e8ba45e84b1e973a","modified":1757056082491},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"1d11e334b22dbbedcb0f751f9ee9789d4416605e","modified":1757056082487},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"3e65b7bf6bccccbba7e15349f0a44f15c64c5b5e","modified":1757056082495},{"_id":"themes/butterfly/scripts/common/postDesc.js","hash":"ba98361b9d469076bfb045e5ff42eaf764a38fb1","modified":1757056082515},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"3617840416f26078117f760579fb544dce07e1bc","modified":1757056082494},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"062137cb4d078b27680da1ae28d524a9c963eebc","modified":1757056082494},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"b23108d29fff3e32384d8689c8bcd2ab306a1ae7","modified":1757056082517},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"20a6ebf63439501a4b3fc81e7a2a2ea5d103bace","modified":1757056082517},{"_id":"themes/butterfly/scripts/events/404.js","hash":"039fc75f363d79669b0b2177d929cdff6f2ef7a4","modified":1757056082515},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1757056082515},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"7b1b16e1e8e08245a345764616956be50487eb53","modified":1757056082515},{"_id":"themes/butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1757056082515},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"cead7891fbc0a53ffca4d68124e68efa855354a5","modified":1757056082515},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"bac639c404588ea62e601ef0bcd368c3bd0119af","modified":1757056082515},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"d2878483c160999240e969a34e3ddc51a780821b","modified":1757056082517},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1757056082517},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"0cdf781a8c14d7b50d309e69f282ec7b178804bb","modified":1757056082518},{"_id":"themes/butterfly/scripts/helpers/getArchiveLength.js","hash":"bf77635e920eaf52bceebc95f87c7c87a7ca8038","modified":1757056082518},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"00c5742ad1c75b3c5684d02ffc6a1921399e5376","modified":1757056082518},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"b9af69d8998d748178348d93a19daccff0550c56","modified":1757056082518},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"950b7d0966429bf0f9e6c5e1161e50e545e320b4","modified":1757056082519},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"45367c4ce827329867dbcc750ec125da9ccb2cfd","modified":1757056082519},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"2f44e1b3ccd170b256eae178299d6fa933a8d490","modified":1757056082519},{"_id":"themes/butterfly/scripts/tag/chartjs.js","hash":"195ba802d7e8406c155124a9c939a2318f82938b","modified":1757056082520},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"25eefe10189caf3910a0e5d5b2f2043ae9255531","modified":1757056082520},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"f02fb085a88a2c0c82aeffacc24e1b71c74bd7c0","modified":1757056082520},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"fa3d0a64f7fce4aff7928d4ddd95548978ba001c","modified":1757056082520},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"89c6c78d2db43b190055d5690741a79bab4f3e7e","modified":1757056082521},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"cf0bc17d0180231167cc6aa8a00fc64f198cb9f9","modified":1757056082521},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"50d8d8fac5c5b6e26317028895d7d82a2cf46606","modified":1757056082521},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1757056082521},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"f589fb6646bd17cf12d77a9b251dd614e1c8b899","modified":1757056082522},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"40bc9a065e3a1423e0e66f4911e00713ca9f5e9e","modified":1757056082522},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"3c486b149e28edd1a06843f05a5c355000991b82","modified":1757056082522},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"176804f07567aa80f1ed95897a968a996b155dec","modified":1757056082522},{"_id":"themes/butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1757056082536},{"_id":"themes/butterfly/source/css/var.styl","hash":"d1eec577074ab7b262182885576135bf1896e12c","modified":1757056082536},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1757056082536},{"_id":"themes/butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1757056082539},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1757056082540},{"_id":"themes/butterfly/source/js/main.js","hash":"5a52047b8520f79864d5a4ee2379a29751aead23","modified":1757056082542},{"_id":"themes/butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1757056082540},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"fdb5482d04a75bd79946ad1ed291d281d0e9362d","modified":1757056082544},{"_id":"themes/butterfly/source/js/utils.js","hash":"b2ed9937fd00459c0e569db709a26cf8738ab18d","modified":1757056082545},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"e93a36d3c29b5a02c7f26a23f96e1f84b063cbe8","modified":1757056082488},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c2156c77a011b20fafd34f03ca073397c21b099f","modified":1757056082488},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"56a3c32de1a15627ff38c67f1131cdd6ec5ac924","modified":1757056082488},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"9ea75b06f19bf356f340f4a3fc1bdc0713cfe445","modified":1757056082488},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1757056082488},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"1e1a69aa2cbda2e621c741b3802093244b3cc04e","modified":1757056082489},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"83ed05ef1e39f2ee70c3fba2cf96e488d8ffec66","modified":1757056082489},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1757056082489},{"_id":"themes/butterfly/layout/includes/head/structured_data.pug","hash":"8ef72cd688999bf3915be6724c12700a1e2724d9","modified":1757056082489},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"44331c9db74b281b5c5c41439d3407a9076df1a1","modified":1757056082490},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"733184f88e3a586a5fcc9d193ad500556b6c8eed","modified":1757056082490},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"f478a82ba4c15d4f6a5db38eca5c61f7054fa71d","modified":1757056082490},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"7d799c4694adb6e265e3f4b975d7f7f6a7021a17","modified":1757056082490},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"e2d31e0f450ad42c47f7ee96375799342bf2f19b","modified":1757056082491},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"ef7afe0df7a3746744ac8185da7163b7406120ca","modified":1757056082492},{"_id":"themes/butterfly/layout/includes/mixins/indexPostUI.pug","hash":"f3389fa9ae4fa32e3c16573286583bc3023e57ad","modified":1757056082492},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"d4d266eced4b9167bed86bcc5addc327f78cbdcc","modified":1757056082491},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"d76ce71ba106e350670c021a3dcae57547d01830","modified":1757056082491},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"9d2d539555bab495959b9df734ed5c43a9f9e5a9","modified":1757056082492},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1757056082493},{"_id":"themes/butterfly/layout/includes/page/404.pug","hash":"15d32c511e4875066fcbe9cb84c3ada07b5a7c41","modified":1757056082492},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"efb40388e37cca0b5e7c3c66e811a42f8d32c910","modified":1757056082493},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"6b0fa5f048aca8e9cbe56978301af918cf7ac34a","modified":1757056082493},{"_id":"themes/butterfly/layout/includes/page/shuoshuo.pug","hash":"b2423cfc57a5e3a0e1112ff7c18d5c5c720d89d5","modified":1757056082493},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"79ad31eb72a9e14007770b18a426406a25315b38","modified":1757056082493},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"ed79fef5b5025415ea12eaed970f3fe7f6ef9596","modified":1757056082496},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1757056082503},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"d29ee6a07e6716c0dc1d4533c87b19b6076fefd3","modified":1757056082507},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"88f979a0b1a19eeb0db229247833bf9c6865c3b9","modified":1757056082507},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"236c3ce26dd76e80b04d457789475c42da5ac0c8","modified":1760152048907},{"_id":"themes/butterfly/layout/includes/third-party/umami_analytics.pug","hash":"bc35a1552d26ecdeeadbf06300078dbb5128a6e5","modified":1757056082509},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1757056082509},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1757056082509},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1757056082509},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"1aba8aa7cd767dc96879d13a13b4c8ceb9023233","modified":1757056082510},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1757056082510},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1757056082511},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"d8753772889b5d0f4d15639ed6af5e91e53b1d03","modified":1757056082511},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"e0bb72fa0ce15964b11b8fe421cae3432394e35f","modified":1757056082511},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"1dd19a564320d248dbcee7f118a5b96c6466da65","modified":1757056082511},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1757056082511},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1757056082512},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1757056082512},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"fcddd80cdeb6aa81f342cd9f0102302f6ba087a8","modified":1757056082512},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"45f620cd87b9ef2aa9d1e024e697ed6b4eecff34","modified":1757056082512},{"_id":"themes/butterfly/layout/includes/post/outdate-notice.pug","hash":"b7ce9484bc5c97ea6154f0b78fb9b8951fafedbd","modified":1757056082494},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"b96c232e5178d927987791d9ae386dd83679535a","modified":1757056082494},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"db92f25ff3fd061882f81bf74ca560ff66983a0c","modified":1757056082494},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"209b8c04b88cf21f732ddb8bf23dbeaf2038ea1e","modified":1757056082523},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"97c3c3bc0272fd8483760a0efdcd2fd4ceed8a08","modified":1757056082523},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"67062d597408068e4a59e95851e98fed34b745da","modified":1757056082524},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"a51edfd3e499e7d38c32241c40e8e4d371efca73","modified":1757056082525},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"865fafbb12b83861b3fff572bacf053fe4eb6c07","modified":1757056082525},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"4cc02bcbaa4a1933a82a9ea57a603fe2d059fc77","modified":1757056082527},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1757056082527},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"5692bcf8929f7ef12b10d860da6cb90ca55752c0","modified":1757056082527},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"7536c44e78115559a996d0384adec38b78d8dc25","modified":1757056082527},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"7d7554573c005399bc8c2264a85896d2d51be1e1","modified":1757056082527},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"ef8e8549fe7ad4b99793844a93b4a89f77f417d5","modified":1757056082529},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"a0f5835f04358122e8b1d38dd3e8da09a1b5b431","modified":1757056082529},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"d9cdf564a822a585e67fd5bac8573ba87eeb3743","modified":1757056082529},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"084dc4dfb41f55e237a9d6cf8c2f5dba729b83be","modified":1757056082530},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"0af7c8754f04bdd9a02a14d880774753bd2e35ee","modified":1757056082530},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1757056082527},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"205ccc7d0ec6ce1193b46bc0c9ce0385594581fb","modified":1757056082531},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5abe5480d83ff8b452a780a484d50a44091475bf","modified":1757056082531},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"dcff804c4c237e1e908481b44c1ac4e39ac0da34","modified":1757056082532},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"543eaf9c7df7e0db841e5946ee5f9082c3c46290","modified":1757056082529},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"1f8d715faf3b91b53426e38195c0920afb3bfa1c","modified":1757056082532},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"fc26e980fedde31644ebf878967f66ef9ba32be2","modified":1757056082532},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"c4cda7b0c99015df29ce00fdfddd2f7679653754","modified":1757056082531},{"_id":"themes/butterfly/source/css/_page/shuoshuo.styl","hash":"79bb1d9a27822ed5675d1e52f5dbd0e2f5d5010a","modified":1757056082532},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"7543bb688876a946538d66b991c71b94b5216277","modified":1757056082533},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"d8a8275a68a1421c4c09b604cf78bea16c1d0463","modified":1757056082533},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"6c4cbdadd9a49029fe0c59e29808d873e5b6b6ee","modified":1757056082533},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"4c9849df9c68d892c7df0ca28123aeb0dc9dc424","modified":1757056082530},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"1f2b86df86df81c3a59377b29102314ffc73dfa6","modified":1757056082533},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"ad66212554468b7067590308ed4cf40524fea662","modified":1757056082531},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"de8437a058a315d14d7e7034066f095b7b3ed4b4","modified":1757056082533},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"30d1f809efd252ed0233d96d4374efd2b01d2292","modified":1757056082533},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1757056082534},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"d27dbccaf3de1c9158d19e4fd49a25953cb5778d","modified":1757056082534},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"3be8d0a75e7cc96548667cae0cb6a474279bd0b5","modified":1757056082534},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"216f52fefc2274b542b549d8470503e6f1a308fb","modified":1757056082534},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"4929382bd60788d34752a66e2fe764ef797a72a0","modified":1757056082535},{"_id":"themes/butterfly/source/css/_tags/series.styl","hash":"0657169849bc4bf4d93b5492ade040c8f58c1901","modified":1757056082535},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"3a88eedcb694da79e92581ce50cb1a430b1fb615","modified":1757056082535},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"e846ddaef494d46cdfa2379deacfe74fa1cc5264","modified":1757056082535},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1757056082536},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"7119f2f2943de71999d3dd6ba5c60cde846f114b","modified":1757056082544},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"a2b783230a9143de69004cfc914d9f55e6fc1660","modified":1757056082544},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"7df4d27cf9e576c6b9c1e4f76a100a41749ca8bb","modified":1757056082495},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f0a90d8e39915a74b16ef22e851f179415cd7eaa","modified":1757056082496},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"b03ee8625149191f9d5d057bbc9824b68d8dd0c4","modified":1757056082496},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1757056082496},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"cbfbcf34a24d21ba2b21cf9eedb76f4c3c563c5a","modified":1757056082497},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1757056082497},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1757056082497},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"be45b522286bbc64724341f23a5056ad24d3f796","modified":1757056082497},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"7884883ec15792f7e54daacb3c62b851dde2b66a","modified":1757056082498},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1757056082498},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"24d094fd917947c0ca7492fa094328b1a183b873","modified":1757056082499},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"5b29badecbbe828112c001156023fc0566045cf6","modified":1757056082498},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"e8438941085def0591a72fc9b0d705dbf107f54f","modified":1757056082499},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"62466b251052cae609b6369d4cb4b6a85320757d","modified":1757056082499},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"89c63a5f0c0ab6314de7158fbc8fcbc84997fc55","modified":1757056082499},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"f2ea5249b3e6670f6c8c77868f4f42c502e43830","modified":1757056082500},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"c81fa7d8a5cb96d1ae07bfa8c46b84a58161add1","modified":1757056082500},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"8af585e6d6f73ee57114eefad574dc6e8ea9f570","modified":1757056082500},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"58914c58a190e3bc0aa37cb581e77e442b563501","modified":1757056082501},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"332b532bafbaf369fde840883b77e5a23d050a39","modified":1757056082501},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1757056082502},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"592b2251db6c1abeb8b0eebe3b2e6d9aa0dec445","modified":1757056082500},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"9d84a681289175dec75a85f301d2fc9ce1b2bb7a","modified":1757056082502},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"ea9766439b6b1936306916a8b08d2681afbc8ea9","modified":1757056082502},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"30a7d157890de69deab28baa47fb7bb28b040efd","modified":1757056082503},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"24f18b0c67803210d53abbf9c1d454c000b06eee","modified":1757056082503},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"53d99831f29aeb2e336ed1407d79590041f77002","modified":1757056082502},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"e2bf15357485cd502414b3b20f5b1f762a2fd014","modified":1757056082503},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"af66d13204030d47537b9e31a6173e63589ce7ff","modified":1757056082504},{"_id":"themes/butterfly/layout/includes/third-party/math/chartjs.pug","hash":"732eb1118ea1a73aa5c164d639097c614f8e9953","modified":1757056082504},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"b83db9fa64d42a0bfd97efb660e09be3f166a144","modified":1757056082504},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"db2f4fff80a1166476ea76ae004aa186df11bad3","modified":1757056082504},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"ca2fc5928ca292f29fd8333c73733344994096fb","modified":1757056082504},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"27fa75affebc6e84a487c62bceff783bde595256","modified":1757056082505},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"187302dbc916852ff2fdf47061e272c061611dda","modified":1757056082505},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"fa4b4194749d05f7249f365f2b89c0281057ce54","modified":1757056082505},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"a7c07dbc1e970a5b247091458e1ee9b144a3366d","modified":1757056082505},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"72e2970b23570e308f8af5d8ba8e5e3321d01bbf","modified":1757056082505},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"34edfebf0cace0852806be774910ccb0e0914650","modified":1757056082506},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"d2e12a9fc302a4efe52c90d44896fbd73e193a1f","modified":1757056082506},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d376ec17fb19fcdcf0d2ad71330190146d3af879","modified":1757056082506},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ec6c685080634ac46ffbea1b8f10313388888f43","modified":1757056082506},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"7f0ede1cd3fed2669c94a8e1b21bc0b183f310b8","modified":1757056082507},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"013756ff3363344987cc00fc9bd833baf193c341","modified":1757056082507},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"f8557548d2ad8dd149c562193991c6c6cda02415","modified":1757056082507},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"2622b4cf9189fa23e4a422aaf9ef272e4f2c6137","modified":1757056082508},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"5c944052280c5ed046d2cfeb54b0da8876af0ec6","modified":1757056082508},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"e51e896ccb13900de38dc81cf44dc789e2418a12","modified":1757056082508},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"9f02598b5e4296aec6470639d4bac4c9ac46392e","modified":1757056082524},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"efef352c1d122409575386bf3894dce8e87032e2","modified":1757056082508},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"077ec530831be1d80e93da380406b9f5abd0918a","modified":1757056082525},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"1883c91d43bff10aae55122a21e0b064b6f5c9dd","modified":1757056082525},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"de4bb5fc2dfca368b35e4c1109c92f7abc9e2245","modified":1757056082525},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"ef52ebf1e8e751a412f9456fdaeee7d88afd9a72","modified":1757056082524},{"_id":"themes/butterfly/source/img/index.jpg","hash":"84a86ba35bccf1f22518ffeacac9bd530ac59372","modified":1757056082542},{"_id":"themes/butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1757056082539},{"_id":"source/_posts/CodePen-前端开发者的在线代码编辑器.md","hash":"a267bca2325d5d46576e7b91925a5b755710ba5d","modified":1760164531486},{"_id":"source/_posts/Go 函数作为值和参数.md","hash":"f35ad000c3bafe72a820933185264a0a20724cbe","modified":1760165334805},{"_id":"source/_posts/hello-world.md","hash":"bb135e17e0108796e0cbbf8ff231c74278b38a16","modified":1760164531485},{"_id":"source/categories/index.md","hash":"df67a827a70cce1ebedb158e7327551191f3e9fc","modified":1760148729888},{"_id":"source/categories/index-1.md","hash":"0ebcb381b3918616817d6454ac499496978d523b","modified":1760148729888},{"_id":"source/tags/index-1.md","hash":"7a4e5ae1eb94d5be9e433228f91887cd0df112e5","modified":1760148730336},{"_id":"source/tags/index.md","hash":"ad0f87bfa0ff1b0e69ca6658c3b231e870c64c21","modified":1760148730337},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/toutiao-318517-small.jpg","hash":"67e22d1041d5f204f21d74418848bf2cde68cccd","modified":1760148729932},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/weixin-guanggu-coder.jpg","hash":"e61f04d9797cb6333ef9dcb174b619ba68a3dc35","modified":1760148729935},{"_id":"source/img/head.svg","hash":"14c2959e089b634281c43a6339b6076ccbde2b9b","modified":1760148730336},{"_id":"source/img/docs/md-go/go-secret--interface_files/v2-358347c3a75f2dc1be4747f8bc7966c0_1440w.jpg","hash":"aacb788b33b2c1ad819c67bab951629a396712bf","modified":1760148730209},{"_id":"source/img/docs/md-go/go-secret--interface_files/v2-523f8bb5deec35efd3bc636849e88975_1440w.jpg","hash":"be3b0a1972be24f27bf18d172e37fdbb640dc1cb","modified":1760148730210},{"_id":"source/img/docs/md-go/go-secret--interface_files/v2-554cf44e363c459ec53ad98e0f7b7f72_1440w.jpg","hash":"b6a4da551343668ac94427c0754c70143718ed2a","modified":1760148730210},{"_id":"source/img/docs/md-go/go-secret--interface_files/v2-6989ebff4e17f1f6b51a4e66626b5959_1440w.jpg","hash":"69adaa6408a74e5f0deb04164b8b9675e4c7585a","modified":1760148730210},{"_id":"source/img/docs/md-go/go-secret--interface_files/v2-7008ab5b023f82994ba74912bb25f81d_250x0.jpg","hash":"5ebaf1750f112663f86153de385305da29ddd88a","modified":1760148730211},{"_id":"source/img/docs/md-go/go-secret--interface_files/v2-b27690d8e08032b8b373701189516a75_1440w.jpg","hash":"b880c3a83b2751358722c8dd16834b0106ad25a2","modified":1760148730211},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/errata/ch3-12-func-call-frame-01.ditaa.png","hash":"a9d6021fc531199bb0ce61e264c24461eb1689a2","modified":1760148729896},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/appendix-c-chai2010.jpg","hash":"7175e5ee6c5613525532db97f15b9698e65204b5","modified":1760148729897},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/by-nc-sa-4.0-88x31.png","hash":"3af0f83fb09ddbffba0a0e476af204ef53fc3ae2","modified":1760148729897},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-1-go-family-tree.png","hash":"adb5f98186a09aa5edb9fab3d819b63d7a44cd1f","modified":1760148729897},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-12-init.ditaa.png","hash":"e08fcfc67d33df848bfa6e8d4f46db81037efd3a","modified":1760148729898},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-10-slice-1.ditaa.png","hash":"8d652dbd8f1a34139f87dbc044e7eaee499eb768","modified":1760148729898},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-11-init.ditaa.png","hash":"e08fcfc67d33df848bfa6e8d4f46db81037efd3a","modified":1760148729898},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-13-prime-sieve.png","hash":"5087dbc0d3c4dc92eda11ea828ea618c42c9e982","modified":1760148729899},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-2-go-log4.png","hash":"387d841c8b01a105809abc523ed76db228a7c482","modified":1760148729899},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-4-go-history.png","hash":"534ec33710c3978f604e63fc3f787dddca105f43","modified":1760148729900},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-5-prime-sieve.png","hash":"5087dbc0d3c4dc92eda11ea828ea618c42c9e982","modified":1760148729900},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-3-go-history.png","hash":"534ec33710c3978f604e63fc3f787dddca105f43","modified":1760148729899},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-6-alef.png","hash":"66957f4e513270924d1223e709a2936fa4145d4e","modified":1760148729900},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-7-array-4int.ditaa.png","hash":"af0d5e3886feed35767d239f3fd7ea9696927bb4","modified":1760148729900},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-8-string-1.ditaa.png","hash":"8775eb73a27e73cfdf322faf37cf2b510222d6d9","modified":1760148729900},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch1-9-string-2.ditaa.png","hash":"234ffda890dc05a545326e5e7ad25cd293c44b37","modified":1760148729901},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch2-1-x-ptr-to-y-ptr.uml.png","hash":"76cbbabce749a238e6739e456464d248063cffdd","modified":1760148729901},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch2-2-int32-to-char-ptr.uml.png","hash":"b3d3460f216c4a1b6bfcc42cbd3657c5e8860cfa","modified":1760148729901},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch2-3-x-slice-to-y-slice.uml.png","hash":"7522e861865968744e0edd60132c51828190d747","modified":1760148729901},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch2-4-cgo-generated-files.dot.png","hash":"165c778868c24a3d08bd6b7eb8fb5378f318b286","modified":1760148729902},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch2-5-call-c-sum-v1.uml.png","hash":"8b59e5e7eef14887adbe9622ca61eb1e622bd2cf","modified":1760148729902},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch2-6-call-c-sum-v2.uml.png","hash":"54b450c62a07b511392b621506ac6daa4c4a02d8","modified":1760148729903},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-10-func-arg-01.ditaa.png","hash":"2d90d9cc98cd87f7eada99b0e9fe52f6aae4317b","modified":1760148729904},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-11-func-local-var-01.ditaa.png","hash":"52f25d2cfaef946b11eb63de6b2f1cbdc9937bb9","modified":1760148729905},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-2-arch-amd64-01.ditaa.png","hash":"46786f524eb02eceb545f0b755d0ed7af13a0c93","modified":1760148729906},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-3-arch-amd64-02.ditaa.png","hash":"86b06663c10b0d1c7d77074324a88da7489c1c0f","modified":1760148729907},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-13-func-stack-frame-layout-01.ditaa.png","hash":"1052633e88fcbcedab8594efcec5e1fa638c890f","modified":1760148729906},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-12-func-call-frame-01.ditaa.png","hash":"a9d6021fc531199bb0ce61e264c24461eb1689a2","modified":1760148729905},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-5-ieee754.jpg","hash":"315b604543e0c1b1ae7598c139bc2b9549e29b6e","modified":1760148729907},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-4-pkg-var-decl-01.ditaa.png","hash":"33cedd30948ab3717de0d116504ebb7006c6a848","modified":1760148729907},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-8-func-decl-01.ditaa.png","hash":"e48443a92a946054eb38ed62ae10517cf0c20c0b","modified":1760148729908},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-6-pkg-var-decl-02.ditaa.png","hash":"c5a894131834de657108c19a5462e881205116f9","modified":1760148729908},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-7-pkg-var-decl-03.ditaa.png","hash":"2597599e345f437d7618c59930f66062e7e008dd","modified":1760148729908},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-9-func-decl-02.ditaa.png","hash":"0eb7dda1a4bcbab22f3b779c8912b2eb20245f2b","modified":1760148729909},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch4-2-grpc-gateway.png","hash":"060c6ed5b0444ffac7a482c69ba5dfdb4cc4e96f","modified":1760148729910},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch5-set-time-line_2.png","hash":"88f8e2afd13cc74c4180adc6cb22173dc3a02607","modified":1760148729911},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch5-set-time-line.png","hash":"e68d661323d2cf047e342a2cc6808c1fd6ccb569","modified":1760148729911},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch5-online-group.png","hash":"86aed63a12affb734a30466849e5498db9d07de0","modified":1760148729910},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch5-token-bucket.png","hash":"1a7ca4d0e1befc4a9c599ba722625fc7e7ed1826","modified":1760148729911},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-radix-get-1.png","hash":"684e37b50b5a2b3ccdbb28137aa873a65014f910","modified":1760148729911},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-radix-get-2.png","hash":"0eb43633406c329c7d7a5531b39707f696d627d9","modified":1760148729912},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-trie.png","hash":"7a03367ce5144b692cc257f48d68eaf2306e414c","modified":1760148729916},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-03-middleware_flow.png","hash":"27f1dd220d6d81482a4e979721f25d1f8eea5b4d","modified":1760148729917},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-04-validate-struct-tree.png","hash":"1d9c14f2cb857f01a8bcaf24c05df341c1a88b5a","modified":1760148729918},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-04-validate.jpg","hash":"1270223cb83d2276a7ec5b7f955ab068e2227cc9","modified":1760148729918},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-radix.png","hash":"7d5c111e7dc3d795abec60a7404f81453885e8b3","modified":1760148729916},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-code-gen-2.png","hash":"c749901546af828102c2697fce075ca290adc88e","modified":1760148729919},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-06-leaky-bucket.jpg","hash":"335843de4101611482d3019696c72ad9b0317294","modified":1760148729919},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-control-flow-2.png","hash":"33642bc403da13a707c629309ffa6e4f8f400ee6","modified":1760148729921},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-control-flow.png","hash":"c0adf5e2b0ea3027c42a044ab1f9baf0f39a8d3e","modified":1760148729921},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-controller-logic-dao.png","hash":"a228daa7dbd1fdbd8c49afec8a51d5186e55ab08","modified":1760148729921},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-09-nats-protocol-pub.png","hash":"777fab2f9cc088a06bbf0068425210f89e553f07","modified":1760148729923},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-09-nats-protocol-sub.png","hash":"445b189a670fa7af94d252bc15abd27dd3fb6d8c","modified":1760148729924},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-binary_tree.png","hash":"0eea4c26c4e93e24f4026563578f71a5e5e122f0","modified":1760148729925},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-binlog-sync.png","hash":"255d0ecc5ff91e99c583da3dd61f219bf8979d4c","modified":1760148729925},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-data-dist1.png","hash":"811a0a54ac9858a7823382d5c33928615084d191","modified":1760148729926},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-data-dist2.png","hash":"8860aabdf215bc65590720fd7b6617fa6fa9575e","modified":1760148729926},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-controller-logic-dao-storage.uml.png","hash":"9256e5da659c0bda110ab7c40922c01644cf5d25","modified":1760148729926},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-dist-crawler.png","hash":"ae4a2d835f3cfd18eea02149e5ca3b18751f1369","modified":1760148729927},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-four-branch-tree.png","hash":"fc3254302fe5feaf729cd2998d7d53539cec0573","modified":1760148729928},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-posting_list.png","hash":"d8979ee79948e739cf0874e4c0e7d424a19f3f52","modified":1760148729928},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-snowflake-easy.png","hash":"447707a287a2aeab68d72aa3327096bdd709b93d","modified":1760148729928},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-interface-impl.uml.png","hash":"12ae16a16d5e804882eab2fdc33d8303dec838c4","modified":1760148729928},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-snowflake.png","hash":"0547129bbe7af8ff5f8cf6d16d48f676b42137b3","modified":1760148729929},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-snoyflake.png","hash":"417f96e5e081a361af5396ca2ecbb7e534d18891","modified":1760148729929},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-sync.png","hash":"71fc16f7802b71705fc25106d96d37e27a3af00c","modified":1760148729929},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-timewheel.png","hash":"692513eb45c9c5c427dbffbbf6353f34961a02d8","modified":1760148729932},{"_id":"source/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/45eb40bea24442f7ab37066c9055da28.png","hash":"0e1248a41a8e321f257ce46342f6eb05d65acc46","modified":1760148729938},{"_id":"source/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/5a608da27fc9403ab0df680ba1971646.png","hash":"3294aa9b8bd685d12224466c90f16b9d3d0e337d","modified":1760148729938},{"_id":"source/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/68ab2ac17a2b4763bf7f3d361167864f.png","hash":"c93cd74c4b85722766ed6c8ef01707ffa2cab6ba","modified":1760148729939},{"_id":"source/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/c555b4cf7b4e461383019db527483d20.png","hash":"3e464e131535527d05a813d6cc8645e573b16861","modified":1760148729943},{"_id":"source/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/ec10e122d1da464c9a9988f0a94280b3.png","hash":"cae837825ea0508c6927b9c922d2ac2538fd54f6","modified":1760148729944},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media/8-2-example1-encapsulation.png","hash":"af075887d32682ade7e78bf725be72c4d2a8a980","modified":1760148730213},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media/8-2-example1-encapsulation2.png","hash":"6be8acac9887c2e81ed0fc77eb1f9100015b7444","modified":1760148730214},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image10.jpeg","hash":"9a663a0d1e9c64cade5d1b9b7c28c4fb6f24f741","modified":1760148730215},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image11.png","hash":"1e481a10556ce43734873b463e507d92b52a98e7","modified":1760148730215},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image12.png","hash":"15c10d5ae5c917b39a7910a2c9f59abce32aef24","modified":1760148730216},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image2.png","hash":"eff6afc3a2ca8e89fb347d432fb9f2fb4a796665","modified":1760148730216},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image13.png","hash":"2424406bb2a5e52b67c993ea3dd78a57b8fc1dbd","modified":1760148730216},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image3.png","hash":"0b61533d57289d8adb0056032603db5bb45f1127","modified":1760148730217},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image4.png","hash":"3c612f2ac4f0fa1ee75e16ed8da2394dd2c83f40","modified":1760148730217},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image5.png","hash":"a368eb5095d35f419cf0fe4fd021f39780584a0f","modified":1760148730219},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image6.jpeg","hash":"4637f696071bd08fae27df8495e270a405bf01cb","modified":1760148730219},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image8.jpeg","hash":"1fb97ef8a3c34aa612996da36434da53572147ad","modified":1760148730220},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image9.jpeg","hash":"c61c2543f134c7a4173aa705f276264b07dc81d5","modified":1760148730220},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media05/media/image3.GIF","hash":"4003cdb6d27ec1997cbfb550220d4405a58e176e","modified":1760148730238},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media05/media/image1.jpeg","hash":"e7e413a227517c892fb847ddb5e368cc3685dc53","modified":1760148730237},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image7.png","hash":"6c49425752ae8b5e6594403e394cd947a6cf0d9c","modified":1760148730219},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image10.jpeg","hash":"d3dfd13156aacc4af255057d4191aea00466f0a0","modified":1760148730221},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image11.jpeg","hash":"710b35bff89b18c510011ac37189a6af11ccab3e","modified":1760148730222},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image13.png","hash":"e3eaa88a2b5ed6b733c1cd73ba8ab1c679bf06b8","modified":1760148730222},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image12.jpeg","hash":"03aa85d6d231da643c173b597335afba1d49ebd9","modified":1760148730222},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image3.jpeg","hash":"c3a4a11a2178f911c2535f190f84503537c87417","modified":1760148730223},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image5.png","hash":"80e6da554f1096859d8f881e091ae6c0db91cda4","modified":1760148730224},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image4.jpeg","hash":"a6f5c428d37bcefd68f3ae34426324ad64595d39","modified":1760148730224},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image6.png","hash":"106230a204f8b3a9a3f4e89404c00068c0146559","modified":1760148730225},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image8.png","hash":"d276b76c847878f13ddbb8d2dd4e2e685c59d5aa","modified":1760148730226},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image9.png","hash":"9564e6ef3a32990ef13cdec6df4013cfde821c4b","modified":1760148730227},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image7.png","hash":"29d99dcf897ecba3f6657cefa4144421f74f990d","modified":1760148730225},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image1.jpeg","hash":"f012a2e046457dfd1bc4a1a84bd97e1ca7afee90","modified":1760148730245},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image2.jpeg","hash":"34bddb0e9bb4326b8ffbcbd0f53031a1de069382","modified":1760148730246},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image3.jpeg","hash":"c423bddb8ae7027c3adbef1e714631574e177f33","modified":1760148730246},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image4.jpeg","hash":"1206bd6da118d1277242672308030581e32b4b70","modified":1760148730246},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image5.jpeg","hash":"e5b452725b75ab72f3a989774f6f9ec9a74056b1","modified":1760148730247},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image6.jpeg","hash":"9f9368ff979ce95c5c03419d3be213614f1dd93f","modified":1760148730248},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image8.GIF","hash":"5ac964739909a27454bea75b378769fef9141c64","modified":1760148730248},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image7.GIF","hash":"9f073255bc1afe9a72b31f85adfbd3d5db6e8987","modified":1760148730248},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/empty-interface-etc-structure.jpg","hash":"aacb788b33b2c1ad819c67bab951629a396712bf","modified":1760148730250},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/ifc-struct-aft-assign.jpg","hash":"b6a4da551343668ac94427c0754c70143718ed2a","modified":1760148730250},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/empty-interface-etc-structure-aft-assign.jpg","hash":"b880c3a83b2751358722c8dd16834b0106ad25a2","modified":1760148730249},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/ifc-struct.jpg","hash":"69adaa6408a74e5f0deb04164b8b9675e4c7585a","modified":1760148730251},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image1.jpeg","hash":"0444e7d640b0c44800e535aa8ef87808e2eec728","modified":1760148730251},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image11.GIF","hash":"76dac196d85f1641dc511f7ec6863e2b6b22b4f3","modified":1760148730252},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image9.GIF","hash":"930f1b3aaa9978f88b75e63168c2db6e93c0a0a4","modified":1760148730249},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image10.GIF","hash":"ac01fca3ce7f32b180b5a1a4bbdb2c17d65abed3","modified":1760148730251},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image12.GIF","hash":"bd306a1396a591276c36293c6f015ffa42cbb9a1","modified":1760148730252},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image13.GIF","hash":"ac9286f04021e72361521311718553cce5388cdb","modified":1760148730253},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image14.GIF","hash":"db729c0082a960faafcb2ca384b16e2f5a683f2e","modified":1760148730253},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image15.GIF","hash":"c3b42d9c79753e4dc4d65110d31411a35fef9559","modified":1760148730253},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image16.GIF","hash":"20213cc88eccd2f968ec742a9c3d2a79f933c429","modified":1760148730254},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image17.GIF","hash":"b6385a35d6de816b17f18d8c939c5989a5769306","modified":1760148730254},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image18.GIF","hash":"a8b8dfc8ebd2577277f50968f8ad9449bf531e66","modified":1760148730254},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image2.jpeg","hash":"85c093d5913d89c4a095fe26f7a0f3a1fe77ee37","modified":1760148730255},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image3.jpeg","hash":"3e6c896ce79e370bf43fea57c85eefaef8bd4f5e","modified":1760148730255},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image4.jpeg","hash":"b6b16124620a7ed523c81ec35365ef9d5e1cf216","modified":1760148730256},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image9.GIF","hash":"ddf3cba031964a953b7cdd5a0097e3f384663034","modified":1760148730261},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image1.jpeg","hash":"579ce51b317af3f4d4629386686b88edc4108a39","modified":1760148730275},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/itabTable-struct.jpg","hash":"be3b0a1972be24f27bf18d172e37fdbb640dc1cb","modified":1760148730261},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image10.GIF","hash":"939ef20c6694f985e631c8a7cc61210d7698f281","modified":1760148730275},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image3.jpeg","hash":"138def0cddd2c40740eb0e7c9325eb74163dec3e","modified":1760148730276},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image4.GIF","hash":"a3d947ae35949e316bde17bf4d02161cb43e4a96","modified":1760148730276},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image2.GIF","hash":"3d7da30c7622afcb37dd96334e80db6b334abec4","modified":1760148730275},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image5.jpeg","hash":"cf038e4cf53c5b14f69ebb6c16d5472da1002d17","modified":1760148730276},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image7.jpeg","hash":"09f9aecc0671b95f5180e8b013f77128ee895ce8","modified":1760148730278},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image6.jpeg","hash":"d50719704072224c21ab15006cf8c6174be14fdf","modified":1760148730278},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image8.GIF","hash":"64dce4dcb9427a666ac94858f5a6c6e31e6f71c4","modified":1760148730278},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image9.GIF","hash":"9802ba8257a61a250ff02d7427fe1817061de2f8","modified":1760148730278},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image11.GIF","hash":"987f66976e0cac846ef3d60185ead8aca94958b4","modified":1760148730266},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image12.GIF","hash":"28d371a87bc1e1687f2fea92545ce97ff6791c94","modified":1760148730266},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image13.GIF","hash":"b8e0ae75aa61c25bd81781efaff2afeebcae17be","modified":1760148730266},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image14.GIF","hash":"fe566cc0cbd3758db88e1cfa0cba8ac71dfb9b4e","modified":1760148730267},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image15.GIF","hash":"eb57426e6542a6e083a40f43a34c9155165e8a57","modified":1760148730268},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image17.GIF","hash":"9441cbdae2d0ffa3b2818ee2ad52abdfbcaee1ae","modified":1760148730269},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image18.GIF","hash":"cf851d2c8c87eff04ef77fa39a6f93b13aaf6608","modified":1760148730269},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image2.GIF","hash":"ecfa5bedb9665ef223ed4e37925b359edfdf21f7","modified":1760148730270},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image16.GIF","hash":"17775215de8e9dcf72de076edc683a3af295c66b","modified":1760148730268},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image3.GIF","hash":"a47acc64bc2cfd7d068b0a195ebf60870421cfb0","modified":1760148730270},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image19.GIF","hash":"8f81b5e0af4e5f631ece30ab4b855ac4a677248e","modified":1760148730270},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image6.GIF","hash":"ac2f05672ff23cacbe3090d5b600400b270a19f8","modified":1760148730271},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image5.GIF","hash":"80bb8aa0699e4d459ec8bcb8a161dc3e098b751c","modified":1760148730271},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image9.GIF","hash":"2fa8bdd61e8db75426999b5f373a3a511ad4cd81","modified":1760148730274},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media12/media/image1.png","hash":"7d05c5880d5827a61b4659b88cc4702764847ad1","modified":1760148730290},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media12/media/image2.jpeg","hash":"6f0360799f06b68f092701249e6e72045dfeff67","modified":1760148730290},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image1.png","hash":"691ad1deb198203127227cd8cb144a26e9b1a219","modified":1760148730291},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image8.png","hash":"7349da0f8d9e023128fdf5bb60127a32a5936d92","modified":1760148730273},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media12/media/image3.jpeg","hash":"ec83bb07b0fb0506c73b8312ec58c89ac7269ccc","modified":1760148730291},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image10.png","hash":"c52a0d18839ce63b60ecbebb0d4d5715601fb0ad","modified":1760148730292},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image11.png","hash":"5a99f9d2283c43564ad7c77265249587594cd8a2","modified":1760148730292},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image12.png","hash":"394315a60e7dac421753fb9b16be0f22491f9d2c","modified":1760148730292},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image14.png","hash":"929831b6afec5d255da2a17ec44c0803a52ff578","modified":1760148730293},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image15.png","hash":"017f88ef62bd5239067b42fa6e6eee16ab8984e5","modified":1760148730294},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image16.png","hash":"fb9b0c147aa210731531184ffa2751a6136a7212","modified":1760148730294},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image13.png","hash":"88f50bc53aab8e8f368c8f67ec55bc14de7e3db4","modified":1760148730293},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image17.png","hash":"918a989fff8253fc4c75dbfc3fe0ae6e83321922","modified":1760148730295},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image18.png","hash":"3ede39325ec090c4dbf9fd9f814f0555c7eb3a7f","modified":1760148730295},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image19.png","hash":"dc36260fcf23693c8ad7828dc8f1bfb2af6ba90a","modified":1760148730295},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image20.png","hash":"a034b0811050582ec1672c4330d0a648b88c4440","modified":1760148730297},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image22.png","hash":"cf1e9cfa397985a7a1365ff7301f011290e39087","modified":1760148730297},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image21.png","hash":"8ca3c7ffbe17e6d8a8f2b51b6ae207fc9cb5dbc5","modified":1760148730297},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image23.png","hash":"342c963a4e010ff3a33dcdb9fa6c3aac4e290e3a","modified":1760148730298},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image2.png","hash":"14cc9ba165716a1dcca39094a0821757ccad7bd3","modified":1760148730296},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image24.png","hash":"c5914a18976bb00d238126e0032ff45020abbcbe","modified":1760148730298},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image25.png","hash":"ef8d23e2bdd4009f78b7b26f2a7570ac31030ed3","modified":1760148730298},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image26.png","hash":"7e6a987a3b8394eab71ed3d1bde8b48c29b6db3f","modified":1760148730298},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image28.png","hash":"4aebd50ea4b169c587199fb885efacd2fcd4ee50","modified":1760148730300},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image29.png","hash":"90f81500a21a2ff96412d414621fff1090daa829","modified":1760148730300},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image27.png","hash":"ddb28459644ce1f148e45df916c49874fd9950e1","modified":1760148730298},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image3.png","hash":"f408fd467fc83989fa947d9df7297b8aa26cbceb","modified":1760148730300},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image31.png","hash":"9d34ad4f08458f1380947f7f749750beb9c72f52","modified":1760148730301},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image4.png","hash":"83458b8952e099527c5024668e5424613aea1b84","modified":1760148730301},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image5.png","hash":"c954297328c1d99365f9aee34dc5503cbc149f9a","modified":1760148730302},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image6.png","hash":"d24e329b2edfc0633965ce75254fdb0d1dded380","modified":1760148730302},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image8.png","hash":"00ad0a19126784db29eda294ffbabb12f62e9615","modified":1760148730302},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image30.png","hash":"8243437652c9eb5b5d8bc71e1935d26ce7990476","modified":1760148730300},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image1.jpeg","hash":"b2a734255df9d93cd94a9ce38c1eeb53345e60f9","modified":1760148730304},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image10.png","hash":"d9a86b7d3b98f464a91d19a157bf32db97d3be66","modified":1760148730304},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image9.png","hash":"42b2eda4013ff9990a1f9ec2a9a6bfed12aac48d","modified":1760148730302},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image11.png","hash":"bfba99bab9b0a17a2ae828198c0dd83404cd23d1","modified":1760148730304},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image12.png","hash":"c726f9a128cd1df636f29bd2168814c0b15643a4","modified":1760148730305},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image14.png","hash":"c38df985c7497548f21e03893f5a0c0816efe592","modified":1760148730305},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image15.png","hash":"0c96a0ef7b3c242edc40d6da75b635441c5992b6","modified":1760148730306},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image16.png","hash":"d15f85e10267c08b25650fe72a5a8953910e086c","modified":1760148730306},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image13.png","hash":"62281a9f183ffc99dea7bdf6b3baf5904bd5c82e","modified":1760148730305},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image2.jpeg","hash":"5f232ec2566fb83aa5ad4fb3e2a27e3e20df4387","modified":1760148730307},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image5.png","hash":"1747ff9f3dcbba57dd220403bdbc96b8e5973b6d","modified":1760148730308},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image4.png","hash":"31fa616270026308740f72cd6289c6c5f1681957","modified":1760148730308},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image6.png","hash":"fcf4f47d7a4773281aefb0580aae82aec14c5e69","modified":1760148730308},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image8.png","hash":"fa9385512e98c9f60805250bf11d759a3ddb02c5","modified":1760148730309},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image7.png","hash":"7a30fb7a955fb45d4ca3ccebbf2098ba8ea46f26","modified":1760148730308},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image3.png","hash":"540862923429344f38b46fa57b2176b07cb2ae59","modified":1760148730307},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image7.png","hash":"0c97e7cd8d0ac21ff7c5fd39308d70b7d4426ee0","modified":1760148730302},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image9.png","hash":"989a6aee3e32a37c458defe9216c0e7ac214079c","modified":1760148730309},{"_id":"source/_posts/Go-学习笔记-1.md","hash":"3c3c9bedfa8376e4f534ba6653c97cca5edda906","modified":1760164531487},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/douban.png","hash":"5e3eb5e076e0d841859b9487c252ce1959aec7ac","modified":1760148729895},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/toutiao-318517.jpg","hash":"622ce88561174d5719cce593de4c44afb243caa3","modified":1760148729933},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/weappCode-qq-ke.jpg","hash":"978a4216ccee020e4b7f9a5015e24c808062f461","modified":1760148729934},{"_id":"source/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_07.png","hash":"89f40f13405aa597c13a4f82dc3f071ed08af76d","modified":1760148730333},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch3-1-arch-hsm-zero.jpg","hash":"af87cd84a1c0bd5458275604dd742d10de4ac5ba","modified":1760148729904},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch4-1-grpc-go-stack.png","hash":"34a56b7cb043062d4aaa5ac4c90c2ac5b0b91f3f","modified":1760148729909},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-radix-get-3.png","hash":"4faf229d5dd84841f8d65ae3637762609aa7ed44","modified":1760148729913},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-radix-put.png","hash":"5e133a9ceee402280027a865e038544a60301024","modified":1760148729914},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-03-gin_contrib.png","hash":"5ece8b8e67e86ce6d968557c2688915bbd6278ab","modified":1760148729917},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-radix-get-4.png","hash":"5b1d4c60d667ae4ae659e69831048be0b0e9256e","modified":1760148729914},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-code-gen.png","hash":"d004f91e90ee108e764ca74dec1025a55f388d73","modified":1760148729920},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-frontend-backend.png","hash":"dc2838353bd4c62d79f4d4f1c9426ffed6bd7ec0","modified":1760148729922},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-plugin-arch.jpg","hash":"e7828b1e0fe0342c73b36927c64285149d15f601","modified":1760148729923},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-ast-dsl.png","hash":"c7f6f12adea596426a724ef003fd53275ef97985","modified":1760148729925},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-task-sched.png","hash":"7ffb0e009bd116e99328d8720babebffa893227c","modified":1760148729930},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/images/ch6-terms.png","hash":"3d89bfe00fcabf7c16104caa2c37f269ae76e8a3","modified":1760148729931},{"_id":"source/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/25f20124d6c242f79aa911c9eaedaaaa.png","hash":"4861970761ad42c525a2b9cec2e5036aeb70bd99","modified":1760148729937},{"_id":"source/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/69b2678a700841efad69dca2aa0a4c34.png","hash":"78ec053383591b595822bdfab108b957816da20c","modified":1760148729940},{"_id":"source/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/a8437e646ff54111a778e9246eddad43.png","hash":"f271dec39361d006d019eb812f2385882c2c8d02","modified":1760148729940},{"_id":"source/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/c7386cbe6be348909afda0b825fc527a.png","hash":"eb8b348463af425dc189c27c9bfb10d49a2d3c2a","modified":1760148729944},{"_id":"source/img/docs/md-go/go-admin/images/api-Server-init-sequence.png","hash":"b5175ed00716814aa2fa58e341def87c027a8f4c","modified":1760148730200},{"_id":"source/img/docs/md-go/go-admin/images/api-server--Request-Lifecycle.png","hash":"83167d17ddadad289bd9041c8750f512ae716655","modified":1760148730201},{"_id":"source/img/docs/md-go/go-admin/images/api-server-component-diagram.png","hash":"c45557847a6d2dd28e0a4cde846afd7c11ab82af","modified":1760148730204},{"_id":"source/img/docs/md-go/go-admin/images/api-server-router-sys.png","hash":"87a3def778e4322fe0dcf5d96ec8ecf867b53ed7","modified":1760148730205},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image1.png","hash":"9c7ae8163ebdd100f7b5c385830315e887cf24bb","modified":1760148730215},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image2.png","hash":"c195bfff0301dbf444eabd03e04c126cc8bdf389","modified":1760148730223},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image5.GIF","hash":"cdef3440ed63c1757461a9187f9aa5149f96e596","modified":1760148730257},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image7.GIF","hash":"d4963723db02311d0450ddeade0139f5fc7fe7b3","modified":1760148730260},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image8.GIF","hash":"8bbf789c8ec8edf275e705b3e13aa822e58fe1f5","modified":1760148730261},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image6.GIF","hash":"6eb6aeb86955c178362a097691bec2745affa3e0","modified":1760148730258},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image1.GIF","hash":"20050c952328ef817967080e20e7f36c398e0e95","modified":1760148730264},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image4.jpeg","hash":"32de6275d229be865f4f2a8f5619521b437156a7","modified":1760148730271},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image7.png","hash":"0125ab3feced39968b5461e839685a8653debbb7","modified":1760148730272},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image17.png","hash":"9241e85f8dc38e438e3158cd753f242f2cfa2a3a","modified":1760148730307},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/weixin-guanggu-coder-logo.png","hash":"2806e5334ba366c2bf211685645d635e46bf69ed","modified":1760148729935},{"_id":"source/img/docs/md-go/go-admin/images/api-server-Service-Layer.png","hash":"9257b6c76e397210765d374dbd571def71edd4d4","modified":1760148730203},{"_id":"source/img/docs/md-go/go-admin/images/go-admin-team.png","hash":"0757d8af2e72dbb5624f080841258b5b9716a576","modified":1760148730207},{"_id":"source/img/docs/md-go/go-admin/images/settings.yml-loading-sequence.png","hash":"e6b8602a7bfc467135297ad50c2d931d3a502d52","modified":1760148730209},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media/8-1-4-package-init.png","hash":"72e0909c334061d94edaf7c59b34bc8b38e29b03","modified":1760148730213},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media05/media/image2.GIF","hash":"538ebf146e687da755310f8618ccabcf212f5f75","modified":1760148730238},{"_id":"source/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_08-09.png","hash":"af1c8a630f3aec5337d8b9002f59758e0d3c56ff","modified":1760148730335},{"_id":"source/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/b935506d68b44320878e934a58824520.png","hash":"dbfd5407357d8b7067ced807c58d154871fa1ecb","modified":1760148729942},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09a/chan-event.png","hash":"7c8627c8c8c811d28426b397770780780997559b","modified":1760148730285},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09a/chan-send-task-2routine-pool.png","hash":"dc6dabf5cbf989406af6ab8710e6b803bdbdf2e2","modified":1760148730290},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image10.GIF","hash":"44d8f9046ebcbdea65b24195c22b7949e986ca74","modified":1760148730266},{"_id":"source/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_03.png","hash":"8116828af20edbefafb69a512fbb3092b4dd8cca","modified":1760148730322},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/kubectl-apply-1.png","hash":"ba1d669ae689f4b371a0fc4fe340524df6222729","modified":1760148730047},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/kubectl-apply.png","hash":"8755e42b39f9026b501d14a9e9fab7a49c17009c","modified":1760148730054},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03a/deep-copy--shallow-copy.png","hash":"f9f49911e9088653bd614d26f90f9f81bf1dffda","modified":1760148730235},{"_id":"source/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_06.png","hash":"97d8a2c72d86f44b9241bf9f638db25dd3240ce7","modified":1760148730332},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/kubectl-get-services.png","hash":"ef5670c8d89260d5f29e137d9de8cc43a07a42fa","modified":1760148730070},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/minik-example-3-service.png","hash":"80098e62c58114a204557fe7cc19795d4ffc1b47","modified":1760148730106},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/minik-example-3-service2.png","hash":"82220b366cabe183a0bc0311546607cc156087b3","modified":1760148730114},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/minik-example-3-service3.png","hash":"b6d09b27c93a6ab3bc6436f357f81d940ab07c31","modified":1760148730117},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09a/chan-control-max-concurrent-goroutine.png","hash":"f03999f4bc5d3a1c9da8bd40bb195239883dc1f4","modified":1760148730283},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media09a/chan-producer-consumer.png","hash":"13ac2c2628f410aab15fa1068d470abbc6af68af","modified":1760148730287},{"_id":"source/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_04.png","hash":"99b32d22cf1abbfa1c4eb38f15b78b3813c71a2b","modified":1760148730326},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/kubectl-0.png","hash":"5be0d50b5499b07e41ff9fc86d15cdac0e0d9b5d","modified":1760148730045},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/minik-example.png","hash":"c11221b4fe97511ee2f42ce2225db1944bfb8583","modified":1760148730120},{"_id":"source/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_05.png","hash":"b64994d3e0e2c6c06c318f602a28f3e1fba0041c","modified":1760148730330},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/vscode-deployment-yaml-create.png","hash":"c4c7b4d5c35787559da923115e3cef2a20139656","modified":1760148730162},{"_id":"source/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_01.png","hash":"29158b8c5dcaaa324bb8a2870355d3508f0e2448","modified":1760148730313},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/k8s-control-plane-monitor-netstat.png","hash":"73a3ce3eb1400e14997cecbb4749648bbc9d34ff","modified":1760148729987},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/kubectl-apply-1update.png","hash":"1f03bd1101ab796163ad7126b5e571102fdfe5bb","modified":1760148730051},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/service-NodePort.png","hash":"5a1ec823e2eb15e34a4a321cee303832e0c9bb61","modified":1760148730157},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/k8s-node-pod.png","hash":"ca2d4da33fb7327283752c631a426193ba829b5e","modified":1760148730018},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/minik-example-3-service1.png","hash":"f013b5250581cd6f06078d875950c6301ed4492d","modified":1760148730111},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/vscode-kubernets-2.png","hash":"6f7520bfe3bde50f05e9ce88391157add012b283","modified":1760148730183},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media05a/chan-underlying-struct.png","hash":"5b4321973dcae7af3638c5c0584a0b840b4534c9","modified":1760148730244},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/kubectl-get-pods.png","hash":"2d8d4eed66247591da4f06b9f467276fb7298070","modified":1760148730067},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/minik-example-1.png","hash":"c21f3e85d31740ef6d3bee7b70094c6bf800537e","modified":1760148730093},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/minik-fw.png","hash":"3730ae52cc2a28c0bb9ee082a7a930fdefffd143","modified":1760148730124},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/vscode-kubernets-1.png","hash":"277e4ed18bac551c71edb22c01b81c91b61eae3d","modified":1760148730178},{"_id":"source/img/docs/md-go/goLang-rumen-tutoria-md/media03a/array-slice.png","hash":"c886003b9011988c7cdba2f097c72218bf8ab49d","modified":1760148730233},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/k8s-control-plane-use-backup-pod1.png","hash":"53132ed059a741a0b5afd7a20179f41bb5a25209","modified":1760148730000},{"_id":"source/img/docs/md-go/advanced-go-programming-book-master/cover.png","hash":"bb52a148331822c981a70059c42609533805b373","modified":1760148729895},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/k8s-control-plane-use-backup-pod.png","hash":"f2c317c65eeeffae046f449933427718c39b6170","modified":1760148729994},{"_id":"source/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_02.png","hash":"033573628b8cde54eb55d0813a952bc48e5f0a90","modified":1760148730320},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/kubectl-delete-1.png","hash":"64f7a77f7e5846fa153e750ca8577dfcd4d88cce","modified":1760148730061},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/minikube-service-servicename.png","hash":"cd3b241ed72b35bf0d129285077e4ee5ab59e3d7","modified":1760148730132},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/open-app-in-browe.png","hash":"5fa1aa6d8f5f9c441cf1c95d3157d6829efc2689","modified":1760148730140},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/deployment-yaml-update.png","hash":"3e336c98592d3d86f0ed36f59c37c76be5c978f7","modified":1760148729965},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/vscode-k8s-check-status.png","hash":"dc784322629e09be32bec00ccec011ec33f903cc","modified":1760148730172},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/k8s-control-plane-api.png","hash":"47d0e94c0c2c7e414a56e6e4377c6b1446bbee61","modified":1760148729982},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/k8s-control-plane.png","hash":"fade38236b8e57512b75cbc6c0749d9d53d5c4e2","modified":1760148730009},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/kubectl-version.png","hash":"0997073170a4596997dc50fad9a50b0b7b9ee9d4","modified":1760148730078},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/minik-download-install.png","hash":"bdc5b1689bc1994dd527b519750062025d74b324","modified":1760148730087},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/minik-example-2-pod-communicate.png","hash":"e71eaf8cca5a838ce3701ee576cef85b54c5c08d","modified":1760148730102},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/k8s-cluster1.png","hash":"1c60589655b16d961a66f3456a8e46f0ef0f0470","modified":1760148729974},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/business-website.png","hash":"e9771ec6ed9e0276cf0fd181e9cc0b432b36d5de","modified":1760148729956},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/k8s-pods.png","hash":"1414d7b8bb01fd7840d95c0e9d78fb0081bccb08","modified":1760148730029},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/k8s-website.png","hash":"9d58b14ba070d160cee8d313da2592cc4cbf4181","modified":1760148730041},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/open-app-in-browe1.png","hash":"cf4a4b36b9ff28a19b1e39fcbdb0d62d979974fb","modified":1760148730153},{"_id":"source/img/docs/md-go/doc-docker/k8s-minikube/vscode-kubernets-plugin.png","hash":"d30fdc4c1bd316a5ee2919d623a4d3c88fe01c1d","modified":1760148730198},{"_id":"public/atom.xml","hash":"a32b00763d5fd94ed1c26a5180b58c5b89679263","modified":1761184559055},{"_id":"public/search.xml","hash":"8d0b5aa514006ffd968ffa6976238e6da70945ec","modified":1761184559055},{"_id":"public/sitemap.txt","hash":"fd5ced931022a155b4697cf30f0d15ca927a54ed","modified":1761184559055},{"_id":"public/sitemap.xml","hash":"e9a93eedcdaf595f47c382678673b1c9c805a405","modified":1761184559055},{"_id":"public/tags/index.html","hash":"9c2de5d387115d5c9a083a3380d736339483b6f4","modified":1761184559055},{"_id":"public/categories/index.html","hash":"eff4184569d0421ea2625c3efc02a9cfcb7d4791","modified":1761184559055},{"_id":"public/categories/index-1.html","hash":"45f27b23ae5f2298d1b388f81ae6ff4c6a8194fc","modified":1761184559055},{"_id":"public/tags/index-1.html","hash":"417a1c4d2f4df2f9225ade6ce09bcf98865cb755","modified":1761184559055},{"_id":"public/posts/28184.html","hash":"218dcd79649c575e67fd3e56690d70c55472dd92","modified":1761184559055},{"_id":"public/posts/28377.html","hash":"05884453fd1d35a20ece520a596d4d899f5b413a","modified":1761184559055},{"_id":"public/posts/37369.html","hash":"0756d8d8f48df1aaec736da10a12ff4b88c2dc41","modified":1761184559055},{"_id":"public/posts/46190.html","hash":"1304c3a14b201ae528ccbc76716981ad2e91e0c5","modified":1761184559055},{"_id":"public/archives/index.html","hash":"3eb578d99980dcf564ce91d5aedea34e7305f47f","modified":1761184559055},{"_id":"public/archives/2025/index.html","hash":"93eec26b1da4e8496b126c57521e7f737da3460f","modified":1761184559055},{"_id":"public/archives/2025/01/index.html","hash":"641e4bf2f665739223eb8140d36d22ca129a0782","modified":1761184559055},{"_id":"public/archives/2025/09/index.html","hash":"f4dafbf781ab5fb41d243f71962f53e1383dc01f","modified":1761184559055},{"_id":"public/archives/2025/10/index.html","hash":"bdda996ca821a42ee9469414d8e143f98d948021","modified":1761184559055},{"_id":"public/categories/Go学习笔记/index.html","hash":"1fc19752643eaac3e13b83dd2546a01e956a4f50","modified":1761184559055},{"_id":"public/index.html","hash":"a85ab62cc14abeb86febb56021c32f81b3152934","modified":1761184559055},{"_id":"public/categories/技术分享/index.html","hash":"558d3d3bc4f3408ae12302aa0fb1a27f7d8d7c82","modified":1761184559055},{"_id":"public/categories/生活/index.html","hash":"725223080a061c924108393a94c5ec1e78c0a558","modified":1761184559055},{"_id":"public/tags/Go/index.html","hash":"0577734b52198b60eb8e8b9b66eb81e1b2cc4247","modified":1761184559055},{"_id":"public/tags/前端开发/index.html","hash":"6c272bb6b01d0f22491f14db3ff868a347e93ac4","modified":1761184559055},{"_id":"public/tags/工具推荐/index.html","hash":"4cd586ad0fc11eec131c208d650db1f32061dd6d","modified":1761184559055},{"_id":"public/tags/CodePen/index.html","hash":"56b6d2485db70184457d1602568ea680a2822020","modified":1761184559055},{"_id":"public/tags/在线编辑器/index.html","hash":"7681bfc292c31914f1f38560cf56c234a1088327","modified":1761184559055},{"_id":"public/tags/PL/index.html","hash":"be4e30bfcb39a98136b004ed9495fbcf552e65df","modified":1761184559055},{"_id":"public/tags/博客/index.html","hash":"b7c15a320a67ab0ae532d146cd8bab58485719f9","modified":1761184559055},{"_id":"public/tags/技术/index.html","hash":"ef1e40d6a39e52403940c2bff1cd554d63515230","modified":1761184559055},{"_id":"public/tags/学习/index.html","hash":"8da17405100cdceb0e649a19f1045f3678540284","modified":1761184559055},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1760167422220},{"_id":"public/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1760167422220},{"_id":"public/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1760167422220},{"_id":"public/img/head.svg","hash":"14c2959e089b634281c43a6339b6076ccbde2b9b","modified":1760167422220},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/toutiao-318517-small.jpg","hash":"67e22d1041d5f204f21d74418848bf2cde68cccd","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/weixin-guanggu-coder.jpg","hash":"e61f04d9797cb6333ef9dcb174b619ba68a3dc35","modified":1760167422220},{"_id":"public/img/docs/md-go/go-secret--interface_files/v2-358347c3a75f2dc1be4747f8bc7966c0_1440w.jpg","hash":"aacb788b33b2c1ad819c67bab951629a396712bf","modified":1760167422220},{"_id":"public/img/docs/md-go/go-secret--interface_files/v2-523f8bb5deec35efd3bc636849e88975_1440w.jpg","hash":"be3b0a1972be24f27bf18d172e37fdbb640dc1cb","modified":1760167422220},{"_id":"public/img/docs/md-go/go-secret--interface_files/v2-554cf44e363c459ec53ad98e0f7b7f72_1440w.jpg","hash":"b6a4da551343668ac94427c0754c70143718ed2a","modified":1760167422220},{"_id":"public/img/docs/md-go/go-secret--interface_files/v2-7008ab5b023f82994ba74912bb25f81d_250x0.jpg","hash":"5ebaf1750f112663f86153de385305da29ddd88a","modified":1760167422220},{"_id":"public/img/docs/md-go/go-secret--interface_files/v2-b27690d8e08032b8b373701189516a75_1440w.jpg","hash":"b880c3a83b2751358722c8dd16834b0106ad25a2","modified":1760167422220},{"_id":"public/img/docs/md-go/go-secret--interface_files/v2-6989ebff4e17f1f6b51a4e66626b5959_1440w.jpg","hash":"69adaa6408a74e5f0deb04164b8b9675e4c7585a","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/errata/ch3-12-func-call-frame-01.ditaa.png","hash":"a9d6021fc531199bb0ce61e264c24461eb1689a2","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/appendix-c-chai2010.jpg","hash":"7175e5ee6c5613525532db97f15b9698e65204b5","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/by-nc-sa-4.0-88x31.png","hash":"3af0f83fb09ddbffba0a0e476af204ef53fc3ae2","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch1-11-init.ditaa.png","hash":"e08fcfc67d33df848bfa6e8d4f46db81037efd3a","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch1-10-slice-1.ditaa.png","hash":"8d652dbd8f1a34139f87dbc044e7eaee499eb768","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch1-12-init.ditaa.png","hash":"e08fcfc67d33df848bfa6e8d4f46db81037efd3a","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch1-1-go-family-tree.png","hash":"adb5f98186a09aa5edb9fab3d819b63d7a44cd1f","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch1-13-prime-sieve.png","hash":"5087dbc0d3c4dc92eda11ea828ea618c42c9e982","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch1-2-go-log4.png","hash":"387d841c8b01a105809abc523ed76db228a7c482","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch1-3-go-history.png","hash":"534ec33710c3978f604e63fc3f787dddca105f43","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch1-5-prime-sieve.png","hash":"5087dbc0d3c4dc92eda11ea828ea618c42c9e982","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch1-6-alef.png","hash":"66957f4e513270924d1223e709a2936fa4145d4e","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch1-7-array-4int.ditaa.png","hash":"af0d5e3886feed35767d239f3fd7ea9696927bb4","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch1-4-go-history.png","hash":"534ec33710c3978f604e63fc3f787dddca105f43","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch1-8-string-1.ditaa.png","hash":"8775eb73a27e73cfdf322faf37cf2b510222d6d9","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch1-9-string-2.ditaa.png","hash":"234ffda890dc05a545326e5e7ad25cd293c44b37","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch2-1-x-ptr-to-y-ptr.uml.png","hash":"76cbbabce749a238e6739e456464d248063cffdd","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch2-3-x-slice-to-y-slice.uml.png","hash":"7522e861865968744e0edd60132c51828190d747","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch2-4-cgo-generated-files.dot.png","hash":"165c778868c24a3d08bd6b7eb8fb5378f318b286","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch2-5-call-c-sum-v1.uml.png","hash":"8b59e5e7eef14887adbe9622ca61eb1e622bd2cf","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch2-2-int32-to-char-ptr.uml.png","hash":"b3d3460f216c4a1b6bfcc42cbd3657c5e8860cfa","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch2-6-call-c-sum-v2.uml.png","hash":"54b450c62a07b511392b621506ac6daa4c4a02d8","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch3-10-func-arg-01.ditaa.png","hash":"2d90d9cc98cd87f7eada99b0e9fe52f6aae4317b","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch3-3-arch-amd64-02.ditaa.png","hash":"86b06663c10b0d1c7d77074324a88da7489c1c0f","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch3-11-func-local-var-01.ditaa.png","hash":"52f25d2cfaef946b11eb63de6b2f1cbdc9937bb9","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch3-2-arch-amd64-01.ditaa.png","hash":"46786f524eb02eceb545f0b755d0ed7af13a0c93","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch3-13-func-stack-frame-layout-01.ditaa.png","hash":"1052633e88fcbcedab8594efcec5e1fa638c890f","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch3-12-func-call-frame-01.ditaa.png","hash":"a9d6021fc531199bb0ce61e264c24461eb1689a2","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch3-5-ieee754.jpg","hash":"315b604543e0c1b1ae7598c139bc2b9549e29b6e","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch3-7-pkg-var-decl-03.ditaa.png","hash":"2597599e345f437d7618c59930f66062e7e008dd","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch3-4-pkg-var-decl-01.ditaa.png","hash":"33cedd30948ab3717de0d116504ebb7006c6a848","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch3-6-pkg-var-decl-02.ditaa.png","hash":"c5a894131834de657108c19a5462e881205116f9","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch3-8-func-decl-01.ditaa.png","hash":"e48443a92a946054eb38ed62ae10517cf0c20c0b","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch3-9-func-decl-02.ditaa.png","hash":"0eb7dda1a4bcbab22f3b779c8912b2eb20245f2b","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch5-online-group.png","hash":"86aed63a12affb734a30466849e5498db9d07de0","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch5-set-time-line_2.png","hash":"88f8e2afd13cc74c4180adc6cb22173dc3a02607","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch5-set-time-line.png","hash":"e68d661323d2cf047e342a2cc6808c1fd6ccb569","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch4-2-grpc-gateway.png","hash":"060c6ed5b0444ffac7a482c69ba5dfdb4cc4e96f","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch5-token-bucket.png","hash":"1a7ca4d0e1befc4a9c599ba722625fc7e7ed1826","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-radix-get-1.png","hash":"684e37b50b5a2b3ccdbb28137aa873a65014f910","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-radix-get-2.png","hash":"0eb43633406c329c7d7a5531b39707f696d627d9","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-radix.png","hash":"7d5c111e7dc3d795abec60a7404f81453885e8b3","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-trie.png","hash":"7a03367ce5144b692cc257f48d68eaf2306e414c","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-04-validate-struct-tree.png","hash":"1d9c14f2cb857f01a8bcaf24c05df341c1a88b5a","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-04-validate.jpg","hash":"1270223cb83d2276a7ec5b7f955ab068e2227cc9","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-06-leaky-bucket.jpg","hash":"335843de4101611482d3019696c72ad9b0317294","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-03-middleware_flow.png","hash":"27f1dd220d6d81482a4e979721f25d1f8eea5b4d","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-code-gen-2.png","hash":"c749901546af828102c2697fce075ca290adc88e","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-control-flow-2.png","hash":"33642bc403da13a707c629309ffa6e4f8f400ee6","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-controller-logic-dao.png","hash":"a228daa7dbd1fdbd8c49afec8a51d5186e55ab08","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-control-flow.png","hash":"c0adf5e2b0ea3027c42a044ab1f9baf0f39a8d3e","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-09-nats-protocol-pub.png","hash":"777fab2f9cc088a06bbf0068425210f89e553f07","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-09-nats-protocol-sub.png","hash":"445b189a670fa7af94d252bc15abd27dd3fb6d8c","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-binlog-sync.png","hash":"255d0ecc5ff91e99c583da3dd61f219bf8979d4c","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-data-dist1.png","hash":"811a0a54ac9858a7823382d5c33928615084d191","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-controller-logic-dao-storage.uml.png","hash":"9256e5da659c0bda110ab7c40922c01644cf5d25","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-binary_tree.png","hash":"0eea4c26c4e93e24f4026563578f71a5e5e122f0","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-data-dist2.png","hash":"8860aabdf215bc65590720fd7b6617fa6fa9575e","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-four-branch-tree.png","hash":"fc3254302fe5feaf729cd2998d7d53539cec0573","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-dist-crawler.png","hash":"ae4a2d835f3cfd18eea02149e5ca3b18751f1369","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-interface-impl.uml.png","hash":"12ae16a16d5e804882eab2fdc33d8303dec838c4","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-posting_list.png","hash":"d8979ee79948e739cf0874e4c0e7d424a19f3f52","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-snowflake.png","hash":"0547129bbe7af8ff5f8cf6d16d48f676b42137b3","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-snowflake-easy.png","hash":"447707a287a2aeab68d72aa3327096bdd709b93d","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-sync.png","hash":"71fc16f7802b71705fc25106d96d37e27a3af00c","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-snoyflake.png","hash":"417f96e5e081a361af5396ca2ecbb7e534d18891","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-timewheel.png","hash":"692513eb45c9c5c427dbffbbf6353f34961a02d8","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/5a608da27fc9403ab0df680ba1971646.png","hash":"3294aa9b8bd685d12224466c90f16b9d3d0e337d","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/45eb40bea24442f7ab37066c9055da28.png","hash":"0e1248a41a8e321f257ce46342f6eb05d65acc46","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/68ab2ac17a2b4763bf7f3d361167864f.png","hash":"c93cd74c4b85722766ed6c8ef01707ffa2cab6ba","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/ec10e122d1da464c9a9988f0a94280b3.png","hash":"cae837825ea0508c6927b9c922d2ac2538fd54f6","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/c555b4cf7b4e461383019db527483d20.png","hash":"3e464e131535527d05a813d6cc8645e573b16861","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media/8-2-example1-encapsulation.png","hash":"af075887d32682ade7e78bf725be72c4d2a8a980","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media/8-2-example1-encapsulation2.png","hash":"6be8acac9887c2e81ed0fc77eb1f9100015b7444","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image10.jpeg","hash":"9a663a0d1e9c64cade5d1b9b7c28c4fb6f24f741","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image11.png","hash":"1e481a10556ce43734873b463e507d92b52a98e7","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image2.png","hash":"eff6afc3a2ca8e89fb347d432fb9f2fb4a796665","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image13.png","hash":"2424406bb2a5e52b67c993ea3dd78a57b8fc1dbd","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image12.png","hash":"15c10d5ae5c917b39a7910a2c9f59abce32aef24","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image3.png","hash":"0b61533d57289d8adb0056032603db5bb45f1127","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image4.png","hash":"3c612f2ac4f0fa1ee75e16ed8da2394dd2c83f40","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image5.png","hash":"a368eb5095d35f419cf0fe4fd021f39780584a0f","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image6.jpeg","hash":"4637f696071bd08fae27df8495e270a405bf01cb","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image8.jpeg","hash":"1fb97ef8a3c34aa612996da36434da53572147ad","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image9.jpeg","hash":"c61c2543f134c7a4173aa705f276264b07dc81d5","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media05/media/image3.GIF","hash":"4003cdb6d27ec1997cbfb550220d4405a58e176e","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image7.png","hash":"6c49425752ae8b5e6594403e394cd947a6cf0d9c","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image11.jpeg","hash":"710b35bff89b18c510011ac37189a6af11ccab3e","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image10.jpeg","hash":"d3dfd13156aacc4af255057d4191aea00466f0a0","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media05/media/image1.jpeg","hash":"e7e413a227517c892fb847ddb5e368cc3685dc53","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image12.jpeg","hash":"03aa85d6d231da643c173b597335afba1d49ebd9","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image13.png","hash":"e3eaa88a2b5ed6b733c1cd73ba8ab1c679bf06b8","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image3.jpeg","hash":"c3a4a11a2178f911c2535f190f84503537c87417","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/douban.png","hash":"5e3eb5e076e0d841859b9487c252ce1959aec7ac","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/weappCode-qq-ke.jpg","hash":"978a4216ccee020e4b7f9a5015e24c808062f461","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/toutiao-318517.jpg","hash":"622ce88561174d5719cce593de4c44afb243caa3","modified":1760167422220},{"_id":"public/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_07.png","hash":"89f40f13405aa597c13a4f82dc3f071ed08af76d","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch3-1-arch-hsm-zero.jpg","hash":"af87cd84a1c0bd5458275604dd742d10de4ac5ba","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch4-1-grpc-go-stack.png","hash":"34a56b7cb043062d4aaa5ac4c90c2ac5b0b91f3f","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-radix-get-4.png","hash":"5b1d4c60d667ae4ae659e69831048be0b0e9256e","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-radix-put.png","hash":"5e133a9ceee402280027a865e038544a60301024","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-02-radix-get-3.png","hash":"4faf229d5dd84841f8d65ae3637762609aa7ed44","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-03-gin_contrib.png","hash":"5ece8b8e67e86ce6d968557c2688915bbd6278ab","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-code-gen.png","hash":"d004f91e90ee108e764ca74dec1025a55f388d73","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-frontend-backend.png","hash":"dc2838353bd4c62d79f4d4f1c9426ffed6bd7ec0","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-08-plugin-arch.jpg","hash":"e7828b1e0fe0342c73b36927c64285149d15f601","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-ast-dsl.png","hash":"c7f6f12adea596426a724ef003fd53275ef97985","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-terms.png","hash":"3d89bfe00fcabf7c16104caa2c37f269ae76e8a3","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/images/ch6-task-sched.png","hash":"7ffb0e009bd116e99328d8720babebffa893227c","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/25f20124d6c242f79aa911c9eaedaaaa.png","hash":"4861970761ad42c525a2b9cec2e5036aeb70bd99","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/69b2678a700841efad69dca2aa0a4c34.png","hash":"78ec053383591b595822bdfab108b957816da20c","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/a8437e646ff54111a778e9246eddad43.png","hash":"f271dec39361d006d019eb812f2385882c2c8d02","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/c7386cbe6be348909afda0b825fc527a.png","hash":"eb8b348463af425dc189c27c9bfb10d49a2d3c2a","modified":1760167422220},{"_id":"public/img/docs/md-go/go-admin/images/api-Server-init-sequence.png","hash":"b5175ed00716814aa2fa58e341def87c027a8f4c","modified":1760167422220},{"_id":"public/img/docs/md-go/go-admin/images/api-server--Request-Lifecycle.png","hash":"83167d17ddadad289bd9041c8750f512ae716655","modified":1760167422220},{"_id":"public/img/docs/md-go/go-admin/images/api-server-component-diagram.png","hash":"c45557847a6d2dd28e0a4cde846afd7c11ab82af","modified":1760167422220},{"_id":"public/img/docs/md-go/go-admin/images/api-server-router-sys.png","hash":"87a3def778e4322fe0dcf5d96ec8ecf867b53ed7","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image6.png","hash":"106230a204f8b3a9a3f4e89404c00068c0146559","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image5.png","hash":"80e6da554f1096859d8f881e091ae6c0db91cda4","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image7.png","hash":"29d99dcf897ecba3f6657cefa4144421f74f990d","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image9.png","hash":"9564e6ef3a32990ef13cdec6df4013cfde821c4b","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image8.png","hash":"d276b76c847878f13ddbb8d2dd4e2e685c59d5aa","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image1.jpeg","hash":"f012a2e046457dfd1bc4a1a84bd97e1ca7afee90","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image2.jpeg","hash":"34bddb0e9bb4326b8ffbcbd0f53031a1de069382","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image3.jpeg","hash":"c423bddb8ae7027c3adbef1e714631574e177f33","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image4.jpeg","hash":"1206bd6da118d1277242672308030581e32b4b70","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image6.jpeg","hash":"9f9368ff979ce95c5c03419d3be213614f1dd93f","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image7.GIF","hash":"9f073255bc1afe9a72b31f85adfbd3d5db6e8987","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image4.jpeg","hash":"a6f5c428d37bcefd68f3ae34426324ad64595d39","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image5.jpeg","hash":"e5b452725b75ab72f3a989774f6f9ec9a74056b1","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image8.GIF","hash":"5ac964739909a27454bea75b378769fef9141c64","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media06/media/image9.GIF","hash":"930f1b3aaa9978f88b75e63168c2db6e93c0a0a4","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/empty-interface-etc-structure.jpg","hash":"aacb788b33b2c1ad819c67bab951629a396712bf","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/ifc-struct.jpg","hash":"69adaa6408a74e5f0deb04164b8b9675e4c7585a","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/ifc-struct-aft-assign.jpg","hash":"b6a4da551343668ac94427c0754c70143718ed2a","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image1.jpeg","hash":"0444e7d640b0c44800e535aa8ef87808e2eec728","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image10.GIF","hash":"ac01fca3ce7f32b180b5a1a4bbdb2c17d65abed3","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/empty-interface-etc-structure-aft-assign.jpg","hash":"b880c3a83b2751358722c8dd16834b0106ad25a2","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image11.GIF","hash":"76dac196d85f1641dc511f7ec6863e2b6b22b4f3","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image12.GIF","hash":"bd306a1396a591276c36293c6f015ffa42cbb9a1","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image13.GIF","hash":"ac9286f04021e72361521311718553cce5388cdb","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image15.GIF","hash":"c3b42d9c79753e4dc4d65110d31411a35fef9559","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image16.GIF","hash":"20213cc88eccd2f968ec742a9c3d2a79f933c429","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image14.GIF","hash":"db729c0082a960faafcb2ca384b16e2f5a683f2e","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image17.GIF","hash":"b6385a35d6de816b17f18d8c939c5989a5769306","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image18.GIF","hash":"a8b8dfc8ebd2577277f50968f8ad9449bf531e66","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image2.jpeg","hash":"85c093d5913d89c4a095fe26f7a0f3a1fe77ee37","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image3.jpeg","hash":"3e6c896ce79e370bf43fea57c85eefaef8bd4f5e","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image9.GIF","hash":"ddf3cba031964a953b7cdd5a0097e3f384663034","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/itabTable-struct.jpg","hash":"be3b0a1972be24f27bf18d172e37fdbb640dc1cb","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image4.jpeg","hash":"b6b16124620a7ed523c81ec35365ef9d5e1cf216","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image10.GIF","hash":"939ef20c6694f985e631c8a7cc61210d7698f281","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image1.jpeg","hash":"579ce51b317af3f4d4629386686b88edc4108a39","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image2.GIF","hash":"3d7da30c7622afcb37dd96334e80db6b334abec4","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image3.jpeg","hash":"138def0cddd2c40740eb0e7c9325eb74163dec3e","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image4.GIF","hash":"a3d947ae35949e316bde17bf4d02161cb43e4a96","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image5.jpeg","hash":"cf038e4cf53c5b14f69ebb6c16d5472da1002d17","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image6.jpeg","hash":"d50719704072224c21ab15006cf8c6174be14fdf","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image7.jpeg","hash":"09f9aecc0671b95f5180e8b013f77128ee895ce8","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image9.GIF","hash":"9802ba8257a61a250ff02d7427fe1817061de2f8","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media09/media/image8.GIF","hash":"64dce4dcb9427a666ac94858f5a6c6e31e6f71c4","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image11.GIF","hash":"987f66976e0cac846ef3d60185ead8aca94958b4","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image12.GIF","hash":"28d371a87bc1e1687f2fea92545ce97ff6791c94","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image13.GIF","hash":"b8e0ae75aa61c25bd81781efaff2afeebcae17be","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image14.GIF","hash":"fe566cc0cbd3758db88e1cfa0cba8ac71dfb9b4e","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image15.GIF","hash":"eb57426e6542a6e083a40f43a34c9155165e8a57","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image16.GIF","hash":"17775215de8e9dcf72de076edc683a3af295c66b","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image17.GIF","hash":"9441cbdae2d0ffa3b2818ee2ad52abdfbcaee1ae","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image18.GIF","hash":"cf851d2c8c87eff04ef77fa39a6f93b13aaf6608","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image19.GIF","hash":"8f81b5e0af4e5f631ece30ab4b855ac4a677248e","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image2.GIF","hash":"ecfa5bedb9665ef223ed4e37925b359edfdf21f7","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image3.GIF","hash":"a47acc64bc2cfd7d068b0a195ebf60870421cfb0","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image5.GIF","hash":"80bb8aa0699e4d459ec8bcb8a161dc3e098b751c","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image6.GIF","hash":"ac2f05672ff23cacbe3090d5b600400b270a19f8","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image8.png","hash":"7349da0f8d9e023128fdf5bb60127a32a5936d92","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image9.GIF","hash":"2fa8bdd61e8db75426999b5f373a3a511ad4cd81","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media12/media/image1.png","hash":"7d05c5880d5827a61b4659b88cc4702764847ad1","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media12/media/image2.jpeg","hash":"6f0360799f06b68f092701249e6e72045dfeff67","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media12/media/image3.jpeg","hash":"ec83bb07b0fb0506c73b8312ec58c89ac7269ccc","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image1.png","hash":"691ad1deb198203127227cd8cb144a26e9b1a219","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image11.png","hash":"5a99f9d2283c43564ad7c77265249587594cd8a2","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image13.png","hash":"88f50bc53aab8e8f368c8f67ec55bc14de7e3db4","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image12.png","hash":"394315a60e7dac421753fb9b16be0f22491f9d2c","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image14.png","hash":"929831b6afec5d255da2a17ec44c0803a52ff578","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image10.png","hash":"c52a0d18839ce63b60ecbebb0d4d5715601fb0ad","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image17.png","hash":"918a989fff8253fc4c75dbfc3fe0ae6e83321922","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image15.png","hash":"017f88ef62bd5239067b42fa6e6eee16ab8984e5","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image18.png","hash":"3ede39325ec090c4dbf9fd9f814f0555c7eb3a7f","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image16.png","hash":"fb9b0c147aa210731531184ffa2751a6136a7212","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image19.png","hash":"dc36260fcf23693c8ad7828dc8f1bfb2af6ba90a","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image2.png","hash":"14cc9ba165716a1dcca39094a0821757ccad7bd3","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image20.png","hash":"a034b0811050582ec1672c4330d0a648b88c4440","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image21.png","hash":"8ca3c7ffbe17e6d8a8f2b51b6ae207fc9cb5dbc5","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image22.png","hash":"cf1e9cfa397985a7a1365ff7301f011290e39087","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image23.png","hash":"342c963a4e010ff3a33dcdb9fa6c3aac4e290e3a","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image24.png","hash":"c5914a18976bb00d238126e0032ff45020abbcbe","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image25.png","hash":"ef8d23e2bdd4009f78b7b26f2a7570ac31030ed3","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image26.png","hash":"7e6a987a3b8394eab71ed3d1bde8b48c29b6db3f","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image27.png","hash":"ddb28459644ce1f148e45df916c49874fd9950e1","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image28.png","hash":"4aebd50ea4b169c587199fb885efacd2fcd4ee50","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image29.png","hash":"90f81500a21a2ff96412d414621fff1090daa829","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image3.png","hash":"f408fd467fc83989fa947d9df7297b8aa26cbceb","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image31.png","hash":"9d34ad4f08458f1380947f7f749750beb9c72f52","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image5.png","hash":"c954297328c1d99365f9aee34dc5503cbc149f9a","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image4.png","hash":"83458b8952e099527c5024668e5424613aea1b84","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image6.png","hash":"d24e329b2edfc0633965ce75254fdb0d1dded380","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image30.png","hash":"8243437652c9eb5b5d8bc71e1935d26ce7990476","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image8.png","hash":"00ad0a19126784db29eda294ffbabb12f62e9615","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image9.png","hash":"42b2eda4013ff9990a1f9ec2a9a6bfed12aac48d","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image1.jpeg","hash":"b2a734255df9d93cd94a9ce38c1eeb53345e60f9","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image10.png","hash":"d9a86b7d3b98f464a91d19a157bf32db97d3be66","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image11.png","hash":"bfba99bab9b0a17a2ae828198c0dd83404cd23d1","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image15.png","hash":"0c96a0ef7b3c242edc40d6da75b635441c5992b6","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image16.png","hash":"d15f85e10267c08b25650fe72a5a8953910e086c","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image14.png","hash":"c38df985c7497548f21e03893f5a0c0816efe592","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image12.png","hash":"c726f9a128cd1df636f29bd2168814c0b15643a4","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image13.png","hash":"62281a9f183ffc99dea7bdf6b3baf5904bd5c82e","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image2.jpeg","hash":"5f232ec2566fb83aa5ad4fb3e2a27e3e20df4387","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image3.png","hash":"540862923429344f38b46fa57b2176b07cb2ae59","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image4.png","hash":"31fa616270026308740f72cd6289c6c5f1681957","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image5.png","hash":"1747ff9f3dcbba57dd220403bdbc96b8e5973b6d","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image6.png","hash":"fcf4f47d7a4773281aefb0580aae82aec14c5e69","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image7.png","hash":"7a30fb7a955fb45d4ca3ccebbf2098ba8ea46f26","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image8.png","hash":"fa9385512e98c9f60805250bf11d759a3ddb02c5","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media13/media/image7.png","hash":"0c97e7cd8d0ac21ff7c5fd39308d70b7d4426ee0","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image9.png","hash":"989a6aee3e32a37c458defe9216c0e7ac214079c","modified":1760167422220},{"_id":"public/css/index.css","hash":"c2158e22df85c688e7c04275c527da89bc145c15","modified":1760167422220},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1760167422220},{"_id":"public/js/main.js","hash":"fb746a3e67d0373deea8481110dd436fea4ca38c","modified":1760167422220},{"_id":"public/js/utils.js","hash":"ce898acc9081131cdc3a97baf43cb7b1a25da47f","modified":1760167422220},{"_id":"public/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1760167422220},{"_id":"public/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1760167422220},{"_id":"public/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media02/media/image1.png","hash":"9c7ae8163ebdd100f7b5c385830315e887cf24bb","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media03/media/image2.png","hash":"c195bfff0301dbf444eabd03e04c126cc8bdf389","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/weixin-guanggu-coder-logo.png","hash":"2806e5334ba366c2bf211685645d635e46bf69ed","modified":1760167422220},{"_id":"public/img/docs/md-go/go-admin/images/api-server-Service-Layer.png","hash":"9257b6c76e397210765d374dbd571def71edd4d4","modified":1760167422220},{"_id":"public/img/docs/md-go/go-admin/images/settings.yml-loading-sequence.png","hash":"e6b8602a7bfc467135297ad50c2d931d3a502d52","modified":1760167422220},{"_id":"public/img/docs/md-go/go-admin/images/go-admin-team.png","hash":"0757d8af2e72dbb5624f080841258b5b9716a576","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media/8-1-4-package-init.png","hash":"72e0909c334061d94edaf7c59b34bc8b38e29b03","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image5.GIF","hash":"cdef3440ed63c1757461a9187f9aa5149f96e596","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image6.GIF","hash":"6eb6aeb86955c178362a097691bec2745affa3e0","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image8.GIF","hash":"8bbf789c8ec8edf275e705b3e13aa822e58fe1f5","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media07/media/image7.GIF","hash":"d4963723db02311d0450ddeade0139f5fc7fe7b3","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image1.GIF","hash":"20050c952328ef817967080e20e7f36c398e0e95","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image4.jpeg","hash":"32de6275d229be865f4f2a8f5619521b437156a7","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image7.png","hash":"0125ab3feced39968b5461e839685a8653debbb7","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media15/media/image17.png","hash":"9241e85f8dc38e438e3158cd753f242f2cfa2a3a","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media05/media/image2.GIF","hash":"538ebf146e687da755310f8618ccabcf212f5f75","modified":1760167422220},{"_id":"public/img/index.jpg","hash":"84a86ba35bccf1f22518ffeacac9bd530ac59372","modified":1760167422220},{"_id":"public/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_08-09.png","hash":"af1c8a630f3aec5337d8b9002f59758e0d3c56ff","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/docker-jenkins-git--golang-prj-cicd_files/b935506d68b44320878e934a58824520.png","hash":"dbfd5407357d8b7067ced807c58d154871fa1ecb","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media09a/chan-event.png","hash":"7c8627c8c8c811d28426b397770780780997559b","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media09a/chan-send-task-2routine-pool.png","hash":"dc6dabf5cbf989406af6ab8710e6b803bdbdf2e2","modified":1760167422220},{"_id":"public/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1760167422220},{"_id":"public/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_03.png","hash":"8116828af20edbefafb69a512fbb3092b4dd8cca","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/kubectl-apply-1.png","hash":"ba1d669ae689f4b371a0fc4fe340524df6222729","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/kubectl-apply.png","hash":"8755e42b39f9026b501d14a9e9fab7a49c17009c","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media08/media/image10.GIF","hash":"44d8f9046ebcbdea65b24195c22b7949e986ca74","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media03a/deep-copy--shallow-copy.png","hash":"f9f49911e9088653bd614d26f90f9f81bf1dffda","modified":1760167422220},{"_id":"public/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_06.png","hash":"97d8a2c72d86f44b9241bf9f638db25dd3240ce7","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/kubectl-get-services.png","hash":"ef5670c8d89260d5f29e137d9de8cc43a07a42fa","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/minik-example-3-service.png","hash":"80098e62c58114a204557fe7cc19795d4ffc1b47","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/minik-example-3-service2.png","hash":"82220b366cabe183a0bc0311546607cc156087b3","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/minik-example-3-service3.png","hash":"b6d09b27c93a6ab3bc6436f357f81d940ab07c31","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media09a/chan-producer-consumer.png","hash":"13ac2c2628f410aab15fa1068d470abbc6af68af","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media09a/chan-control-max-concurrent-goroutine.png","hash":"f03999f4bc5d3a1c9da8bd40bb195239883dc1f4","modified":1760167422220},{"_id":"public/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_04.png","hash":"99b32d22cf1abbfa1c4eb38f15b78b3813c71a2b","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/kubectl-0.png","hash":"5be0d50b5499b07e41ff9fc86d15cdac0e0d9b5d","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/minik-example.png","hash":"c11221b4fe97511ee2f42ce2225db1944bfb8583","modified":1760167422220},{"_id":"public/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_05.png","hash":"b64994d3e0e2c6c06c318f602a28f3e1fba0041c","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/vscode-deployment-yaml-create.png","hash":"c4c7b4d5c35787559da923115e3cef2a20139656","modified":1760167422220},{"_id":"public/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_01.png","hash":"29158b8c5dcaaa324bb8a2870355d3508f0e2448","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/k8s-control-plane-monitor-netstat.png","hash":"73a3ce3eb1400e14997cecbb4749648bbc9d34ff","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/kubectl-apply-1update.png","hash":"1f03bd1101ab796163ad7126b5e571102fdfe5bb","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/service-NodePort.png","hash":"5a1ec823e2eb15e34a4a321cee303832e0c9bb61","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/k8s-node-pod.png","hash":"ca2d4da33fb7327283752c631a426193ba829b5e","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/minik-example-3-service1.png","hash":"f013b5250581cd6f06078d875950c6301ed4492d","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/vscode-kubernets-2.png","hash":"6f7520bfe3bde50f05e9ce88391157add012b283","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media05a/chan-underlying-struct.png","hash":"5b4321973dcae7af3638c5c0584a0b840b4534c9","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/kubectl-get-pods.png","hash":"2d8d4eed66247591da4f06b9f467276fb7298070","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/minik-fw.png","hash":"3730ae52cc2a28c0bb9ee082a7a930fdefffd143","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/minik-example-1.png","hash":"c21f3e85d31740ef6d3bee7b70094c6bf800537e","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/vscode-kubernets-1.png","hash":"277e4ed18bac551c71edb22c01b81c91b61eae3d","modified":1760167422220},{"_id":"public/img/docs/md-go/goLang-rumen-tutoria-md/media03a/array-slice.png","hash":"c886003b9011988c7cdba2f097c72218bf8ab49d","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/k8s-control-plane-use-backup-pod1.png","hash":"53132ed059a741a0b5afd7a20179f41bb5a25209","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/k8s-control-plane-use-backup-pod.png","hash":"f2c317c65eeeffae046f449933427718c39b6170","modified":1760167422220},{"_id":"public/img/docs/md-go/advanced-go-programming-book-master/cover.png","hash":"bb52a148331822c981a70059c42609533805b373","modified":1760167422220},{"_id":"public/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_02.png","hash":"033573628b8cde54eb55d0813a952bc48e5f0a90","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/kubectl-delete-1.png","hash":"64f7a77f7e5846fa153e750ca8577dfcd4d88cce","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/minikube-service-servicename.png","hash":"cd3b241ed72b35bf0d129285077e4ee5ab59e3d7","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/open-app-in-browe.png","hash":"5fa1aa6d8f5f9c441cf1c95d3157d6829efc2689","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/deployment-yaml-update.png","hash":"3e336c98592d3d86f0ed36f59c37c76be5c978f7","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/vscode-k8s-check-status.png","hash":"dc784322629e09be32bec00ccec011ec33f903cc","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/k8s-control-plane-api.png","hash":"47d0e94c0c2c7e414a56e6e4377c6b1446bbee61","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/k8s-control-plane.png","hash":"fade38236b8e57512b75cbc6c0749d9d53d5c4e2","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/kubectl-version.png","hash":"0997073170a4596997dc50fad9a50b0b7b9ee9d4","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/minik-download-install.png","hash":"bdc5b1689bc1994dd527b519750062025d74b324","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/minik-example-2-pod-communicate.png","hash":"e71eaf8cca5a838ce3701ee576cef85b54c5c08d","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/k8s-cluster1.png","hash":"1c60589655b16d961a66f3456a8e46f0ef0f0470","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/business-website.png","hash":"e9771ec6ed9e0276cf0fd181e9cc0b432b36d5de","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/k8s-pods.png","hash":"1414d7b8bb01fd7840d95c0e9d78fb0081bccb08","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/k8s-website.png","hash":"9d58b14ba070d160cee8d313da2592cc4cbf4181","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/open-app-in-browe1.png","hash":"cf4a4b36b9ff28a19b1e39fcbdb0d62d979974fb","modified":1760167422220},{"_id":"public/img/docs/md-go/doc-docker/k8s-minikube/vscode-kubernets-plugin.png","hash":"d30fdc4c1bd316a5ee2919d623a4d3c88fe01c1d","modified":1760167422220},{"_id":"source/_posts/Go方法接收者详解.md","hash":"2808aaae05e70a7724b057368879cc203ce18000","modified":1761184440958},{"_id":"public/posts/46191.html","hash":"b9146481008cca31b875d8c096b5c9c03b0db359","modified":1761184559055}],"Category":[{"name":"Go学习笔记","_id":"cmgly8kpx000388vo51ofa4hp"},{"name":"技术分享","_id":"cmgly8kq1000b88vo6ybceapl"},{"name":"生活","_id":"cmgly8kq2000e88voarand1yb"}],"Data":[],"Page":[{"title":"标签","date":"2025-09-25T09:53:19.000Z","type":"tags","_content":"是","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2025-09-25 17:53:19\ntype: tags\n---\n是","updated":"2025-10-11T02:12:10.337Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cmgly8kps000088vog6911sgk","content":"<p>是</p>\n","excerpt":"","more":"<p>是</p>\n"},{"title":"分类","date":"2025-09-25T10:03:41.000Z","type":"categories","_content":"","source":"categories/index-1.md","raw":"---\ntitle: 分类\ndate: 2025-09-25 18:03:41\ntype: categories\n---\n","updated":"2025-10-11T02:12:09.888Z","path":"categories/index-1.html","comments":1,"layout":"page","_id":"cmgly8kpw000288vo4ihpdyhp","content":"","excerpt":"","more":""},{"title":"分类","date":"2025-09-25T09:54:33.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2025-09-25 17:54:33\ntype: categories\n---\n","updated":"2025-10-11T02:12:09.888Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cmgly8kpy000588voemv83pjg","content":"","excerpt":"","more":""},{"title":"标签","date":"2025-09-25T10:03:37.000Z","type":"tags","_content":"","source":"tags/index-1.md","raw":"---\ntitle: 标签\ndate: 2025-09-25 18:03:37\ntype: tags\n---\n","updated":"2025-10-11T02:12:10.336Z","path":"tags/index-1.html","comments":1,"layout":"page","_id":"cmgly8kpy000688voa6ne37ke","content":"","excerpt":"","more":""}],"Post":[{"title":"Go 函数作为值和参数","keywords":["Go学习笔记"],"abbrlink":46190,"date":"2025-10-11T02:30:19.000Z","_content":"# Go 函数作为值和参数 - 代码分析\n\n## 概述\n\n本文档分析了一个展示Go语言中**函数作为值**和**函数作为参数**特性的示例代码。\n\n## 代码\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc compute(fn func(float64, float64) float64) float64 {\n\treturn fn(3, 4)\n}\n\nfunc main() {\n\thypot := func(x, y float64) float64 {\n\t\treturn math.Sqrt(x*x + y*y)\n\t}\n\tfmt.Println(hypot(5, 12))\n\n\tfmt.Println(compute(hypot))\n\tfmt.Println(compute(math.Pow))\n}\n```\n\n## 运行结果\n\n```\n13\n5\n81\n```\n\n## 详细分析\n\n### 1. `compute` 函数\n\n```go\nfunc compute(fn func(float64, float64) float64) float64 {\n\treturn fn(3, 4)\n}\n```\n\n**功能说明：**\n- 接受一个函数作为参数 `fn`\n- 函数类型：`func(float64, float64) float64`\n- 固定调用 `fn(3, 4)` 并返回结果\n\n**关键概念：**\n- 函数作为**第一类值**（first-class values）\n- 函数可以作为参数传递给其他函数\n\n### 2. 匿名函数 `hypot`\n\n```go\nhypot := func(x, y float64) float64 {\n\treturn math.Sqrt(x*x + y*y)\n}\n```\n\n**功能说明：**\n- 计算直角三角形的斜边长度（勾股定理）\n- 公式：√(x² + y²)\n- 这是一个**匿名函数**，赋值给变量 `hypot`\n\n### 3. 函数调用分析\n\n#### 调用 1：`hypot(5, 12)`\n```go\nfmt.Println(hypot(5, 12))\n```\n- **计算过程：** √(5² + 12²) = √(25 + 144) = √169 = **13**\n- **结果：** 13\n\n#### 调用 2：`compute(hypot)`\n```go\nfmt.Println(compute(hypot))\n```\n- **传递过程：** 将 `hypot` 函数作为参数传给 `compute`\n- **内部调用：** `compute` 内部执行 `hypot(3, 4)`\n- **计算过程：** √(3² + 4²) = √(9 + 16) = √25 = **5**\n- **结果：** 5\n\n#### 调用 3：`compute(math.Pow)`\n```go\nfmt.Println(compute(math.Pow))\n```\n- **传递过程：** 将 `math.Pow` 函数作为参数传给 `compute`\n- **内部调用：** `compute` 内部执行 `math.Pow(3, 4)`\n- **计算过程：** 3⁴ = **81**\n- **结果：** 81\n\n## 核心概念\n\n### 1. 函数作为值\n在Go中，函数可以像其他值一样被赋值给变量、作为参数传递、作为返回值等。\n\n### 2. 函数类型\n```go\nfunc(float64, float64) float64\n```\n这表示一个接受两个 `float64` 参数并返回 `float64` 的函数类型。\n\n### 3. 匿名函数\n```go\nfunc(x, y float64) float64 {\n    return math.Sqrt(x*x + y*y)\n}\n```\n没有函数名的函数，可以直接赋值给变量或作为参数传递。\n\n### 4. 高阶函数\n`compute` 函数接受其他函数作为参数，是一个**高阶函数**的例子。\n\n## 实际应用场景\n\n1. **回调函数**：在事件处理、异步编程中\n2. **函数式编程**：map、filter、reduce 等操作\n3. **中间件模式**：在Web框架中处理请求\n4. **策略模式**：根据不同的策略执行不同的算法\n\n## 总结\n\n这个示例展示了Go语言中函数作为第一类值的重要特性，为编写更灵活、可复用的代码提供了强大的工具。通过将函数作为参数传递，我们可以实现高度解耦和可扩展的程序设计。\n","source":"_posts/Go 函数作为值和参数.md","raw":"---\ntitle: Go 函数作为值和参数\ntags:\n  - Go\ncategories:\n  - Go学习笔记\nkeywords:\n  - Go学习笔记\nabbrlink: 46190\ndate: 2025-10-11 10:30:19\n---\n# Go 函数作为值和参数 - 代码分析\n\n## 概述\n\n本文档分析了一个展示Go语言中**函数作为值**和**函数作为参数**特性的示例代码。\n\n## 代码\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"math\"\n)\n\nfunc compute(fn func(float64, float64) float64) float64 {\n\treturn fn(3, 4)\n}\n\nfunc main() {\n\thypot := func(x, y float64) float64 {\n\t\treturn math.Sqrt(x*x + y*y)\n\t}\n\tfmt.Println(hypot(5, 12))\n\n\tfmt.Println(compute(hypot))\n\tfmt.Println(compute(math.Pow))\n}\n```\n\n## 运行结果\n\n```\n13\n5\n81\n```\n\n## 详细分析\n\n### 1. `compute` 函数\n\n```go\nfunc compute(fn func(float64, float64) float64) float64 {\n\treturn fn(3, 4)\n}\n```\n\n**功能说明：**\n- 接受一个函数作为参数 `fn`\n- 函数类型：`func(float64, float64) float64`\n- 固定调用 `fn(3, 4)` 并返回结果\n\n**关键概念：**\n- 函数作为**第一类值**（first-class values）\n- 函数可以作为参数传递给其他函数\n\n### 2. 匿名函数 `hypot`\n\n```go\nhypot := func(x, y float64) float64 {\n\treturn math.Sqrt(x*x + y*y)\n}\n```\n\n**功能说明：**\n- 计算直角三角形的斜边长度（勾股定理）\n- 公式：√(x² + y²)\n- 这是一个**匿名函数**，赋值给变量 `hypot`\n\n### 3. 函数调用分析\n\n#### 调用 1：`hypot(5, 12)`\n```go\nfmt.Println(hypot(5, 12))\n```\n- **计算过程：** √(5² + 12²) = √(25 + 144) = √169 = **13**\n- **结果：** 13\n\n#### 调用 2：`compute(hypot)`\n```go\nfmt.Println(compute(hypot))\n```\n- **传递过程：** 将 `hypot` 函数作为参数传给 `compute`\n- **内部调用：** `compute` 内部执行 `hypot(3, 4)`\n- **计算过程：** √(3² + 4²) = √(9 + 16) = √25 = **5**\n- **结果：** 5\n\n#### 调用 3：`compute(math.Pow)`\n```go\nfmt.Println(compute(math.Pow))\n```\n- **传递过程：** 将 `math.Pow` 函数作为参数传给 `compute`\n- **内部调用：** `compute` 内部执行 `math.Pow(3, 4)`\n- **计算过程：** 3⁴ = **81**\n- **结果：** 81\n\n## 核心概念\n\n### 1. 函数作为值\n在Go中，函数可以像其他值一样被赋值给变量、作为参数传递、作为返回值等。\n\n### 2. 函数类型\n```go\nfunc(float64, float64) float64\n```\n这表示一个接受两个 `float64` 参数并返回 `float64` 的函数类型。\n\n### 3. 匿名函数\n```go\nfunc(x, y float64) float64 {\n    return math.Sqrt(x*x + y*y)\n}\n```\n没有函数名的函数，可以直接赋值给变量或作为参数传递。\n\n### 4. 高阶函数\n`compute` 函数接受其他函数作为参数，是一个**高阶函数**的例子。\n\n## 实际应用场景\n\n1. **回调函数**：在事件处理、异步编程中\n2. **函数式编程**：map、filter、reduce 等操作\n3. **中间件模式**：在Web框架中处理请求\n4. **策略模式**：根据不同的策略执行不同的算法\n\n## 总结\n\n这个示例展示了Go语言中函数作为第一类值的重要特性，为编写更灵活、可复用的代码提供了强大的工具。通过将函数作为参数传递，我们可以实现高度解耦和可扩展的程序设计。\n","slug":"Go 函数作为值和参数","published":1,"updated":"2025-10-11T06:48:54.805Z","comments":1,"layout":"post","photos":[],"_id":"cmgly8kpu000188vobv8i6wl7","content":"<h1 id=\"Go-函数作为值和参数-代码分析\"><a href=\"#Go-函数作为值和参数-代码分析\" class=\"headerlink\" title=\"Go 函数作为值和参数 - 代码分析\"></a>Go 函数作为值和参数 - 代码分析</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>本文档分析了一个展示Go语言中<strong>函数作为值</strong>和<strong>函数作为参数</strong>特性的示例代码。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">compute</span><span class=\"params\">(fn <span class=\"keyword\">func</span>(<span class=\"type\">float64</span>, <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span>) <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fn(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thypot := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x, y <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> math.Sqrt(x*x + y*y)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(hypot(<span class=\"number\">5</span>, <span class=\"number\">12</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(compute(hypot))</span><br><span class=\"line\">\tfmt.Println(compute(math.Pow))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">13</span><br><span class=\"line\">5</span><br><span class=\"line\">81</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"详细分析\"><a href=\"#详细分析\" class=\"headerlink\" title=\"详细分析\"></a>详细分析</h2><h3 id=\"1-compute-函数\"><a href=\"#1-compute-函数\" class=\"headerlink\" title=\"1. compute 函数\"></a>1. <code>compute</code> 函数</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">compute</span><span class=\"params\">(fn <span class=\"keyword\">func</span>(<span class=\"type\">float64</span>, <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span>) <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fn(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>功能说明：</strong></p>\n<ul>\n<li>接受一个函数作为参数 <code>fn</code></li>\n<li>函数类型：<code>func(float64, float64) float64</code></li>\n<li>固定调用 <code>fn(3, 4)</code> 并返回结果</li>\n</ul>\n<p><strong>关键概念：</strong></p>\n<ul>\n<li>函数作为<strong>第一类值</strong>（first-class values）</li>\n<li>函数可以作为参数传递给其他函数</li>\n</ul>\n<h3 id=\"2-匿名函数-hypot\"><a href=\"#2-匿名函数-hypot\" class=\"headerlink\" title=\"2. 匿名函数 hypot\"></a>2. 匿名函数 <code>hypot</code></h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hypot := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x, y <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(x*x + y*y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>功能说明：</strong></p>\n<ul>\n<li>计算直角三角形的斜边长度（勾股定理）</li>\n<li>公式：√(x² + y²)</li>\n<li>这是一个<strong>匿名函数</strong>，赋值给变量 <code>hypot</code></li>\n</ul>\n<h3 id=\"3-函数调用分析\"><a href=\"#3-函数调用分析\" class=\"headerlink\" title=\"3. 函数调用分析\"></a>3. 函数调用分析</h3><h4 id=\"调用-1：hypot-5-12\"><a href=\"#调用-1：hypot-5-12\" class=\"headerlink\" title=\"调用 1：hypot(5, 12)\"></a>调用 1：<code>hypot(5, 12)</code></h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fmt.Println(hypot(<span class=\"number\">5</span>, <span class=\"number\">12</span>))</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>计算过程：</strong> √(5² + 12²) &#x3D; √(25 + 144) &#x3D; √169 &#x3D; <strong>13</strong></li>\n<li><strong>结果：</strong> 13</li>\n</ul>\n<h4 id=\"调用-2：compute-hypot\"><a href=\"#调用-2：compute-hypot\" class=\"headerlink\" title=\"调用 2：compute(hypot)\"></a>调用 2：<code>compute(hypot)</code></h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fmt.Println(compute(hypot))</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>传递过程：</strong> 将 <code>hypot</code> 函数作为参数传给 <code>compute</code></li>\n<li><strong>内部调用：</strong> <code>compute</code> 内部执行 <code>hypot(3, 4)</code></li>\n<li><strong>计算过程：</strong> √(3² + 4²) &#x3D; √(9 + 16) &#x3D; √25 &#x3D; <strong>5</strong></li>\n<li><strong>结果：</strong> 5</li>\n</ul>\n<h4 id=\"调用-3：compute-math-Pow\"><a href=\"#调用-3：compute-math-Pow\" class=\"headerlink\" title=\"调用 3：compute(math.Pow)\"></a>调用 3：<code>compute(math.Pow)</code></h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fmt.Println(compute(math.Pow))</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>传递过程：</strong> 将 <code>math.Pow</code> 函数作为参数传给 <code>compute</code></li>\n<li><strong>内部调用：</strong> <code>compute</code> 内部执行 <code>math.Pow(3, 4)</code></li>\n<li><strong>计算过程：</strong> 3⁴ &#x3D; <strong>81</strong></li>\n<li><strong>结果：</strong> 81</li>\n</ul>\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><h3 id=\"1-函数作为值\"><a href=\"#1-函数作为值\" class=\"headerlink\" title=\"1. 函数作为值\"></a>1. 函数作为值</h3><p>在Go中，函数可以像其他值一样被赋值给变量、作为参数传递、作为返回值等。</p>\n<h3 id=\"2-函数类型\"><a href=\"#2-函数类型\" class=\"headerlink\" title=\"2. 函数类型\"></a>2. 函数类型</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"type\">float64</span>, <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span></span><br></pre></td></tr></table></figure>\n<p>这表示一个接受两个 <code>float64</code> 参数并返回 <code>float64</code> 的函数类型。</p>\n<h3 id=\"3-匿名函数\"><a href=\"#3-匿名函数\" class=\"headerlink\" title=\"3. 匿名函数\"></a>3. 匿名函数</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x, y <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.Sqrt(x*x + y*y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>没有函数名的函数，可以直接赋值给变量或作为参数传递。</p>\n<h3 id=\"4-高阶函数\"><a href=\"#4-高阶函数\" class=\"headerlink\" title=\"4. 高阶函数\"></a>4. 高阶函数</h3><p><code>compute</code> 函数接受其他函数作为参数，是一个<strong>高阶函数</strong>的例子。</p>\n<h2 id=\"实际应用场景\"><a href=\"#实际应用场景\" class=\"headerlink\" title=\"实际应用场景\"></a>实际应用场景</h2><ol>\n<li><strong>回调函数</strong>：在事件处理、异步编程中</li>\n<li><strong>函数式编程</strong>：map、filter、reduce 等操作</li>\n<li><strong>中间件模式</strong>：在Web框架中处理请求</li>\n<li><strong>策略模式</strong>：根据不同的策略执行不同的算法</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这个示例展示了Go语言中函数作为第一类值的重要特性，为编写更灵活、可复用的代码提供了强大的工具。通过将函数作为参数传递，我们可以实现高度解耦和可扩展的程序设计。</p>\n","excerpt":"","more":"<h1 id=\"Go-函数作为值和参数-代码分析\"><a href=\"#Go-函数作为值和参数-代码分析\" class=\"headerlink\" title=\"Go 函数作为值和参数 - 代码分析\"></a>Go 函数作为值和参数 - 代码分析</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>本文档分析了一个展示Go语言中<strong>函数作为值</strong>和<strong>函数作为参数</strong>特性的示例代码。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">compute</span><span class=\"params\">(fn <span class=\"keyword\">func</span>(<span class=\"type\">float64</span>, <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span>) <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fn(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thypot := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x, y <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> math.Sqrt(x*x + y*y)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(hypot(<span class=\"number\">5</span>, <span class=\"number\">12</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(compute(hypot))</span><br><span class=\"line\">\tfmt.Println(compute(math.Pow))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">13</span><br><span class=\"line\">5</span><br><span class=\"line\">81</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"详细分析\"><a href=\"#详细分析\" class=\"headerlink\" title=\"详细分析\"></a>详细分析</h2><h3 id=\"1-compute-函数\"><a href=\"#1-compute-函数\" class=\"headerlink\" title=\"1. compute 函数\"></a>1. <code>compute</code> 函数</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">compute</span><span class=\"params\">(fn <span class=\"keyword\">func</span>(<span class=\"type\">float64</span>, <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span>) <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fn(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>功能说明：</strong></p>\n<ul>\n<li>接受一个函数作为参数 <code>fn</code></li>\n<li>函数类型：<code>func(float64, float64) float64</code></li>\n<li>固定调用 <code>fn(3, 4)</code> 并返回结果</li>\n</ul>\n<p><strong>关键概念：</strong></p>\n<ul>\n<li>函数作为<strong>第一类值</strong>（first-class values）</li>\n<li>函数可以作为参数传递给其他函数</li>\n</ul>\n<h3 id=\"2-匿名函数-hypot\"><a href=\"#2-匿名函数-hypot\" class=\"headerlink\" title=\"2. 匿名函数 hypot\"></a>2. 匿名函数 <code>hypot</code></h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hypot := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x, y <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(x*x + y*y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>功能说明：</strong></p>\n<ul>\n<li>计算直角三角形的斜边长度（勾股定理）</li>\n<li>公式：√(x² + y²)</li>\n<li>这是一个<strong>匿名函数</strong>，赋值给变量 <code>hypot</code></li>\n</ul>\n<h3 id=\"3-函数调用分析\"><a href=\"#3-函数调用分析\" class=\"headerlink\" title=\"3. 函数调用分析\"></a>3. 函数调用分析</h3><h4 id=\"调用-1：hypot-5-12\"><a href=\"#调用-1：hypot-5-12\" class=\"headerlink\" title=\"调用 1：hypot(5, 12)\"></a>调用 1：<code>hypot(5, 12)</code></h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fmt.Println(hypot(<span class=\"number\">5</span>, <span class=\"number\">12</span>))</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>计算过程：</strong> √(5² + 12²) &#x3D; √(25 + 144) &#x3D; √169 &#x3D; <strong>13</strong></li>\n<li><strong>结果：</strong> 13</li>\n</ul>\n<h4 id=\"调用-2：compute-hypot\"><a href=\"#调用-2：compute-hypot\" class=\"headerlink\" title=\"调用 2：compute(hypot)\"></a>调用 2：<code>compute(hypot)</code></h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fmt.Println(compute(hypot))</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>传递过程：</strong> 将 <code>hypot</code> 函数作为参数传给 <code>compute</code></li>\n<li><strong>内部调用：</strong> <code>compute</code> 内部执行 <code>hypot(3, 4)</code></li>\n<li><strong>计算过程：</strong> √(3² + 4²) &#x3D; √(9 + 16) &#x3D; √25 &#x3D; <strong>5</strong></li>\n<li><strong>结果：</strong> 5</li>\n</ul>\n<h4 id=\"调用-3：compute-math-Pow\"><a href=\"#调用-3：compute-math-Pow\" class=\"headerlink\" title=\"调用 3：compute(math.Pow)\"></a>调用 3：<code>compute(math.Pow)</code></h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fmt.Println(compute(math.Pow))</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>传递过程：</strong> 将 <code>math.Pow</code> 函数作为参数传给 <code>compute</code></li>\n<li><strong>内部调用：</strong> <code>compute</code> 内部执行 <code>math.Pow(3, 4)</code></li>\n<li><strong>计算过程：</strong> 3⁴ &#x3D; <strong>81</strong></li>\n<li><strong>结果：</strong> 81</li>\n</ul>\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><h3 id=\"1-函数作为值\"><a href=\"#1-函数作为值\" class=\"headerlink\" title=\"1. 函数作为值\"></a>1. 函数作为值</h3><p>在Go中，函数可以像其他值一样被赋值给变量、作为参数传递、作为返回值等。</p>\n<h3 id=\"2-函数类型\"><a href=\"#2-函数类型\" class=\"headerlink\" title=\"2. 函数类型\"></a>2. 函数类型</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"type\">float64</span>, <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span></span><br></pre></td></tr></table></figure>\n<p>这表示一个接受两个 <code>float64</code> 参数并返回 <code>float64</code> 的函数类型。</p>\n<h3 id=\"3-匿名函数\"><a href=\"#3-匿名函数\" class=\"headerlink\" title=\"3. 匿名函数\"></a>3. 匿名函数</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x, y <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.Sqrt(x*x + y*y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>没有函数名的函数，可以直接赋值给变量或作为参数传递。</p>\n<h3 id=\"4-高阶函数\"><a href=\"#4-高阶函数\" class=\"headerlink\" title=\"4. 高阶函数\"></a>4. 高阶函数</h3><p><code>compute</code> 函数接受其他函数作为参数，是一个<strong>高阶函数</strong>的例子。</p>\n<h2 id=\"实际应用场景\"><a href=\"#实际应用场景\" class=\"headerlink\" title=\"实际应用场景\"></a>实际应用场景</h2><ol>\n<li><strong>回调函数</strong>：在事件处理、异步编程中</li>\n<li><strong>函数式编程</strong>：map、filter、reduce 等操作</li>\n<li><strong>中间件模式</strong>：在Web框架中处理请求</li>\n<li><strong>策略模式</strong>：根据不同的策略执行不同的算法</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这个示例展示了Go语言中函数作为第一类值的重要特性，为编写更灵活、可复用的代码提供了强大的工具。通过将函数作为参数传递，我们可以实现高度解耦和可扩展的程序设计。</p>\n"},{"title":"CodePen - 前端开发者的在线代码编辑器","keywords":["CodePen","前端开发","在线代码编辑器","代码分享","前端工具"],"description":"详细介绍 CodePen 这个优秀的前端在线代码编辑器，包括其功能特点、使用技巧和实际应用场景。","comments":1,"toc":true,"toc_number":true,"toc_style_simple":false,"copyright":true,"copyright_author":"ZhouBufan","copyright_author_href":"https://zhoubufan.github.io","copyright_url":"https://zhoubufan.github.io/2025/01/05/CodePen-前端开发者的在线代码编辑器/","copyright_info":"本文采用 CC BY-NC-SA 4.0 协议，转载请注明出处。","mathjax":false,"katex":false,"aplayer":false,"highlight_shrink":false,"aside":true,"abcjs":false,"noticeOutdate":true,"abbrlink":28377,"date":"2025-09-10T03:00:00.000Z","updated":"2025-09-10T03:00:00.000Z","_content":"\n# CodePen - 前端开发者的在线代码编辑器\n\n## 什么是 CodePen？\n\n[CodePen](https://codepen.io/) 是一个功能强大的在线代码编辑器，专门为前端开发者设计。它允许你在浏览器中直接编写、测试和分享 HTML、CSS 和 JavaScript 代码，无需安装任何软件或配置开发环境。\n\n## 主要功能特点\n\n### 🚀 实时预览\n- **即时渲染**：代码修改后立即看到效果\n- **多设备预览**：支持桌面、平板、手机等不同屏幕尺寸\n- **全屏模式**：专注代码编写，无干扰\n\n### 💻 强大的编辑器\n- **语法高亮**：支持多种编程语言的语法高亮\n- **自动补全**：智能代码提示和自动补全\n- **代码折叠**：提高代码可读性\n- **多光标编辑**：提高编码效率\n\n### 🎨 丰富的预处理器支持\n- **CSS 预处理器**：Sass、SCSS、Less、Stylus\n- **JavaScript 预处理器**：Babel、TypeScript、CoffeeScript\n- **HTML 预处理器**：Pug、Haml、Markdown\n\n### 📦 外部资源管理\n- **CDN 集成**：快速添加外部库和框架\n- **版本控制**：支持不同版本的库\n- **自定义资源**：上传自己的文件\n\n## 使用场景\n\n### 1. 快速原型开发\n```html\n<!-- 快速创建交互式原型 -->\n<div class=\"prototype-container\">\n  <button id=\"demo-btn\">点击我</button>\n  <div id=\"result\"></div>\n</div>\n```\n\n```css\n/* 样式设计 */\n.prototype-container {\n  text-align: center;\n  padding: 50px;\n}\n\n#demo-btn {\n  background: #007bff;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n```\n\n```javascript\n// 交互逻辑\ndocument.getElementById('demo-btn').addEventListener('click', function() {\n  document.getElementById('result').innerHTML = 'Hello CodePen!';\n});\n```\n\n### 2. 学习新技术\n- **框架学习**：React、Vue、Angular 等\n- **CSS 技巧**：动画、布局、响应式设计\n- **JavaScript 特性**：ES6+、API 使用等\n\n### 3. 代码分享与协作\n- **技术交流**：与同事分享代码片段\n- **教学演示**：在线教学和演示\n- **作品展示**：展示个人项目\n\n### 4. 面试准备\n- **算法练习**：可视化算法过程\n- **技术测试**：在线编程测试\n- **作品集**：展示编程能力\n\n## 实用技巧\n\n### 1. 使用外部库\n在 CodePen 中，你可以通过以下方式添加外部库：\n\n```html\n<!-- 在 HTML 中添加 CDN 链接 -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n```\n\n或者在设置中添加：\n- **React**：`https://unpkg.com/react@17/umd/react.development.js`\n- **Vue**：`https://unpkg.com/vue@3/dist/vue.global.js`\n- **Bootstrap**：`https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/css/bootstrap.min.css`\n\n### 2. 使用预处理器\n```scss\n// SCSS 示例\n$primary-color: #007bff;\n$border-radius: 5px;\n\n.button {\n  background-color: $primary-color;\n  border-radius: $border-radius;\n  \n  &:hover {\n    background-color: darken($primary-color, 10%);\n  }\n}\n```\n\n### 3. 代码组织\n```javascript\n// 使用模块化组织代码\nconst Utils = {\n  formatDate: (date) => {\n    return new Date(date).toLocaleDateString();\n  },\n  \n  debounce: (func, wait) => {\n    let timeout;\n    return function executedFunction(...args) {\n      const later = () => {\n        clearTimeout(timeout);\n        func(...args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n};\n\n// 使用工具函数\nconst debouncedSearch = Utils.debounce((query) => {\n  console.log('搜索:', query);\n}, 300);\n```\n\n## 高级功能\n\n### 1. 团队协作\n- **Pro 版本**：支持团队协作\n- **实时协作**：多人同时编辑\n- **评论系统**：代码审查和讨论\n\n### 2. 项目管理\n- **Collections**：组织相关项目\n- **Templates**：创建项目模板\n- **Version Control**：版本管理\n\n### 3. 部署和分享\n- **Live View**：生成可分享的链接\n- **Embed**：嵌入到其他网站\n- **Export**：导出为静态文件\n\n## 最佳实践\n\n### 1. 代码规范\n```javascript\n// 使用有意义的变量名\nconst userInput = document.getElementById('user-input');\nconst submitButton = document.getElementById('submit-btn');\n\n// 添加注释说明复杂逻辑\nfunction calculateTotal(items) {\n  // 计算所有商品的总价，包含税费\n  const subtotal = items.reduce((sum, item) => sum + item.price, 0);\n  const tax = subtotal * 0.08; // 8% 税率\n  return subtotal + tax;\n}\n```\n\n### 2. 响应式设计\n```css\n/* 移动优先的响应式设计 */\n.container {\n  width: 100%;\n  padding: 10px;\n}\n\n@media (min-width: 768px) {\n  .container {\n    max-width: 750px;\n    margin: 0 auto;\n    padding: 20px;\n  }\n}\n\n@media (min-width: 1024px) {\n  .container {\n    max-width: 1200px;\n    padding: 40px;\n  }\n}\n```\n\n### 3. 性能优化\n```javascript\n// 使用事件委托减少事件监听器\ndocument.addEventListener('click', function(e) {\n  if (e.target.matches('.button')) {\n    handleButtonClick(e.target);\n  }\n});\n\n// 使用 requestAnimationFrame 优化动画\nfunction animate(element) {\n  function frame() {\n    // 动画逻辑\n    requestAnimationFrame(frame);\n  }\n  requestAnimationFrame(frame);\n}\n```\n\n## 学习资源\n\n### 1. 官方资源\n- [CodePen 官方文档](https://blog.codepen.io/documentation/)\n- [CodePen 博客](https://blog.codepen.io/)\n- [CodePen TV](https://codepen.io/tv/)\n\n### 2. 社区资源\n- **热门作品**：浏览 Trending 页面\n- **挑战活动**：参与每周挑战\n- **教程集合**：学习他人分享的教程\n\n### 3. 推荐关注\n- **知名开发者**：关注行业大牛的 CodePen\n- **设计灵感**：浏览优秀的设计作品\n- **技术趋势**：了解最新的前端技术\n\n## 总结\n\nCodePen 是前端开发者不可或缺的工具，它不仅提供了便捷的在线开发环境，还构建了一个活跃的开发者社区。无论是学习新技术、快速原型开发，还是分享作品、技术交流，CodePen 都能满足你的需求。\n\n### 主要优势\n- ✅ **零配置**：无需安装任何软件\n- ✅ **实时预览**：即时看到代码效果\n- ✅ **社区支持**：庞大的开发者社区\n- ✅ **跨平台**：支持所有现代浏览器\n- ✅ **免费使用**：基础功能完全免费\n\n如果你还没有尝试过 CodePen，建议立即访问 [https://codepen.io/](https://codepen.io/) 开始你的在线编程之旅！\n\n---\n\n*最后更新时间：2025年9月10日*\n\n**相关标签**：#前端开发 #工具推荐 #CodePen #在线编辑器 #编程工具","source":"_posts/CodePen-前端开发者的在线代码编辑器.md","raw":"---\ntitle: CodePen - 前端开发者的在线代码编辑器\ntags:\n  - 前端开发\n  - 工具推荐\n  - CodePen\n  - 在线编辑器\ncategories:\n  - 技术分享\nkeywords:\n  - CodePen\n  - 前端开发\n  - 在线代码编辑器\n  - 代码分享\n  - 前端工具\ndescription: 详细介绍 CodePen 这个优秀的前端在线代码编辑器，包括其功能特点、使用技巧和实际应用场景。\ncomments: true\ntoc: true\ntoc_number: true\ntoc_style_simple: false\ncopyright: true\ncopyright_author: ZhouBufan\ncopyright_author_href: 'https://zhoubufan.github.io'\ncopyright_url: 'https://zhoubufan.github.io/2025/01/05/CodePen-前端开发者的在线代码编辑器/'\ncopyright_info: 本文采用 CC BY-NC-SA 4.0 协议，转载请注明出处。\nmathjax: false\nkatex: false\naplayer: false\nhighlight_shrink: false\naside: true\nabcjs: false\nnoticeOutdate: true\nabbrlink: 28377\ndate: 2025-09-10 11:00:00\nupdated: 2025-09-10 11:00:00\n---\n\n# CodePen - 前端开发者的在线代码编辑器\n\n## 什么是 CodePen？\n\n[CodePen](https://codepen.io/) 是一个功能强大的在线代码编辑器，专门为前端开发者设计。它允许你在浏览器中直接编写、测试和分享 HTML、CSS 和 JavaScript 代码，无需安装任何软件或配置开发环境。\n\n## 主要功能特点\n\n### 🚀 实时预览\n- **即时渲染**：代码修改后立即看到效果\n- **多设备预览**：支持桌面、平板、手机等不同屏幕尺寸\n- **全屏模式**：专注代码编写，无干扰\n\n### 💻 强大的编辑器\n- **语法高亮**：支持多种编程语言的语法高亮\n- **自动补全**：智能代码提示和自动补全\n- **代码折叠**：提高代码可读性\n- **多光标编辑**：提高编码效率\n\n### 🎨 丰富的预处理器支持\n- **CSS 预处理器**：Sass、SCSS、Less、Stylus\n- **JavaScript 预处理器**：Babel、TypeScript、CoffeeScript\n- **HTML 预处理器**：Pug、Haml、Markdown\n\n### 📦 外部资源管理\n- **CDN 集成**：快速添加外部库和框架\n- **版本控制**：支持不同版本的库\n- **自定义资源**：上传自己的文件\n\n## 使用场景\n\n### 1. 快速原型开发\n```html\n<!-- 快速创建交互式原型 -->\n<div class=\"prototype-container\">\n  <button id=\"demo-btn\">点击我</button>\n  <div id=\"result\"></div>\n</div>\n```\n\n```css\n/* 样式设计 */\n.prototype-container {\n  text-align: center;\n  padding: 50px;\n}\n\n#demo-btn {\n  background: #007bff;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n}\n```\n\n```javascript\n// 交互逻辑\ndocument.getElementById('demo-btn').addEventListener('click', function() {\n  document.getElementById('result').innerHTML = 'Hello CodePen!';\n});\n```\n\n### 2. 学习新技术\n- **框架学习**：React、Vue、Angular 等\n- **CSS 技巧**：动画、布局、响应式设计\n- **JavaScript 特性**：ES6+、API 使用等\n\n### 3. 代码分享与协作\n- **技术交流**：与同事分享代码片段\n- **教学演示**：在线教学和演示\n- **作品展示**：展示个人项目\n\n### 4. 面试准备\n- **算法练习**：可视化算法过程\n- **技术测试**：在线编程测试\n- **作品集**：展示编程能力\n\n## 实用技巧\n\n### 1. 使用外部库\n在 CodePen 中，你可以通过以下方式添加外部库：\n\n```html\n<!-- 在 HTML 中添加 CDN 链接 -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n```\n\n或者在设置中添加：\n- **React**：`https://unpkg.com/react@17/umd/react.development.js`\n- **Vue**：`https://unpkg.com/vue@3/dist/vue.global.js`\n- **Bootstrap**：`https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/css/bootstrap.min.css`\n\n### 2. 使用预处理器\n```scss\n// SCSS 示例\n$primary-color: #007bff;\n$border-radius: 5px;\n\n.button {\n  background-color: $primary-color;\n  border-radius: $border-radius;\n  \n  &:hover {\n    background-color: darken($primary-color, 10%);\n  }\n}\n```\n\n### 3. 代码组织\n```javascript\n// 使用模块化组织代码\nconst Utils = {\n  formatDate: (date) => {\n    return new Date(date).toLocaleDateString();\n  },\n  \n  debounce: (func, wait) => {\n    let timeout;\n    return function executedFunction(...args) {\n      const later = () => {\n        clearTimeout(timeout);\n        func(...args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n};\n\n// 使用工具函数\nconst debouncedSearch = Utils.debounce((query) => {\n  console.log('搜索:', query);\n}, 300);\n```\n\n## 高级功能\n\n### 1. 团队协作\n- **Pro 版本**：支持团队协作\n- **实时协作**：多人同时编辑\n- **评论系统**：代码审查和讨论\n\n### 2. 项目管理\n- **Collections**：组织相关项目\n- **Templates**：创建项目模板\n- **Version Control**：版本管理\n\n### 3. 部署和分享\n- **Live View**：生成可分享的链接\n- **Embed**：嵌入到其他网站\n- **Export**：导出为静态文件\n\n## 最佳实践\n\n### 1. 代码规范\n```javascript\n// 使用有意义的变量名\nconst userInput = document.getElementById('user-input');\nconst submitButton = document.getElementById('submit-btn');\n\n// 添加注释说明复杂逻辑\nfunction calculateTotal(items) {\n  // 计算所有商品的总价，包含税费\n  const subtotal = items.reduce((sum, item) => sum + item.price, 0);\n  const tax = subtotal * 0.08; // 8% 税率\n  return subtotal + tax;\n}\n```\n\n### 2. 响应式设计\n```css\n/* 移动优先的响应式设计 */\n.container {\n  width: 100%;\n  padding: 10px;\n}\n\n@media (min-width: 768px) {\n  .container {\n    max-width: 750px;\n    margin: 0 auto;\n    padding: 20px;\n  }\n}\n\n@media (min-width: 1024px) {\n  .container {\n    max-width: 1200px;\n    padding: 40px;\n  }\n}\n```\n\n### 3. 性能优化\n```javascript\n// 使用事件委托减少事件监听器\ndocument.addEventListener('click', function(e) {\n  if (e.target.matches('.button')) {\n    handleButtonClick(e.target);\n  }\n});\n\n// 使用 requestAnimationFrame 优化动画\nfunction animate(element) {\n  function frame() {\n    // 动画逻辑\n    requestAnimationFrame(frame);\n  }\n  requestAnimationFrame(frame);\n}\n```\n\n## 学习资源\n\n### 1. 官方资源\n- [CodePen 官方文档](https://blog.codepen.io/documentation/)\n- [CodePen 博客](https://blog.codepen.io/)\n- [CodePen TV](https://codepen.io/tv/)\n\n### 2. 社区资源\n- **热门作品**：浏览 Trending 页面\n- **挑战活动**：参与每周挑战\n- **教程集合**：学习他人分享的教程\n\n### 3. 推荐关注\n- **知名开发者**：关注行业大牛的 CodePen\n- **设计灵感**：浏览优秀的设计作品\n- **技术趋势**：了解最新的前端技术\n\n## 总结\n\nCodePen 是前端开发者不可或缺的工具，它不仅提供了便捷的在线开发环境，还构建了一个活跃的开发者社区。无论是学习新技术、快速原型开发，还是分享作品、技术交流，CodePen 都能满足你的需求。\n\n### 主要优势\n- ✅ **零配置**：无需安装任何软件\n- ✅ **实时预览**：即时看到代码效果\n- ✅ **社区支持**：庞大的开发者社区\n- ✅ **跨平台**：支持所有现代浏览器\n- ✅ **免费使用**：基础功能完全免费\n\n如果你还没有尝试过 CodePen，建议立即访问 [https://codepen.io/](https://codepen.io/) 开始你的在线编程之旅！\n\n---\n\n*最后更新时间：2025年9月10日*\n\n**相关标签**：#前端开发 #工具推荐 #CodePen #在线编辑器 #编程工具","slug":"CodePen-前端开发者的在线代码编辑器","published":1,"layout":"post","photos":[],"_id":"cmgly8kpz000988vo1n4ldfsa","content":"<h1 id=\"CodePen-前端开发者的在线代码编辑器\"><a href=\"#CodePen-前端开发者的在线代码编辑器\" class=\"headerlink\" title=\"CodePen - 前端开发者的在线代码编辑器\"></a>CodePen - 前端开发者的在线代码编辑器</h1><h2 id=\"什么是-CodePen？\"><a href=\"#什么是-CodePen？\" class=\"headerlink\" title=\"什么是 CodePen？\"></a>什么是 CodePen？</h2><p><a href=\"https://codepen.io/\">CodePen</a> 是一个功能强大的在线代码编辑器，专门为前端开发者设计。它允许你在浏览器中直接编写、测试和分享 HTML、CSS 和 JavaScript 代码，无需安装任何软件或配置开发环境。</p>\n<h2 id=\"主要功能特点\"><a href=\"#主要功能特点\" class=\"headerlink\" title=\"主要功能特点\"></a>主要功能特点</h2><h3 id=\"🚀-实时预览\"><a href=\"#🚀-实时预览\" class=\"headerlink\" title=\"🚀 实时预览\"></a>🚀 实时预览</h3><ul>\n<li><strong>即时渲染</strong>：代码修改后立即看到效果</li>\n<li><strong>多设备预览</strong>：支持桌面、平板、手机等不同屏幕尺寸</li>\n<li><strong>全屏模式</strong>：专注代码编写，无干扰</li>\n</ul>\n<h3 id=\"💻-强大的编辑器\"><a href=\"#💻-强大的编辑器\" class=\"headerlink\" title=\"💻 强大的编辑器\"></a>💻 强大的编辑器</h3><ul>\n<li><strong>语法高亮</strong>：支持多种编程语言的语法高亮</li>\n<li><strong>自动补全</strong>：智能代码提示和自动补全</li>\n<li><strong>代码折叠</strong>：提高代码可读性</li>\n<li><strong>多光标编辑</strong>：提高编码效率</li>\n</ul>\n<h3 id=\"🎨-丰富的预处理器支持\"><a href=\"#🎨-丰富的预处理器支持\" class=\"headerlink\" title=\"🎨 丰富的预处理器支持\"></a>🎨 丰富的预处理器支持</h3><ul>\n<li><strong>CSS 预处理器</strong>：Sass、SCSS、Less、Stylus</li>\n<li><strong>JavaScript 预处理器</strong>：Babel、TypeScript、CoffeeScript</li>\n<li><strong>HTML 预处理器</strong>：Pug、Haml、Markdown</li>\n</ul>\n<h3 id=\"📦-外部资源管理\"><a href=\"#📦-外部资源管理\" class=\"headerlink\" title=\"📦 外部资源管理\"></a>📦 外部资源管理</h3><ul>\n<li><strong>CDN 集成</strong>：快速添加外部库和框架</li>\n<li><strong>版本控制</strong>：支持不同版本的库</li>\n<li><strong>自定义资源</strong>：上传自己的文件</li>\n</ul>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><h3 id=\"1-快速原型开发\"><a href=\"#1-快速原型开发\" class=\"headerlink\" title=\"1. 快速原型开发\"></a>1. 快速原型开发</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 快速创建交互式原型 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;prototype-container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo-btn&quot;</span>&gt;</span>点击我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;result&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 样式设计 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.prototype-container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#demo-btn</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#007bff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 交互逻辑</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;demo-btn&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;result&#x27;</span>).<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;Hello CodePen!&#x27;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-学习新技术\"><a href=\"#2-学习新技术\" class=\"headerlink\" title=\"2. 学习新技术\"></a>2. 学习新技术</h3><ul>\n<li><strong>框架学习</strong>：React、Vue、Angular 等</li>\n<li><strong>CSS 技巧</strong>：动画、布局、响应式设计</li>\n<li><strong>JavaScript 特性</strong>：ES6+、API 使用等</li>\n</ul>\n<h3 id=\"3-代码分享与协作\"><a href=\"#3-代码分享与协作\" class=\"headerlink\" title=\"3. 代码分享与协作\"></a>3. 代码分享与协作</h3><ul>\n<li><strong>技术交流</strong>：与同事分享代码片段</li>\n<li><strong>教学演示</strong>：在线教学和演示</li>\n<li><strong>作品展示</strong>：展示个人项目</li>\n</ul>\n<h3 id=\"4-面试准备\"><a href=\"#4-面试准备\" class=\"headerlink\" title=\"4. 面试准备\"></a>4. 面试准备</h3><ul>\n<li><strong>算法练习</strong>：可视化算法过程</li>\n<li><strong>技术测试</strong>：在线编程测试</li>\n<li><strong>作品集</strong>：展示编程能力</li>\n</ul>\n<h2 id=\"实用技巧\"><a href=\"#实用技巧\" class=\"headerlink\" title=\"实用技巧\"></a>实用技巧</h2><h3 id=\"1-使用外部库\"><a href=\"#1-使用外部库\" class=\"headerlink\" title=\"1. 使用外部库\"></a>1. 使用外部库</h3><p>在 CodePen 中，你可以通过以下方式添加外部库：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 在 HTML 中添加 CDN 链接 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>或者在设置中添加：</p>\n<ul>\n<li><strong>React</strong>：<code>https://unpkg.com/react@17/umd/react.development.js</code></li>\n<li><strong>Vue</strong>：<code>https://unpkg.com/vue@3/dist/vue.global.js</code></li>\n<li><strong>Bootstrap</strong>：<code>https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/css/bootstrap.min.css</code></li>\n</ul>\n<h3 id=\"2-使用预处理器\"><a href=\"#2-使用预处理器\" class=\"headerlink\" title=\"2. 使用预处理器\"></a>2. 使用预处理器</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SCSS 示例</span></span><br><span class=\"line\"><span class=\"variable\">$primary-color</span>: <span class=\"number\">#007bff</span>;</span><br><span class=\"line\"><span class=\"variable\">$border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"variable\">$primary-color</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"variable\">$border-radius</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">darken</span>(<span class=\"variable\">$primary-color</span>, <span class=\"number\">10%</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-代码组织\"><a href=\"#3-代码组织\" class=\"headerlink\" title=\"3. 代码组织\"></a>3. 代码组织</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用模块化组织代码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Utils</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">formatDate</span>: <span class=\"function\">(<span class=\"params\">date</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(date).<span class=\"title function_\">toLocaleDateString</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">debounce</span>: <span class=\"function\">(<span class=\"params\">func, wait</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">executedFunction</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">later</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">        <span class=\"title function_\">func</span>(...args);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">      timeout = <span class=\"built_in\">setTimeout</span>(later, wait);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用工具函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> debouncedSearch = <span class=\"title class_\">Utils</span>.<span class=\"title function_\">debounce</span>(<span class=\"function\">(<span class=\"params\">query</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;搜索:&#x27;</span>, query);</span><br><span class=\"line\">&#125;, <span class=\"number\">300</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"高级功能\"><a href=\"#高级功能\" class=\"headerlink\" title=\"高级功能\"></a>高级功能</h2><h3 id=\"1-团队协作\"><a href=\"#1-团队协作\" class=\"headerlink\" title=\"1. 团队协作\"></a>1. 团队协作</h3><ul>\n<li><strong>Pro 版本</strong>：支持团队协作</li>\n<li><strong>实时协作</strong>：多人同时编辑</li>\n<li><strong>评论系统</strong>：代码审查和讨论</li>\n</ul>\n<h3 id=\"2-项目管理\"><a href=\"#2-项目管理\" class=\"headerlink\" title=\"2. 项目管理\"></a>2. 项目管理</h3><ul>\n<li><strong>Collections</strong>：组织相关项目</li>\n<li><strong>Templates</strong>：创建项目模板</li>\n<li><strong>Version Control</strong>：版本管理</li>\n</ul>\n<h3 id=\"3-部署和分享\"><a href=\"#3-部署和分享\" class=\"headerlink\" title=\"3. 部署和分享\"></a>3. 部署和分享</h3><ul>\n<li><strong>Live View</strong>：生成可分享的链接</li>\n<li><strong>Embed</strong>：嵌入到其他网站</li>\n<li><strong>Export</strong>：导出为静态文件</li>\n</ul>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><h3 id=\"1-代码规范\"><a href=\"#1-代码规范\" class=\"headerlink\" title=\"1. 代码规范\"></a>1. 代码规范</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用有意义的变量名</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> userInput = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;user-input&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> submitButton = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;submit-btn&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加注释说明复杂逻辑</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">calculateTotal</span>(<span class=\"params\">items</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 计算所有商品的总价，包含税费</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> subtotal = items.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, item</span>) =&gt;</span> sum + item.<span class=\"property\">price</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tax = subtotal * <span class=\"number\">0.08</span>; <span class=\"comment\">// 8% 税率</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> subtotal + tax;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-响应式设计\"><a href=\"#2-响应式设计\" class=\"headerlink\" title=\"2. 响应式设计\"></a>2. 响应式设计</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 移动优先的响应式设计 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">768px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">750px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">1024px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-性能优化\"><a href=\"#3-性能优化\" class=\"headerlink\" title=\"3. 性能优化\"></a>3. 性能优化</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用事件委托减少事件监听器</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.<span class=\"property\">target</span>.<span class=\"title function_\">matches</span>(<span class=\"string\">&#x27;.button&#x27;</span>)) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">handleButtonClick</span>(e.<span class=\"property\">target</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 requestAnimationFrame 优化动画</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">animate</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">frame</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 动画逻辑</span></span><br><span class=\"line\">    <span class=\"title function_\">requestAnimationFrame</span>(frame);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">requestAnimationFrame</span>(frame);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h2><h3 id=\"1-官方资源\"><a href=\"#1-官方资源\" class=\"headerlink\" title=\"1. 官方资源\"></a>1. 官方资源</h3><ul>\n<li><a href=\"https://blog.codepen.io/documentation/\">CodePen 官方文档</a></li>\n<li><a href=\"https://blog.codepen.io/\">CodePen 博客</a></li>\n<li><a href=\"https://codepen.io/tv/\">CodePen TV</a></li>\n</ul>\n<h3 id=\"2-社区资源\"><a href=\"#2-社区资源\" class=\"headerlink\" title=\"2. 社区资源\"></a>2. 社区资源</h3><ul>\n<li><strong>热门作品</strong>：浏览 Trending 页面</li>\n<li><strong>挑战活动</strong>：参与每周挑战</li>\n<li><strong>教程集合</strong>：学习他人分享的教程</li>\n</ul>\n<h3 id=\"3-推荐关注\"><a href=\"#3-推荐关注\" class=\"headerlink\" title=\"3. 推荐关注\"></a>3. 推荐关注</h3><ul>\n<li><strong>知名开发者</strong>：关注行业大牛的 CodePen</li>\n<li><strong>设计灵感</strong>：浏览优秀的设计作品</li>\n<li><strong>技术趋势</strong>：了解最新的前端技术</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>CodePen 是前端开发者不可或缺的工具，它不仅提供了便捷的在线开发环境，还构建了一个活跃的开发者社区。无论是学习新技术、快速原型开发，还是分享作品、技术交流，CodePen 都能满足你的需求。</p>\n<h3 id=\"主要优势\"><a href=\"#主要优势\" class=\"headerlink\" title=\"主要优势\"></a>主要优势</h3><ul>\n<li>✅ <strong>零配置</strong>：无需安装任何软件</li>\n<li>✅ <strong>实时预览</strong>：即时看到代码效果</li>\n<li>✅ <strong>社区支持</strong>：庞大的开发者社区</li>\n<li>✅ <strong>跨平台</strong>：支持所有现代浏览器</li>\n<li>✅ <strong>免费使用</strong>：基础功能完全免费</li>\n</ul>\n<p>如果你还没有尝试过 CodePen，建议立即访问 <a href=\"https://codepen.io/\">https://codepen.io/</a> 开始你的在线编程之旅！</p>\n<hr>\n<p><em>最后更新时间：2025年9月10日</em></p>\n<p><strong>相关标签</strong>：#前端开发 #工具推荐 #CodePen #在线编辑器 #编程工具</p>\n","excerpt":"","more":"<h1 id=\"CodePen-前端开发者的在线代码编辑器\"><a href=\"#CodePen-前端开发者的在线代码编辑器\" class=\"headerlink\" title=\"CodePen - 前端开发者的在线代码编辑器\"></a>CodePen - 前端开发者的在线代码编辑器</h1><h2 id=\"什么是-CodePen？\"><a href=\"#什么是-CodePen？\" class=\"headerlink\" title=\"什么是 CodePen？\"></a>什么是 CodePen？</h2><p><a href=\"https://codepen.io/\">CodePen</a> 是一个功能强大的在线代码编辑器，专门为前端开发者设计。它允许你在浏览器中直接编写、测试和分享 HTML、CSS 和 JavaScript 代码，无需安装任何软件或配置开发环境。</p>\n<h2 id=\"主要功能特点\"><a href=\"#主要功能特点\" class=\"headerlink\" title=\"主要功能特点\"></a>主要功能特点</h2><h3 id=\"🚀-实时预览\"><a href=\"#🚀-实时预览\" class=\"headerlink\" title=\"🚀 实时预览\"></a>🚀 实时预览</h3><ul>\n<li><strong>即时渲染</strong>：代码修改后立即看到效果</li>\n<li><strong>多设备预览</strong>：支持桌面、平板、手机等不同屏幕尺寸</li>\n<li><strong>全屏模式</strong>：专注代码编写，无干扰</li>\n</ul>\n<h3 id=\"💻-强大的编辑器\"><a href=\"#💻-强大的编辑器\" class=\"headerlink\" title=\"💻 强大的编辑器\"></a>💻 强大的编辑器</h3><ul>\n<li><strong>语法高亮</strong>：支持多种编程语言的语法高亮</li>\n<li><strong>自动补全</strong>：智能代码提示和自动补全</li>\n<li><strong>代码折叠</strong>：提高代码可读性</li>\n<li><strong>多光标编辑</strong>：提高编码效率</li>\n</ul>\n<h3 id=\"🎨-丰富的预处理器支持\"><a href=\"#🎨-丰富的预处理器支持\" class=\"headerlink\" title=\"🎨 丰富的预处理器支持\"></a>🎨 丰富的预处理器支持</h3><ul>\n<li><strong>CSS 预处理器</strong>：Sass、SCSS、Less、Stylus</li>\n<li><strong>JavaScript 预处理器</strong>：Babel、TypeScript、CoffeeScript</li>\n<li><strong>HTML 预处理器</strong>：Pug、Haml、Markdown</li>\n</ul>\n<h3 id=\"📦-外部资源管理\"><a href=\"#📦-外部资源管理\" class=\"headerlink\" title=\"📦 外部资源管理\"></a>📦 外部资源管理</h3><ul>\n<li><strong>CDN 集成</strong>：快速添加外部库和框架</li>\n<li><strong>版本控制</strong>：支持不同版本的库</li>\n<li><strong>自定义资源</strong>：上传自己的文件</li>\n</ul>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><h3 id=\"1-快速原型开发\"><a href=\"#1-快速原型开发\" class=\"headerlink\" title=\"1. 快速原型开发\"></a>1. 快速原型开发</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 快速创建交互式原型 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;prototype-container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo-btn&quot;</span>&gt;</span>点击我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;result&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 样式设计 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.prototype-container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#demo-btn</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#007bff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 交互逻辑</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;demo-btn&#x27;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;result&#x27;</span>).<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;Hello CodePen!&#x27;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-学习新技术\"><a href=\"#2-学习新技术\" class=\"headerlink\" title=\"2. 学习新技术\"></a>2. 学习新技术</h3><ul>\n<li><strong>框架学习</strong>：React、Vue、Angular 等</li>\n<li><strong>CSS 技巧</strong>：动画、布局、响应式设计</li>\n<li><strong>JavaScript 特性</strong>：ES6+、API 使用等</li>\n</ul>\n<h3 id=\"3-代码分享与协作\"><a href=\"#3-代码分享与协作\" class=\"headerlink\" title=\"3. 代码分享与协作\"></a>3. 代码分享与协作</h3><ul>\n<li><strong>技术交流</strong>：与同事分享代码片段</li>\n<li><strong>教学演示</strong>：在线教学和演示</li>\n<li><strong>作品展示</strong>：展示个人项目</li>\n</ul>\n<h3 id=\"4-面试准备\"><a href=\"#4-面试准备\" class=\"headerlink\" title=\"4. 面试准备\"></a>4. 面试准备</h3><ul>\n<li><strong>算法练习</strong>：可视化算法过程</li>\n<li><strong>技术测试</strong>：在线编程测试</li>\n<li><strong>作品集</strong>：展示编程能力</li>\n</ul>\n<h2 id=\"实用技巧\"><a href=\"#实用技巧\" class=\"headerlink\" title=\"实用技巧\"></a>实用技巧</h2><h3 id=\"1-使用外部库\"><a href=\"#1-使用外部库\" class=\"headerlink\" title=\"1. 使用外部库\"></a>1. 使用外部库</h3><p>在 CodePen 中，你可以通过以下方式添加外部库：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 在 HTML 中添加 CDN 链接 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>或者在设置中添加：</p>\n<ul>\n<li><strong>React</strong>：<code>https://unpkg.com/react@17/umd/react.development.js</code></li>\n<li><strong>Vue</strong>：<code>https://unpkg.com/vue@3/dist/vue.global.js</code></li>\n<li><strong>Bootstrap</strong>：<code>https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/css/bootstrap.min.css</code></li>\n</ul>\n<h3 id=\"2-使用预处理器\"><a href=\"#2-使用预处理器\" class=\"headerlink\" title=\"2. 使用预处理器\"></a>2. 使用预处理器</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SCSS 示例</span></span><br><span class=\"line\"><span class=\"variable\">$primary-color</span>: <span class=\"number\">#007bff</span>;</span><br><span class=\"line\"><span class=\"variable\">$border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"variable\">$primary-color</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"variable\">$border-radius</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">darken</span>(<span class=\"variable\">$primary-color</span>, <span class=\"number\">10%</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-代码组织\"><a href=\"#3-代码组织\" class=\"headerlink\" title=\"3. 代码组织\"></a>3. 代码组织</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用模块化组织代码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Utils</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">formatDate</span>: <span class=\"function\">(<span class=\"params\">date</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(date).<span class=\"title function_\">toLocaleDateString</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">debounce</span>: <span class=\"function\">(<span class=\"params\">func, wait</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">executedFunction</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">later</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">        <span class=\"title function_\">func</span>(...args);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">      timeout = <span class=\"built_in\">setTimeout</span>(later, wait);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用工具函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> debouncedSearch = <span class=\"title class_\">Utils</span>.<span class=\"title function_\">debounce</span>(<span class=\"function\">(<span class=\"params\">query</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;搜索:&#x27;</span>, query);</span><br><span class=\"line\">&#125;, <span class=\"number\">300</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"高级功能\"><a href=\"#高级功能\" class=\"headerlink\" title=\"高级功能\"></a>高级功能</h2><h3 id=\"1-团队协作\"><a href=\"#1-团队协作\" class=\"headerlink\" title=\"1. 团队协作\"></a>1. 团队协作</h3><ul>\n<li><strong>Pro 版本</strong>：支持团队协作</li>\n<li><strong>实时协作</strong>：多人同时编辑</li>\n<li><strong>评论系统</strong>：代码审查和讨论</li>\n</ul>\n<h3 id=\"2-项目管理\"><a href=\"#2-项目管理\" class=\"headerlink\" title=\"2. 项目管理\"></a>2. 项目管理</h3><ul>\n<li><strong>Collections</strong>：组织相关项目</li>\n<li><strong>Templates</strong>：创建项目模板</li>\n<li><strong>Version Control</strong>：版本管理</li>\n</ul>\n<h3 id=\"3-部署和分享\"><a href=\"#3-部署和分享\" class=\"headerlink\" title=\"3. 部署和分享\"></a>3. 部署和分享</h3><ul>\n<li><strong>Live View</strong>：生成可分享的链接</li>\n<li><strong>Embed</strong>：嵌入到其他网站</li>\n<li><strong>Export</strong>：导出为静态文件</li>\n</ul>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><h3 id=\"1-代码规范\"><a href=\"#1-代码规范\" class=\"headerlink\" title=\"1. 代码规范\"></a>1. 代码规范</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用有意义的变量名</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> userInput = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;user-input&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> submitButton = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;submit-btn&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 添加注释说明复杂逻辑</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">calculateTotal</span>(<span class=\"params\">items</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 计算所有商品的总价，包含税费</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> subtotal = items.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, item</span>) =&gt;</span> sum + item.<span class=\"property\">price</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tax = subtotal * <span class=\"number\">0.08</span>; <span class=\"comment\">// 8% 税率</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> subtotal + tax;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-响应式设计\"><a href=\"#2-响应式设计\" class=\"headerlink\" title=\"2. 响应式设计\"></a>2. 响应式设计</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 移动优先的响应式设计 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">768px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">750px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">1024px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-性能优化\"><a href=\"#3-性能优化\" class=\"headerlink\" title=\"3. 性能优化\"></a>3. 性能优化</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用事件委托减少事件监听器</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.<span class=\"property\">target</span>.<span class=\"title function_\">matches</span>(<span class=\"string\">&#x27;.button&#x27;</span>)) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">handleButtonClick</span>(e.<span class=\"property\">target</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 requestAnimationFrame 优化动画</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">animate</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">frame</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 动画逻辑</span></span><br><span class=\"line\">    <span class=\"title function_\">requestAnimationFrame</span>(frame);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">requestAnimationFrame</span>(frame);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h2><h3 id=\"1-官方资源\"><a href=\"#1-官方资源\" class=\"headerlink\" title=\"1. 官方资源\"></a>1. 官方资源</h3><ul>\n<li><a href=\"https://blog.codepen.io/documentation/\">CodePen 官方文档</a></li>\n<li><a href=\"https://blog.codepen.io/\">CodePen 博客</a></li>\n<li><a href=\"https://codepen.io/tv/\">CodePen TV</a></li>\n</ul>\n<h3 id=\"2-社区资源\"><a href=\"#2-社区资源\" class=\"headerlink\" title=\"2. 社区资源\"></a>2. 社区资源</h3><ul>\n<li><strong>热门作品</strong>：浏览 Trending 页面</li>\n<li><strong>挑战活动</strong>：参与每周挑战</li>\n<li><strong>教程集合</strong>：学习他人分享的教程</li>\n</ul>\n<h3 id=\"3-推荐关注\"><a href=\"#3-推荐关注\" class=\"headerlink\" title=\"3. 推荐关注\"></a>3. 推荐关注</h3><ul>\n<li><strong>知名开发者</strong>：关注行业大牛的 CodePen</li>\n<li><strong>设计灵感</strong>：浏览优秀的设计作品</li>\n<li><strong>技术趋势</strong>：了解最新的前端技术</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>CodePen 是前端开发者不可或缺的工具，它不仅提供了便捷的在线开发环境，还构建了一个活跃的开发者社区。无论是学习新技术、快速原型开发，还是分享作品、技术交流，CodePen 都能满足你的需求。</p>\n<h3 id=\"主要优势\"><a href=\"#主要优势\" class=\"headerlink\" title=\"主要优势\"></a>主要优势</h3><ul>\n<li>✅ <strong>零配置</strong>：无需安装任何软件</li>\n<li>✅ <strong>实时预览</strong>：即时看到代码效果</li>\n<li>✅ <strong>社区支持</strong>：庞大的开发者社区</li>\n<li>✅ <strong>跨平台</strong>：支持所有现代浏览器</li>\n<li>✅ <strong>免费使用</strong>：基础功能完全免费</li>\n</ul>\n<p>如果你还没有尝试过 CodePen，建议立即访问 <a href=\"https://codepen.io/\">https://codepen.io/</a> 开始你的在线编程之旅！</p>\n<hr>\n<p><em>最后更新时间：2025年9月10日</em></p>\n<p><strong>相关标签</strong>：#前端开发 #工具推荐 #CodePen #在线编辑器 #编程工具</p>\n"},{"title":"Go 学习笔记 1","toc":true,"math":false,"top_img":"/img/docs/md-go/advanced-go-programming-book-master/cover.png","cover":"/img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_01.png","abbrlink":37369,"date":"2025-09-18T03:33:56.000Z","_content":"# ChatGPT摘抄\n\n## Go和C++的区别\nGo语言（通常称为Golang）和C++在多个方面有显著的区别，包括它们的设计哲学、类型系统、内存管理、并发模型等方面。下面是一些主要的区别：\n\n1. **设计哲学**:\n   - **Go** 设计简洁，以提高开发效率和易用性为目标。它旨在使得编写高性能、可靠、易于维护的代码更加直接和简单。\n   - **C++** 设计为一种通用编程语言，强调性能和灵活性。它支持多种编程范式（如过程式、面向对象、泛型编程），但这也使得它变得相对复杂。\n\n2. **类型系统**:\n   - **Go** 有一个静态类型系统，但它的类型推导使得代码更简洁。它支持接口，但不支持类和继承，而是通过组合和接口实现多态和代码复用。\n   - **C++** 也是静态类型的，但它支持更复杂的类型系统，包括类、继承、模板等。这提供了强大的灵活性，但也增加了复杂性。\n\n3. **内存管理**:\n   - **Go** 提供自动垃圾收集，减少了内存泄漏的风险，简化了内存管理。\n   - **C++** 需要程序员手动管理内存，虽然提供了智能指针等现代特性来帮助管理，但管理不当仍可能导致内存泄漏和其他问题。\n\n4. **并发模型**:\n   - **Go** 的并发模型是其核心特性之一，基于“goroutines”（轻量级线程）和通道。这使得编写并发程序变得更简单和安全。\n   - **C++** 支持多线程，但并发并不是语言核心的一部分。C++11及以后的版本引入了一些并发编程的标准库支持，但使用起来比Go更复杂。\n\n5. **标准库和生态系统**:\n   - **Go** 有一个丰富的标准库，尤其是对于网络编程和并发编程。Go的生态系统随着语言的普及而快速增长，特别是在云服务和微服务开发中。\n   - **C++** 拥有庞大的第三方库和工具集，适用于各种编程任务，但标准库相对较小。C++在高性能计算、游戏开发、系统编程等领域有着悠久和广泛的应用。\n\n6. **编译和执行**:\n   - **Go** 编译器倾向于生成单个静态链接的二进制文件，简化了部署和分发。\n   - **C++** 通常需要更复杂的构建系统，尤其是对于依赖于多个库和平台的项目。\n\n总之，Go和C++在设计上有根本的不同。Go旨在简化并发编程，提高开发效率，适合快速开发大型分布式系统。而C++提供了更多的控制和灵活性，适合那些需要极致性能优化和复杂系统设计的场景。选择哪种语言取决于项目需求、团队熟悉度和特定任务的需求。\n\n## 讲一下go语言中的协程\nGo语言中的协程（goroutine）是Go语言并发设计的核心。goroutine 类似于线程，但在执行和资源消耗方面更为高效。它们由Go运行时（runtime）管理，而不是直接由操作系统管理。这样做的好处是goroutine的创建和销毁的成本比操作系统线程低得多，允许在同一程序中并发运行成千上万的goroutine。\n\n### 创建goroutine\n\n在Go语言中，创建一个goroutine非常简单，只需要在函数调用前加上`go`关键字。例如：\n\n```go\ngo funcName(params)\n```\n\n这会启动一个新的goroutine并在这个新的goroutine中调用`funcName`函数，`params`是传递给`funcName`函数的参数。\n\n### 特点\n\n1. **轻量级**：每个goroutine的堆栈大小在初始化时很小，根据需要可以动态地增长和缩减。这种设计让成千上万的goroutine并发运行成为可能。\n2. **不需要显式创建和销毁**：goroutine由Go的运行时环境管理，程序员只需要创建它们，无需关心销毁和回收。\n3. **使用通道（channels）进行通信**：goroutine之间的同步通常通过channels进行，channels是Go语言中的一种类型安全的消息传递机制。使用channels，可以很容易地在goroutine之间传递数据和信号。\n\n### 示例\n\n下面的示例展示了如何使用goroutine和channels进行并发编程：\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\n// 函数打印传入的消息\nfunc printMessage(message string) {\n    for i := 0; i < 5; i++ {\n        fmt.Println(message)\n        time.Sleep(time.Millisecond * 100)\n    }\n}\n\nfunc main() {\n    // 创建一个新的goroutine运行printMessage函数\n    go printMessage(\"hello\")\n\n    // 主goroutine中也运行printMessage函数\n    printMessage(\"world\")\n\n    // 等待按键结束程序，避免主goroutine提前结束\n    fmt.Scanln()\n    fmt.Println(\"done\")\n}\n```\n\n在这个例子中，`printMessage`函数将在两个不同的goroutine中并发执行：一个是通过`go printMessage(\"hello\")`创建的goroutine，另一个是主goroutine。这两个goroutine将并发地运行，打印出交替的\"hello\"和\"world\"消息。\n\n总之，goroutine是实现并发编程的强大工具，它使得编写高性能并发程序在Go语言中变得既简单又高效。\n\n## 协程和线程的区别是什么\n协程（Coroutines）和线程（Threads）都是程序执行流的基本单位，它们之间有一些关键的区别和优缺点。理解这些区别有助于选择最适合特定应用需求的并发模型。\n\n### 1. 管理方式\n\n- **线程**：通常由操作系统管理。操作系统负责线程的调度和管理，线程切换涉及到上下文切换，包括保存当前线程的状态并恢复另一个线程的状态，这是一个相对昂贵的操作。\n- **协程**：由程序和运行时（runtime）管理，不直接依赖操作系统的线程管理。协程上下文切换的成本通常比线程低得多，因为这种切换是在用户态完成的，避免了内核态与用户态之间的切换开销。\n\n### 2. 资源消耗\n\n- **线程**：每个线程都有自己的堆栈和局部变量，占用的内存量相对较大。线程的数量受到系统资源的限制。\n- **协程**：通常非常轻量，拥有很小的堆栈和低资源消耗。因此，在同一程序中可以同时运行成千上万个协程。\n\n### 3. 并发模型\n\n- **线程**：多线程编程模型可以实现真正的并行执行（在多核处理器上），但线程间的同步和通信（如使用锁、信号量等）可能导致复杂的竞态条件和死锁问题。\n- **协程**：通常在单线程中运行，实现并发而非并行。协程之间的通信和同步通过使用消息传递（如Go语言的channels）或事件循环（如Python的asyncio）等机制，这些机制旨在避免传统的锁和条件变量带来的问题。\n\n### 4. 控制流\n\n- **线程**：操作系统控制线程的调度，程序员通常不能精确控制执行流的切换点。\n- **协程**：提供了更精细的控制能力，允许程序员确定何时以及如何切换任务，通过这种方式，可以更容易地编写非阻塞代码和管理并发。\n\n### 5. 使用场景\n\n- **线程**：适用于需要实现真正并行任务处理的场景，尤其是在计算密集型应用中。\n- **协程**：适合高并发、IO密集型应用，如网络服务器、异步处理任务等，能有效提高资源的利用率和程序的响应性。\n\n总结来说，线程是操作系统层面的并发执行单元，资源开销较大，适合于并行处理；而协程是更轻量级的用户态线程，它们提供了更高的并发性和更灵活的控制方式，适合于构建高并发的应用程序。正确地选择使用线程还是协程，取决于具体的应用场景和性能需求。\n\n## 假设我在go语言中开启了10个协程，它们会运行在几个线程上，几个CPU上\n在Go语言中，协程（goroutine）的运行不是直接映射到操作系统线程上的，而是由Go运行时（runtime）进行管理。Go运行时使用了M:N调度模型（多个goroutines被多路复用到较少的操作系统线程上），这意味着数千个goroutines可能只用到很少数量的操作系统线程。具体到你的问题，让我们看看这个模型的两个主要组件以及如何影响goroutines的运行：\n\n### 1. GOMAXPROCS\n\n`GOMAXPROCS`是一个环境变量，用于控制Go程序运行时可以使用的CPU核心数。默认情况下，它的值设为了你的机器上的逻辑CPU核心数。你可以通过`runtime.GOMAXPROCS()`函数查询或设置这个值。`GOMAXPROCS`决定了有多少个操作系统线程可以同时执行Go代码。\n\n### 2. 调度器\n\nGo的调度器是基于M:N模型实现的，其中：\n\n- **M** 代表操作系统线程（machine）。\n- **N** 代表goroutines。\n\n调度器的任务是将N个goroutines分配给M个操作系统线程上执行。这意味着，即使你有数千个goroutines，Go运行时也可能只使用`GOMAXPROCS`指定数量的操作系统线程来执行这些goroutines。\n\n### 运行在多少个线程和CPU上？\n\n假设你开启了10个goroutines：\n\n- **线程**：这些goroutines的实际运行可能全部在一个单独的操作系统线程上，也可能分布在多个操作系统线程上，具体取决于`GOMAXPROCS`的设置和Go调度器的决定。如果`GOMAXPROCS`的值大于1（默认情况下通常如此），那么这些goroutines有可能被调度到不同的操作系统线程上执行。\n- **CPU**：这些goroutines实际上在`GOMAXPROCS`设定的CPU核心上并发运行。如果`GOMAXPROCS`大于1，goroutines可以在多个CPU核心上并行执行。\n\n因此，如果`GOMAXPROCS`设置为大于1的值，你的10个goroutines可能会在多个线程和多个CPU上运行，具体分配由Go运行时的调度器动态管理。但要注意，goroutine到线程的具体映射以及调度行为是由Go运行时内部决定的，可能会随着Go版本和具体的运行情况而有所不同。\n\n## go的通道是无序的，这样怎么能做好并发呢\n在Go语言中，说通道（channels）是“无序的”可能会有点误导。实际上，通道本身维持着发送和接收操作的顺序：如果你按顺序发送了值A然后是值B到同一个通道，接收方也将首先接收到A，然后是B，这意味着在单个通道上，发送和接收是有序的。然而，当涉及到从多个并发发送者接收时，哪个发送者首先将消息送达到通道是不确定的，这可能导致看似“无序”的行为。\n\n当你在处理并发时，确保程序的正确性通常依赖于同步和通信机制，而Go通过通道和goroutines提供了强大的工具来帮助你做到这一点。这里有一些策略来确保你在并发程序中使用通道时能够正确地同步和顺序操作：\n\n1. **使用无缓冲通道进行同步**：无缓冲通道保证了发送操作会阻塞，直到接收操作发生，这可以用作goroutines之间的同步点。\n\n2. **使用有缓冲通道控制并发**：有缓冲通道允许在阻塞之前发送多个值。它们可以用来限制并发级别，比如通过控制同时运行的goroutines的数量。\n\n3. **关闭通道来广播消息**：关闭一个通道会通知所有的接收者没有更多的值会被发送到这个通道。这是一种广播机制，可以用来通知多个goroutine某个条件已经成立，比如终止。\n\n4. **选择语句**：`select` 语句允许你同时等待多个通道操作，并根据哪个通道准备就绪来执行相应的代码块。这可以用来处理来自多个来源的输入，同时保持逻辑上的清晰和顺序。\n\n5. **顺序控制**：当需要精确控制多个goroutine的执行顺序时，可以设计一种协议或使用一系列通道来顺序地进行操作，确保并发操作的正确顺序。\n\n通过这些机制，Go允许你构建复杂的并发程序，同时保持代码的简洁性和清晰度。正确地使用通道和goroutines，你可以有效地解决并发中的同步和顺序问题，从而实现高效且易于理解的并发逻辑。\n\n## 管道例子探究\n```go\nfunc main() {\n\ts := []int{7, 2, 8, -9, 4, 0}\n\n\tc := make(chan int)\n\tfmt.Println(s[:len(s)/2])\n\tfmt.Println(s[len(s)/2:])\n\tsum(s[:len(s)/2], c) // 17\n\tsum(s[len(s)/2:], c)\n\tx, y := <-c, <-c // 从 c 中接收\n\tfmt.Println(x, y, x+y)\n}\n```\n这样为什么不对？管道必须和goroutine搭配使用吗?\n\n---\n\n你的新代码片段中，`sum` 函数不是在goroutines中执行的，而是直接顺序执行。问题在于，在你尝试向通道 `c` 发送数据时（使用 `c <- sum` 语法），因为 `c` 是一个无缓冲的通道，发送操作会阻塞直到另一方准备好接收数据。在这种情况下，因为你的发送操作 (`c <- sum`) 发生在主goroutine中，而且没有其他并行的goroutine去接收这些值，这将导致死锁：主goroutine在等待自己向通道发送数据的操作完成，但这永远不会发生，因为没有其他并发操作去从通道中接收数据。\n\n通道确实设计为在goroutines之间进行通信的一种方式，它们非常适合用于并发编程。在单个goroutine内使用无缓冲通道进行发送和接收操作通常会导致死锁，因为无缓冲通道要求发送和接收操作几乎同时发生。\n\n简而言之，你的最后一个示例不正确，原因如下：\n\n1. **死锁**：由于 `sum` 函数调用并非在goroutines中执行，它们将顺序执行。第一个 `sum` 调用试图向通道 `c` 发送一个值，但会阻塞，因为没有其他goroutine在接收端等待这个值。程序将在第一个 `sum` 函数调用时阻塞，导致死锁。\n\n2. **通道与goroutine搭配使用**：虽然技术上不是必须将通道与goroutines搭配使用，但在实践中，这是避免死锁和实现有效并发程序的常见模式。使用无缓冲通道时，发送操作会阻塞，直到接收操作开始，反之亦然。这种机制非常适合在不同goroutines之间同步数据访问和传递消息。\n\n为了使你的程序按预期工作，你应该在goroutines中调用 `sum` 函数，并通过通道交换数据，正如之前正确的版本那样。这样，两个 `sum` 操作可以并发执行，主goroutine将等待并从通道中接收它们的结果，从而避免死锁并正确计算总和：\n\n```go\ngo sum(s[:len(s)/2], c) // 在goroutine中执行\ngo sum(s[len(s)/2:], c) // 在另一个goroutine中执行\nx, y := <-c, <-c // 从通道c中接收\n```\n\n通过这种方式，每个 `sum` 调用都在自己的goroutine中执行，并且能够独立地完成其向通道的发送操作。这避免了死锁，使主goroutine能够从通道接收两个结果并正确计算总和。\n\n---\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tch := make(chan int, 2)\n\tch <- 1\n\tch <- 2\n\tfmt.Println(<-ch)\n\tfmt.Println(<-ch)\n}\n```\n为什么这个又对了？这不是只有一个goroutine吗?\n\n你的最新示例之所以能够正确运行，是因为它使用了一个**有缓冲的通道**。与无缓冲通道不同，有缓冲通道允许在阻塞发送者或接收者之前存储一个固定数量的值。具体到你的例子中，通过 `make(chan int, 2)` 创建了一个可以存储两个整数的缓冲通道。这意味着你可以在没有任何接收者准备好接收之前，向通道发送（或“缓冲”）两个值。\n\n这段代码中的关键点是：\n\n1. `ch := make(chan int, 2)` 创建了一个有缓冲的通道，缓冲大小为2。这允许通道存储最多两个整数，直到它们被接收。\n\n2. `ch <- 1` 和 `ch <- 2` 这两行向通道发送两个整数。由于通道是有缓冲的，并且缓冲未满，这两个发送操作不会阻塞。这两个值被存储在通道的缓冲区中。\n\n3. `fmt.Println(<-ch)` 和 `fmt.Println(<-ch)` 这两行从通道中接收并打印这两个值。由于这两个值已经在通道的缓冲区中等待，接收操作立即发生，没有阻塞。\n\n在这个例子中，即使所有操作都在单个goroutine（主goroutine）中进行，程序也能正常运行，没有发生死锁。这是因为有缓冲通道提供了足够的空间来存储发送到通道中的值，直到它们被接收，从而避免了在发送操作时必须立即有一个接收者准备好接收值的需求。\n\n有缓冲通道是并发Go程序中一个非常有用的工具，允许goroutines在某种程度上独立操作，而不必在每次通信时都完全同步。然而，设计有缓冲通道的程序时需要谨慎，以避免逻辑错误或死锁，特别是当缓冲区满时或在更复杂的通信模式中。\n\n## Go支持垃圾回收吗？\n是的，Go语言支持垃圾回收（Garbage Collection，简称GC）。Go的垃圾回收器是一个实现了自动内存管理的程序部分，它负责检测并自动回收不再被程序使用的内存空间，从而防止内存泄漏。这意味着在Go中，开发者不需要（也不能）手动管理内存的分配和回收，大大简化了编程工作，减少了内存泄漏和其他与手动内存管理相关的错误。\n\nGo的垃圾回收器设计为“非阻塞式”的，意味着它尽量减少对程序执行的干扰。从Go 1.5版本开始，引入了并发的、三色标记清除算法，该算法允许垃圾收集过程在大部分时间与程序的其他部分并发执行，减少了垃圾收集对程序性能的影响。尽管如此，垃圾收集过程仍然会引入一定的延迟，这在极少数延迟敏感的应用中可能成为一个考虑因素。\n\nGo的运行时系统还包括其他几个与性能和资源管理相关的特性，如goroutine的调度和网络轮询器，它们一起确保了Go程序的高性能和高效的资源使用。开发者可以使用内置的分析工具（如pprof）来监视和优化程序的内存使用，以及诊断性能问题。\n\n## 如果Go 代码会被预先编译成原生的机器码，那么它在运行的时候怎么和runtime结合呢\n\nGo语言确实编译成原生机器码，这意味着Go程序在执行时不需要依赖于虚拟机，它们直接由操作系统调度。尽管如此，Go的执行模型和运行时（runtime）系统包括了许多复杂的功能，如垃圾回收（GC）、goroutine调度、通道通信、反射以及更多。这些功能的实现是预先集成在每个Go程序中的，部分原因是Go的编译器和链接器在构建最终的可执行文件时会自动包含运行时。\n\n这里是Go运行时和编译后的机器码结合的一些关键方式：\n\n1. **运行时包含**：当Go程序被编译时，运行时代码被静态链接到最终的二进制中。这包括了垃圾回收器、goroutine调度器等核心功能的实现。因此，即使Go代码被编译成了原生机器码，运行时的功能也被内嵌于程序中，随程序一起运行。\n\n2. **初始化运行时**：在Go程序启动时，它的入口点不是 `main.main` 函数。实际上，程序开始执行于运行时的初始化代码，该代码负责设置运行时环境，包括初始化内存管理器、启动垃圾回收器、创建主goroutine等。只有在这些准备工作完成之后，`main.main` 函数才会被调用。\n\n3. **goroutine调度**：Go语言的并发模型基于goroutines。运行时包含一个调度器，它在用户态模拟多线程环境，允许成千上万的goroutines伪并行地运行在较少的操作系统线程上。编译后的代码中包含与运行时交互的指令，这些指令使得goroutines能被合适地调度和管理。\n\n4. **内置函数调用运行时**：一些Go的内置函数，如 `make`、`new`，以及用于map、切片和通道操作的函数，实际上是对运行时系统的直接调用。这些函数的实现是在运行时代码中，而非Go的标准库中。\n\n5. **接口和反射**：Go的接口和反射机制也依赖于运行时的支持。运行时维护了类型信息，允许程序在运行时查询和操作类型，这是动态语言特性的一个重要基础。\n\n总的来说，虽然Go代码被编译成原生机器码，但通过将运行时的功能静态链接到每个程序、在程序启动时初始化运行时环境、以及在需要时通过编译后的代码调用运行时支持的机制，Go程序能够实现高级的语言特性，同时保持高性能和跨平台的兼容性。\n\n## Go语言中变量的生命周期\nGo语言中变量的生命周期是由变量能够被程序访问的时间段定义的。理解变量的生命周期对于编写高效和无内存泄漏的程序至关重要。在Go中，变量的生命周期取决于它是如何声明的，主要分为两种情况：在堆（heap）上和在栈（stack）上。\n\n### 栈上的变量\n\n栈上的变量通常具有短暂的生命周期。当声明一个局部变量时，它通常位于栈上，其生命周期与包含它的函数调用的生命周期相匹配。当函数被调用时，局部变量被创建；当函数返回时，这些局部变量被销毁。这意味着栈上的变量的生命周期是由它们所在的函数的执行时间来决定的。\n\n### 堆上的变量\n\n堆上的变量有一个更长久的生命周期。当你使用`new`函数或者复合字面量（如切片、映射、通道等）创建一个变量，而这个变量的引用逃逸到函数外部时，这个变量就会在堆上分配。堆上的变量的生命周期不由单个函数调用控制，而是由是否仍然可达（即程序的其他部分是否还有指向该变量的引用）来决定。只要变量可达，它就会继续存在。当变量变得不可达时，它最终会被垃圾回收器回收。\n\n### 变量生命周期的决定因素\n\n- **编译器优化**：Go编译器有时会做出决策，将本应在堆上分配的变量改为在栈上分配，如果它能确定变量的生命周期在函数范围内结束。这种优化减少了垃圾回收的负担。\n- **逃逸分析**：Go编译器执行逃逸分析来决定变量应该分配在堆还是栈上。如果函数内部创建的变量在函数外部仍然被引用（即“逃逸”到函数外部），则这些变量需要在堆上分配，以保证它们在函数返回后仍然存在。\n\n理解变量的生命周期对于优化Go程序的性能和内存使用非常重要。例如，过度使用堆分配可能会导致频繁的垃圾回收，从而影响程序性能。通过适当的变量作用域控制和利用栈分配，可以提高程序效率。\n\n## Go 常量\n在 Go 语言中，常量是一个简单值的标识符，在程序运行时，其值不会被修改。常量可以是字符、字符串、布尔或数字类型的值。\n\n定义常量的基本语法如下：\n\n```go\nconst name [type] = value\n```\n\n- `const` 关键字用于声明常量。\n- `name` 是常量的名称。\n- `type` 是可选的，指定常量的类型。\n- `value` 是常量的值。\n\n### 示例\n\n```go\nconst Pi = 3.14\n```\n\n在这个例子中，`Pi` 是一个常量，其值为 `3.14`。\n\n### 常量的类型\n\n在 Go 中，常量可以是任何基本类型，如整型、浮点型、布尔型、字符串等。如果在声明常量时没有指定类型，Go 语言会根据常量的值推导出其类型。\n\n### iota\n\nGo 语言的 `iota` 关键字用于生成一组以递增整数形式表示的常量，通常用于声明一个枚举。`iota` 在 `const` 关键字出现时被重置为 0，然后在每声明一个常量时自动递增。\n\n```go\nconst (\n    a = iota // a == 0\n    b        // b == 1\n    c        // c == 2\n)\n```\n\n在这个例子中，`a`、`b`、`c` 分别被赋予了递增的整数值 0、1、2。\n\n### 未类型化常量\n\n在 Go 中，可以声明未类型化的常量，这意味着常量没有明确的类型。未类型化常量提供了更高的精度，并可以根据上下文转换为需要的类型。\n\n### 使用常量\n\n常量可以用在任何变量可以使用的地方。使用常量可以提高代码的可读性和维护性。\n\n总之，Go 语言中的常量是一个非常有用的特性，它允许你在程序中使用固定的值，而不担心这些值会被改变。通过使用 `const` 关键字和 `iota` 生成器，你可以方便地声明和管理常量。\n\n## Go 创建新结构体\n在 Go 语言中，结构体（struct）是一种将多个不同类型的变量组织到一个名字下的复合数据类型，常用于定义和创建数据实体。创建新结构体涉及两个步骤：定义结构体类型和实例化该类型的变量。\n\n### 步骤 1：定义结构体类型\n\n定义结构体类型使用 `type` 和 `struct` 关键字。结构体类型通常在函数外部定义，以便可以在不同函数间共享。\n\n```go\ntype Person struct {\n    Name string\n    Age  int\n}\n```\n\n在这个例子中，我们定义了一个名为 `Person` 的结构体，它有两个字段：`Name` 和 `Age`。\n\n### 步骤 2：实例化结构体\n\n一旦定义了结构体类型，你就可以创建该类型的实例了。有几种不同的方式来实例化结构体。\n\n#### 方法 1：使用 `new` 关键字\n\n`new` 关键字可以用来创建一个指向结构体类型的新实例的指针。此方法会分配内存并将结构体的字段初始化为零值。\n\n```go\np1 := new(Person)\np1.Name = \"Alice\"\np1.Age = 30\n```\n\n#### 方法 2：使用结构体字面量\n\n结构体字面量允许在一个表达式中创建结构体实例，并同时初始化其字段。\n\n- **命名字段方式**：\n\n```go\np2 := Person{Name: \"Bob\", Age: 25}\n```\n\n- **按字段顺序初始化**（不推荐，因为添加或修改字段时易出错）：\n\n```go\np3 := Person{\"Charlie\", 28}\n```\n\n#### 方法 3：使用指针和结构体字面量\n\n你也可以直接创建一个指向结构体实例的指针，并初始化其字段。\n\n```go\np4 := &Person{Name: \"Diana\", Age: 32}\n```\n\n### 示例\n\n```go\npackage main\n\nimport \"fmt\"\n\ntype Person struct {\n    Name string\n    Age  int\n}\n\nfunc main() {\n    // 使用 new 关键字\n    p1 := new(Person)\n    p1.Name = \"Alice\"\n    p1.Age = 30\n\n    // 使用结构体字面量\n    p2 := Person{Name: \"Bob\", Age: 25}\n\n    // 使用指针和结构体字面量\n    p3 := &Person{Name: \"Charlie\", Age: 28}\n\n    fmt.Println(*p1)\n    fmt.Println(p2)\n    fmt.Println(*p3)\n}\n```\n\n这个例子展示了不同的方式来创建和初始化结构体 `Person` 的实例。选择哪种方式取决于具体情况，比如是否需要在初始化时立即设置字段值，或者是否需要操作结构体指针。\n\n## Go切片append\n在 Go 语言中，切片（slice）是一个动态数组，它提供了一种灵活、强大的方式来管理数据集合。尽管 Go 语言的切片类型没有直接提供 `push back` 的方法（类似于其他语言中的数组或列表的 append 功能），但可以使用内建的 `append` 函数来实现向切片末尾添加元素的效果。\n\n### 使用 `append` 函数添加元素\n\n`append` 函数可以将一个或多个新的元素添加到切片的末尾，并返回一个包含了这些新元素的新切片。如果原始切片有足够的容量来存储新增的元素，`append` 会直接在原切片的末尾添加这些元素。否则，它会自动分配一个新的底层数组，将原切片的元素和新元素一起复制到这个新数组中，然后返回这个新数组的切片表示。\n\n### 示例\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    // 创建一个整数切片\n    slice := []int{1, 2, 3}\n\n    // 向切片末尾添加一个元素\n    slice = append(slice, 4)\n\n    // 向切片末尾添加多个元素\n    slice = append(slice, 5, 6, 7)\n\n    fmt.Println(slice)\n}\n```\n\n输出将是：\n\n```\n[1 2 3 4 5 6 7]\n```\n\n### 注意事项\n\n- **容量自动扩展**：`append` 操作可能会导致切片的容量增加。如果原切片的底层数组没有足够的空间来存放新添加的元素，Go 语言运行时会自动分配一个新的、更大的数组，并将原切片的元素以及新元素一起复制到这个新数组中。\n- **返回值**：不要忘记 `append` 函数返回的是更新后的切片。你需要用返回的切片来更新你的切片变量，否则添加的新元素不会被保存。\n\n通过上面的示例和说明，你可以看到在 Go 语言中，虽然没有直接的 `push back` 函数或方法，但是通过使用 `append` 函数，我们可以轻松实现向切片末尾添加新元素的功能。\n\n## Go 切片怎样自动扩展\n在 Go 语言中，切片的自动扩展是通过内建的 `append` 函数来实现的。当你向一个切片添加元素，而该切片的底层数组没有足够的空间容纳更多元素时，`append` 会自动处理切片的扩容。这个过程涉及到分配一个新的底层数组，并将原有元素以及新添加的元素复制到这个新数组中。切片的容量（capacity）是指底层数组能够容纳的元素总数。\n\n### 扩容机制\n\n当使用 `append` 向切片添加元素，导致切片的长度超过其容量时，Go 语言运行时会自动进行如下步骤：\n\n1. **分配一个新的底层数组**：新数组的容量通常是原数组容量的两倍，但这个增长因子可能根据添加的元素数量和切片的当前容量而变化，尤其是在切片的容量非常大或者添加了多个元素的情况下。\n2. **复制原有元素到新数组**：原切片的元素会被复制到新的底层数组中。\n3. **添加新元素**：新的元素会被添加到复制的元素之后。\n4. **返回新切片**：函数返回新的切片，这个切片引用了新的底层数组，并更新了其长度和容量。\n\n### 示例代码\n\n下面的示例演示了如何通过 `append` 自动扩展切片的容量。\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    slice := make([]int, 0, 2) // 创建一个初始容量为2的切片\n\n    // 打印初始切片的长度和容量\n    fmt.Printf(\"Initial: Length=%d, Capacity=%d\\n\", len(slice), cap(slice))\n\n    // 向切片添加元素，超过其初始容量\n    for i := 1; i <= 5; i++ {\n        slice = append(slice, i)\n        // 打印每次添加元素后切片的长度和容量\n        fmt.Printf(\"After appending %d: Length=%d, Capacity=%d\\n\", i, len(slice), cap(slice))\n    }\n}\n```\n\n在这个示例中，初始切片的容量是2，但是随着元素的添加，切片的容量会自动增长，以容纳更多的元素。你会注意到，每当切片的容量不足以添加更多元素时，其容量会增加，通常是翻倍，尽管具体的增长策略可能会有所不同。\n\n### 注意事项\n\n- **性能考虑**：虽然 `append` 可以自动扩展切片的容量，但频繁地重新分配内存和复制数据可能会影响性能。如果你预先知道大概需要多少容量，使用 `make` 预分配一个足够大的切片可能会更高效。\n- **扩容策略**：Go 语言的切片扩容策略可能会因版本和具体实现而略有差异。通常，对于较小的切片，扩容会翻倍其容量；对于较大的切片，增长因子可能会小于2，以减少因为扩容而浪费的内存。\n\n## Go 实现stack 和 queue\n在 Go 语言中，没有内置的栈（Stack）和队列（Queue）数据结构，但是可以使用切片（Slice）非常容易地实现它们。切片提供了灵活的操作，如 `append` 函数和切片操作，使得实现栈和队列成为可能。\n\n### 栈（Stack）\n\n栈是一种后进先出（LIFO, Last In First Out）的数据结构，主要操作有：\n\n- **Push**：将一个元素放入栈顶。\n- **Pop**：从栈顶移除一个元素。\n\n#### 实现栈\n\n```go\npackage main\n\nimport \"fmt\"\n\ntype Stack []int\n\n// Push 添加一个元素到栈顶\nfunc (s *Stack) Push(v int) {\n    *s = append(*s, v)\n}\n\n// Pop 从栈顶移除一个元素\nfunc (s *Stack) Pop() int {\n    if len(*s) == 0 {\n        fmt.Println(\"Stack is empty!\")\n        return -1 // 返回 -1 表示栈为空\n    }\n    index := len(*s) - 1    // 获取栈顶元素索引\n    element := (*s)[index]  // 获取栈顶元素\n    *s = (*s)[:index]       // 移除栈顶元素\n    return element\n}\n\nfunc main() {\n    var stack Stack\n\n    stack.Push(1)\n    stack.Push(2)\n    stack.Push(3)\n\n    fmt.Println(stack.Pop()) // 输出: 3\n    fmt.Println(stack.Pop()) // 输出: 2\n    fmt.Println(stack.Pop()) // 输出: 1\n}\n```\n\n### 队列（Queue）\n\n队列是一种先进先出（FIFO, First In First Out）的数据结构，主要操作有：\n\n- **Enqueue**：在队列末尾添加一个元素。\n- **Dequeue**：从队列开头移除一个元素。\n\n#### 实现队列\n\n```go\npackage main\n\nimport \"fmt\"\n\ntype Queue []int\n\n// Enqueue 在队列末尾添加一个元素\nfunc (q *Queue) Enqueue(v int) {\n    *q = append(*q, v)\n}\n\n// Dequeue 从队列开头移除一个元素\nfunc (q *Queue) Dequeue() int {\n    if len(*q) == 0 {\n        fmt.Println(\"Queue is empty!\")\n        return -1 // 返回 -1 表示队列为空\n    }\n    element := (*q)[0]    // 获取队列开头元素\n    *q = (*q)[1:]         // 移除队列开头元素\n    return element\n}\n\nfunc main() {\n    var queue Queue\n\n    queue.Enqueue(1)\n    queue.Enqueue(2)\n    queue.Enqueue(3)\n\n    fmt.Println(queue.Dequeue()) // 输出: 1\n    fmt.Println(queue.Dequeue()) // 输出: 2\n    fmt.Println(queue.Dequeue()) // 输出: 3\n}\n```\n\n在这些示例中，我们使用了切片和其操作来实现栈和队列的基本功能。这两种数据结构在实际应用中非常有用，特别是在需要特定数据处理顺序的场合。通过简单的方法，Go 语言使得实现这些数据结构变得既简单又直接。\n\n## make函数在Go中的作用\n在 Go 语言中，`make` 函数是一个特殊的内置函数，它被用来初始化并分配内存给内置的数据类型，如切片（slice）、映射（map）和通道（channel）。不同于 `new` 函数，`make` 返回的是类型的初始化值，而不是指向该值的指针。`make` 的使用对于这些复合类型的正确初始化和使用是必要的，因为它们需要在内存中进行特定的布局和初始化。\n\n### 作用\n\n1. **切片（Slice）**：\n   - `make` 用于创建一个具有指定长度和容量的切片。如果未指定容量，那么容量将与长度相同。\n   - 使用 `make` 创建切片可以直接使用，无需担心初始值，因为所有元素都会被初始化为其类型的零值。\n   - 示例：`s := make([]int, 5, 10)` 创建了一个长度为 5，容量为 10 的 `int` 类型切片 `s`。\n\n2. **映射（Map）**：\n   - `make` 用于创建一个映射，并分配足够的内存，以便它可以开始存储键值对。创建的映射将为空，没有任何键值对。\n   - 使用 `make` 可以确保返回的映射是可用的，避免了将 `nil` 映射用于赋值或操作的错误。\n   - 示例：`m := make(map[string]int)` 创建了一个键类型为 `string`，值类型为 `int` 的空映射 `m`。\n\n3. **通道（Channel）**：\n   - `make` 用于创建一个通道，并指定其可以存储的值的类型以及（可选的）缓冲大小。\n   - 创建通道后，可以在协程（goroutines）之间用于通信和同步。\n   - 示例：`ch := make(chan int, 5)` 创建了一个可以存储 `int` 类型值，且有 5 个缓冲空间的通道 `ch`。\n\n### 语法\n\n```go\nmake(T, size, ...optional capacity)\n```\n\n- `T`：要创建的类型（切片、映射或通道）。\n- `size`：对于切片，它是长度（length）；对于通道，它是缓冲大小（buffer capacity）。对于映射，此参数通常省略，因为映射的大小是动态增长的。\n- `optional capacity`：可选，仅用于切片，指定切片的容量（capacity）。如果省略，容量将与长度相同。\n\n### 注意\n\n- 使用 `make` 初始化的数据结构（切片、映射、通道）可以直接使用，而无需进一步的分配或初始化。\n- 对于其他类型，如自定义结构体或基本数据类型，应使用 `new` 函数或字面量构造进行初始化。\n- `make` 仅适用于切片、映射和通道，尝试用于其他类型将导致编译错误。\n\n通过正确使用 `make` 函数，Go 程序员可以确保他们的数据结构被正确初始化，准备好安全地用于后续操作。\n\n## go中怎么样实现Equaler接口\n在Go语言中，实现一个`Equaler`接口主要涉及到定义一个接口，该接口包含一个方法，用于比较两个对象是否相等。这样的接口可以被任何想要支持等值比较操作的类型实现。下面是如何定义和实现这样一个`Equaler`接口的示例：\n\n### 步骤 1: 定义`Equaler`接口\n\n首先，你需要定义`Equaler`接口。通常，这个接口会包含一个`Equal`方法，这个方法接受另一个相同类型的对象作为参数，并返回一个布尔值，表示这两个对象是否相等。\n\n```go\npackage main\n\n// Equaler 接口定义了一个方法 Equal，任何实现了这个接口的类型\n// 都必须提供 Equal 方法的具体实现。\ntype Equaler interface {\n    Equal(other Equaler) bool\n}\n```\n\n### 步骤 2: 实现`Equaler`接口\n\n然后，你可以为你自己的类型实现`Equaler`接口。假设你有一个`Point`类型，你想要比较两个`Point`实例是否相等。\n\n```go\npackage main\n\nimport \"math\"\n\n// Point 表示一个二维点。\ntype Point struct {\n    X, Y float64\n}\n\n// Equal 实现了 Equaler 接口，用于比较两个 Point 是否相等。\n// 这里的other参数需要被类型断言为*Point，以便进行比较。\nfunc (p *Point) Equal(other Equaler) bool {\n    otherPoint, ok := other.(*Point)\n    if !ok {\n        return false\n    }\n    return math.Abs(p.X-otherPoint.X) < 0.001 && math.Abs(p.Y-otherPoint.Y) < 0.001\n}\n```\n\n### 注意事项\n\n- 在`Equal`方法中，参数`other`被定义为`Equaler`类型。这允许方法接受任何实现了`Equaler`接口的类型。然而，在实际的比较中，你通常需要将`other`类型断言为你需要比较的具体类型（在这个例子中是`*Point`），以便能够访问该类型的字段。\n- 使用类型断言（`otherPoint, ok := other.(*Point)`）时，需要处理断言失败的情况。如果断言失败，表示`other`不是一个`*Point`实例，此时应当返回`false`。\n- 比较浮点数时使用了一个小的容忍度值（`0.001`）来判断两个点是否相等。这是因为直接比较浮点数可能会因为精度问题而导致不准确的比较结果。\n\n通过这种方式，你可以为任何类型实现`Equaler`接口，只要提供了一个适当的`Equal`方法即可。这种接口抽象允许你编写更通用、更灵活的代码，因为你可以编写依赖于`Equaler`接口的函数或方法，而不是依赖于特定的类型。\n\n## go中能否让自定义的类型也可以使用==来比较\n在Go语言中，使用`==`运算符来比较两个值是否相等的能力是内建的，且适用于所有基本类型（如`int`、`float64`、`string`等）和一些复合类型（如数组）。对于自定义的类型，能否使用`==`取决于该类型的底层类型：\n\n1. **基本类型和结构体**：如果你的自定义类型是基于基本类型的（例如通过`type`关键字定义的新类型），那么可以直接使用`==`进行比较，因为这种比较是对其底层类型进行的。对于结构体，如果所有字段都可以比较，则可以使用`==`来比较两个结构体实例是否相等。\n\n2. **切片、映射和函数类型**：对于这些类型，即使是作为自定义类型的底层类型，也不能使用`==`进行比较（切片、映射、函数只能和`nil`进行比较）。尝试这样做会导致编译错误。\n\n### 示例\n\n- **基于基本类型的自定义类型**：\n\n```go\npackage main\n\nimport \"fmt\"\n\ntype MyInt int\n\nfunc main() {\n    var a MyInt = 5\n    var b MyInt = 5\n    fmt.Println(a == b) // 输出: true\n}\n```\n\n这里，`MyInt`是基于`int`类型的自定义类型，所以可以使用`==`来比较。\n\n- **结构体类型**：\n\n```go\npackage main\n\nimport \"fmt\"\n\ntype Point struct {\n    X, Y int\n}\n\nfunc main() {\n    p1 := Point{X: 1, Y: 2}\n    p2 := Point{X: 1, Y: 2}\n    fmt.Println(p1 == p2) // 输出: true\n}\n```\n\n在这个例子中，`Point`是一个结构体类型，由于它的所有字段都是可以比较的类型，所以两个`Point`类型的实例可以使用`==`进行比较。\n\n总结来说，是否可以使用`==`来比较自定义类型的值取决于该类型的底层类型以及是否满足Go语言中`==`运算符适用的类型约束。对于复杂类型或需要更灵活的比较逻辑的情况，通常会实现一个比较函数或方法，如上一条回答中所述的`Equaler`接口实现。\n\n## append是不是永远不会改变传入的切片的值\n`append`函数在Go语言中的行为有一些特点需要理解，尤其是关于它如何影响传入的切片的值。`append`操作本身不会直接修改传入的切片的元素。但是，它可能会改变切片的长度和容量，以及返回一个可能指向新数组的切片。这里有几个关键点需要注意：\n\n1. **不修改原切片元素**：`append`不会改变原有切片中的元素值。如果`append`操作不导致扩容，添加的元素会出现在原有元素之后。\n\n2. **可能返回新的切片**：如果`append`操作导致了切片扩容（即，需要更多的容量来容纳新元素），Go将分配一个新的数组，并将原切片的元素以及新添加的元素复制到这个新数组中。这时，`append`返回的切片将指向这个新的数组，而原来的切片仍指向原来的数组。\n\n3. **不改变原切片引用**：重要的是，无论`append`操作是否导致扩容，它都不会更改传入切片本身的引用。换句话说，`append`函数对原切片的修改是通过返回一个新的切片实现的，而不是直接修改传入的切片变量。\n\n### 例子\n\n下面的例子展示了`append`如何工作，以及它是如何影响切片的：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    originalSlice := []int{1, 2, 3}\n    fmt.Println(\"Original slice:\", originalSlice)\n\n    // Append without capacity overflow\n    modifiedSlice := append(originalSlice, 4)\n    fmt.Println(\"Modified slice:\", modifiedSlice)\n    fmt.Println(\"Original slice after append:\", originalSlice)\n\n    // Append that causes capacity overflow\n    for i := 5; i <= 10; i++ {\n        modifiedSlice = append(modifiedSlice, i)\n    }\n    fmt.Println(\"Modified slice after more appends:\", modifiedSlice)\n    fmt.Println(\"Original slice remains unchanged:\", originalSlice)\n}\n```\n\n在这个例子中，`originalSlice`在初次`append`后仍指向原来的数组，`modifiedSlice`可能也指向同一个数组（如果没有超出容量）或者指向一个新的数组（如果执行了扩容）。通过连续的`append`操作，最终`modifiedSlice`将指向一个不同的、更大的数组，而`originalSlice`保持不变，仍然指向最初的数组。\n\n综上所述，`append`操作不会改变传入切片的值或其指向的数组中的元素，但它会根据需要扩容的情况返回一个新的切片，这个新切片可能指向一个新的底层数组。\n\n## go 什么时候用make\n在Go语言中，`nil`是一个预定义的标识符，用于表示指针、通道、函数、接口、映射或切片类型的零值。简而言之，`nil`用于表示一个未初始化的引用或一个空的引用。以下是`nil`在不同上下文中的含义和作用：\n\n1. **指针**：对于指针类型，`nil`表示没有指向任何对象的指针。\n2. **切片**：对于切片类型，`nil`表示没有分配空间的切片。一个`nil`切片的长度和容量都是0，但它不等同于空切片（例如`[]int{}`）。\n3. **映射**：对于映射类型，`nil`表示没有分配空间的映射。尝试向一个`nil`映射添加键值对会引发运行时panic。\n4. **通道**：对于通道类型，`nil`表示没有分配空间的通道。向`nil`通道发送或从中接收会永远阻塞。\n5. **函数**：对于函数类型，`nil`可以表示一个没有被赋予任何实际函数的函数变量。\n6. **接口**：对于接口类型，`nil`表示没有绑定实现的接口。一个`nil`接口既没有存储任何值，也没有具体类型。\n\n### 为什么需要`nil`？\n\n`nil`的存在使得Go语言的错误处理和资源管理变得更加灵活和简洁。以下是一些使用`nil`的理由：\n\n- **区分初始化状态**：通过检查一个变量是否为`nil`，可以轻松判断出该变量是否已经初始化。这在处理可选的或者延迟初始化的资源时非常有用。\n- **简化错误处理**：在Go中，返回错误的惯用方式是返回一个值和一个`error`类型的值。如果没有错误发生，这个`error`类型的值通常会被设置为`nil`，这样调用者就可以通过检查`error`是否为`nil`来判断操作是否成功。\n- **节省资源**：`nil`切片和`nil`映射在没有分配内存之前不占用额外的内存，这允许开发者在不需要立即使用这些类型的情况下，延迟内存分配，从而更有效地使用资源。\n\n总之，`nil`在Go语言中扮演着重要的角色，它不仅帮助标识变量的初始化状态，还参与错误处理和资源管理，使代码更加简洁和高效。\n\n## 为什么map需要make\n在Go语言中，映射（map）是一种内建的数据类型，用于存储键值对的集合。映射的键可以是任何可比较的类型，例如整数、字符串等。映射的特性使其成为存储和检索数据的强大工具。然而，与其他一些语言不同，Go的映射需要通过`make`函数进行初始化才能使用，原因包括：\n\n1. **内存分配**：映射在Go中是引用类型，这意味着当你声明一个映射变量时，变量本身并不直接包含数据，而是指向数据所在的内存地址。使用`make`函数初始化映射可以为其分配内存空间，从而使映射准备好存储键值对。如果不通过`make`进行初始化，映射变量将是`nil`，试图向其添加数据将导致运行时panic。\n\n2. **避免`nil`映射的错误**：直接使用未经初始化的`nil`映射进行赋值操作会导致运行时错误，因为`nil`映射没有分配内存空间，无法存储任何数据。通过`make`函数创建映射，你可以确保映射已经准备好接收数据，避免这种类型的错误。\n\n3. **性能优化**：使用`make`函数初始化映射时，可以选择性地指定初始容量，这有助于提高映射操作的效率。指定一个接近或等于预期存储元素数量的初始容量可以减少映射在存储数据时需要进行的内存重新分配的次数，从而提高性能。\n\n   示例：\n   ```go\n   m := make(map[string]int, 100) // 创建一个初始容量为100的映射\n   ```\n\n简而言之，通过`make`初始化映射是为了为其分配内存，确保映射在使用前是非`nil`的，从而可以安全地添加或访问键值对。此外，`make`还提供了一种方式来优化映射的内存使用和性能。\n\n## 如何复制一个map\n在Go语言中，没有直接复制一个映射（map）的内建方法，因为映射是引用类型。如果你想复制一个映射，需要手动创建一个新映射并将原映射中的所有键值对复制到新映射中。这可以通过遍历原映射并将每个键值对添加到新映射来实现。以下是一个如何复制映射的示例：\n\n```go\nfunc CopyMap(originalMap map[string]int) map[string]int {\n    // 创建一个新的映射，用于存储复制的键值对\n    newMap := make(map[string]int)\n\n    // 遍历原映射，复制每个键值对到新映射\n    for key, value := range originalMap {\n        newMap[key] = value\n    }\n\n    // 返回新的映射副本\n    return newMap\n}\n```\n\n在这个例子中，`CopyMap`函数接受一个`map[string]int`类型的映射作为参数，创建一个新的同类型映射，并遍历原映射，将所有键值对复制到新映射中。最后，函数返回这个新映射，实现了映射的复制。\n\n需要注意的是，这种复制方法是浅复制（shallow copy），意味着如果映射的值是指针或包含指针的复杂类型（如切片、映射等），那么复制的是指针本身，而不是它指向的数据。如果需要深复制（deep copy）这样的值，你需要实现更复杂的逻辑来复制指针指向的数据，而不仅仅是指针本身。\n\n## go实现stack\n在Go语言中，可以使用切片（slice）来实现一个栈（stack）。栈是一种后进先出（LIFO）的数据结构，支持两个基本操作：push（向栈中添加一个元素）和pop（从栈中移除最顶端的元素）。下面是如何使用切片实现栈的一个简单例子：\n\n```go\npackage main\n\nimport \"fmt\"\n\n// Stack 表示栈的结构体\ntype Stack struct {\n    elements []int // 使用切片存储栈元素\n}\n\n// NewStack 创建并返回一个空栈\nfunc NewStack() *Stack {\n    return &Stack{[]int{}}\n}\n\n// Push 向栈中添加一个元素\nfunc (s *Stack) Push(element int) {\n    s.elements = append(s.elements, element)\n}\n\n// Pop 从栈中移除最顶端的元素并返回该元素\n// 如果栈为空，返回0和一个错误\nfunc (s *Stack) Pop() (int, error) {\n    if len(s.elements) == 0 {\n        return 0, fmt.Errorf(\"stack is empty\")\n    }\n    // 获取栈顶元素\n    topElement := s.elements[len(s.elements)-1]\n    // 移除栈顶元素\n    s.elements = s.elements[:len(s.elements)-1]\n    return topElement, nil\n}\n\n// IsEmpty 检查栈是否为空\nfunc (s *Stack) IsEmpty() bool {\n    return len(s.elements) == 0\n}\n\n// Size 返回栈的大小\nfunc (s *Stack) Size() int {\n    return len(s.elements)\n}\n\nfunc main() {\n    stack := NewStack()\n    stack.Push(1)\n    stack.Push(2)\n    fmt.Println(stack.Pop()) // 输出：2 <nil>\n    fmt.Println(stack.IsEmpty()) // 输出：false\n    fmt.Println(stack.Size()) // 输出：1\n}\n```\n\n这个例子中，`Stack`类型使用一个`int`类型的切片来存储栈元素。`Push`方法通过`append`函数将一个新元素添加到切片的末尾，实现了向栈中添加元素。`Pop`方法检查栈是否为空，如果不为空，则移除并返回切片的最后一个元素，模拟了从栈中移除元素的操作。此外，`IsEmpty`和`Size`方法分别用于检查栈是否为空和获取栈的大小。\n\n这个栈的实现是泛型的基础版本，只能存储`int`类型的元素。如果需要一个能够存储任何类型元素的栈，可以考虑使用`interface{}`类型代替`int`，或者使用Go 1.18及以上版本引入的泛型特性来实现。\n\n## go语言new的作用\n在Go语言中，`new`是一个内置的函数，用于分配并初始化一个类型的空间，并返回指向这个新分配空间的指针。`new(T)`将分配类型`T`的零值内存空间，并返回一个指向该空间的指针，其类型为`*T`，其中`T`表示任意给定的类型。使用`new`分配的空间被初始化为类型的零值，例如，数值类型的零值是`0`，布尔类型的零值是`false`，指针类型的零值是`nil`等。\n\n### 使用`new`的示例\n\n假设你有一个简单的结构体：\n\n```go\ntype MyStruct struct {\n    Field1 int\n    Field2 string\n}\n```\n\n你可以使用`new`来创建这个结构体的一个实例：\n\n```go\nms := new(MyStruct)\n```\n\n这行代码将分配`MyStruct`的内存，并将`ms`初始化为指向这块内存的指针。由于使用了`new`，`MyStruct`中的字段`Field1`和`Field2`会被初始化为它们各自类型的零值，即`Field1`为`0`，`Field2`为`\"\"`（空字符串）。\n\n### `new`与复合字面量的区别\n\n虽然`new`可以用来创建类型的实例并获取其指针，Go语言还提供了另一种创建并初始化类型实例的方法，即使用复合字面量（composite literals）：\n\n```go\nms := &MyStruct{}\n```\n\n这种方法不仅创建了`MyStruct`的实例，并将其初始化为零值，还返回了指向这个实例的指针，类似于`new(MyStruct)`的作用。不过，复合字面量还允许你在创建实例的同时初始化字段值：\n\n```go\nms := &MyStruct{Field1: 10, Field2: \"Hello\"}\n```\n\n### 总结\n\n`new`函数在Go中用于分配并初始化一个类型的零值实例，并返回指向这个实例的指针。尽管`new`在某些情况下很有用，但在Go中，使用复合字面量初始化结构体及其指针更加常见，因为这种方法更灵活，可以直接在创建实例时初始化字段。\n\n## go range 本质\n在Go语言中，`range`是一个用于迭代各种集合元素的关键字，包括数组、切片、映射、字符串和通道（channel）。`range`的本质是提供了一种简洁的语法来遍历容器类型的元素，而具体的迭代逻辑是根据被迭代对象的类型而内置在Go语言中的。下面是`range`用法的一些关键点，帮助理解其本质：\n\n### 1. 数组和切片\n\n当使用`range`迭代数组或切片时，它会返回每个元素的索引和该索引处的值的副本。因为是副本，所以在迭代过程中修改这些值不会影响到原数组或切片中的元素。\n\n```go\nslice := []int{1, 2, 3}\nfor i, v := range slice {\n    fmt.Println(i, v) // i 是索引，v 是该索引处的值的副本\n}\n```\n\n### 2. 映射（Map）\n\n迭代映射时，`range`返回每个键值对的键和值。由于映射的迭代顺序是不确定的，每次迭代同一个映射可能会得到不同的顺序。\n\n```go\nm := map[string]int{\"a\": 1, \"b\": 2}\nfor k, v := range m {\n    fmt.Println(k, v) // k 是键，v 是对应的值\n}\n```\n\n### 3. 字符串\n\n对于字符串，`range`迭代的是Unicode字符（rune），而不是字节。它返回当前字符的字节索引（不一定连续，因为Unicode字符可能占多个字节）和字符本身的rune值。\n\n```go\ns := \"Go语言\"\nfor i, r := range s {\n    fmt.Println(i, r) // i 是rune的起始字节索引，r 是rune值\n}\n```\n\n### 4. 通道（Channel）\n\n当从通道中迭代时，`range`会连续从通道接收值，直到通道被关闭。\n\n```go\nc := make(chan int)\ngo func() {\n    c <- 1\n    c <- 2\n    close(c)\n}()\nfor v := range c {\n    fmt.Println(v) // v 是从通道接收到的值\n}\n```\n\n### 本质理解\n\n`range`的本质是语法糖，它为不同的集合类型提供了一种统一的迭代接口。在底层，Go语言根据被迭代对象的类型执行相应的迭代逻辑。这种设计简化了遍历数据结构的代码，使得开发者可以使用相同的语法模式来迭代不同类型的集合，而无需担心每种类型背后具体的迭代实现细节。\n\n## go string如何push_back\n在Go语言中，字符串（`string`）是不可变的，这意味着一旦一个字符串被创建，它所包含的内容就不能被修改了。因此，Go中的字符串没有类似C++中`std::string`的`push_back`方法来直接在字符串的末尾添加一个字符。但是，你可以通过字符串连接的方式来“添加”字符或者另一个字符串到现有字符串的末尾，从而实现类似`push_back`的功能。\n\n使用`+`操作符或`fmt.Sprintf`函数是实现这一点的常见方法：\n\n### 使用`+`操作符\n\n```go\ns := \"hello\"\ns += \" world\" // 将\" world\"添加到\"hello\"的末尾\nfmt.Println(s) // 输出: \"hello world\"\n```\n\n### 使用`fmt.Sprintf`\n\n```go\ns := \"hello\"\ns = fmt.Sprintf(\"%s%s\", s, \" world\") // 将\" world\"添加到\"hello\"的末尾\nfmt.Println(s) // 输出: \"hello world\"\n```\n\n如果你只想添加一个字符，可以将该字符先转换为字符串：\n\n```go\ns := \"hello\"\nc := '!' // 字符类型在Go中是rune\ns += string(c) // 将字符'!'添加到\"hello\"的末尾\nfmt.Println(s) // 输出: \"hello!\"\n```\n\n请记住，每次字符串连接操作实际上都会创建一个新的字符串，因为Go中的字符串是不可变的。如果你需要执行大量的字符串连接操作，使用`strings.Builder`类型可能会更高效：\n\n### 使用`strings.Builder`\n\n```go\nvar builder strings.Builder\nbuilder.WriteString(\"hello\")\nbuilder.WriteString(\" world\")\nfmt.Println(builder.String()) // 输出: \"hello world\"\n```\n\n`strings.Builder`提供了一个可变的字符串缓冲区，可以更高效地构建字符串，特别是在涉及到大量字符串拼接操作时。它在内部管理一个字节切片（`[]byte`）来避免多次分配和复制字符串带来的性能开销。\n\n## 介绍go中的错误处理\n在Go语言中，错误处理是通过使用`error`接口类型来实现的，这与许多其他语言使用异常（exceptions）的方式有所不同。`error`类型是Go语言标准库中的一个接口，定义如下：\n\n```go\ntype error interface {\n    Error() string\n}\n```\n\n任何拥有`Error() string`方法的类型都可以实现`error`接口，从而成为一个可以用于错误处理的错误类型。Go语言鼓励显式的错误处理，这意味着函数在遇到错误情况时，通常会返回一个错误值（实现了`error`接口的值），调用者应检查此返回值来决定如何应对错误。\n\n### 错误处理的惯用法\n\n在Go中处理错误的典型方式是通过检查函数的返回值中的错误值：\n\n```go\nresult, err := someFunction()\nif err != nil {\n    // 处理错误\n    fmt.Println(\"发生错误：\", err)\n    return // 或者其他错误处理\n}\n// 继续正常逻辑\n```\n\n### 自定义错误\n\n你可以通过实现`error`接口创建自定义错误类型。这通常通过定义一个结构体，然后为它实现`Error() string`方法来完成：\n\n```go\ntype MyError struct {\n    Message string\n    Code    int\n}\n\nfunc (e *MyError) Error() string {\n    return fmt.Sprintf(\"%d - %s\", e.Code, e.Message)\n}\n\n// 使用自定义错误的函数示例\nfunc doSomething() error {\n    // 假设发生了某种错误情况\n    return &MyError{Message: \"出了点问题\", Code: 404}\n}\n```\n\n### 错误检查与处理\n\nGo语言的错误处理模式鼓励开发者显式地检查和处理错误，这可以让错误的来源和处理更加清晰，有助于编写可靠和容易维护的代码。虽然这种方式可能使代码量略增，但它提高了程序的稳定性和可读性。\n\n### `errors`包和`fmt.Errorf`\n\nGo标准库提供了`errors`包，用于简化常见错误的创建。使用`errors.New`函数可以快速创建一个基本的错误实例：\n\n```go\nimport \"errors\"\n\nerr := errors.New(\"发生了一个错误\")\n```\n\n另外，`fmt`包的`Errorf`函数可以用来格式化错误信息并返回一个错误。这是创建带有格式化信息的错误的便捷方式：\n\n```go\nerr := fmt.Errorf(\"发生了错误：%v\", \"具体信息\")\n```\n\n### 错误处理的进阶使用\n\n在一些复杂的应用场景中，Go语言的错误处理还涉及错误的封装（wrapping）、检查（inspection）、以及自定义错误类型的设计，以满足更高级的错误处理需求。从Go 1.13开始，标准库`errors`包引入了对错误封装和展开的支持，使得错误处理更加灵活。\n\n## Go的错误处理，和其他语言相比，优点是什么？缺点是什么？\nGo语言的错误处理模型有其独特之处，相较于其他编程语言，这种模型既有优点也有缺点。\n\n### 优点\n\n1. **简明易懂**：Go的错误处理非常直接。函数要么成功并返回结果，要么失败并返回错误。这种明确性使得错误处理逻辑易于理解和维护。\n2. **显式错误处理**：强制要求检查错误迫使开发者面对可能出现的错误情况，这有助于提高代码的健壮性。在Go中，忽略错误不是默许的做法，这与一些其他语言中可能通过异常处理隐式地忽略错误的情况不同。\n3. **灵活性**：由于错误被视为普通值，开发者可以使用Go的所有语言特性来处理错误，比如可以很容易地将错误信息记录到日志、添加额外的上下文信息，或者根据错误类型进行不同的处理。\n4. **性能**：相比异常处理机制，Go的错误处理方式通常有更好的性能。在Go中，错误作为返回值处理，避免了异常处理可能带来的性能开销。\n\n### 缺点\n\n1. **代码冗余**：在每个可能发生错误的函数调用后都需要检查错误，这可能会导致大量重复的错误检查代码。虽然这提高了代码的明确性和可靠性，但也使得代码更加冗长。\n2. **错误处理分散**：错误需要在它们发生的地方立即被处理，这可能导致错误处理逻辑分散在代码库的各个部分，而不是集中处理。\n3. **缺乏统一的错误处理结构**：虽然Go的`interface{}`类型允许以统一的方式处理所有错误，但标准库并没有提供一个统一处理错误的结构或者模式，这可能导致不同的开发者或团队采用不同的错误处理策略，降低了代码的一致性。\n4. **功能限制**：与支持异常的语言相比，Go的错误处理模型在某些情况下可能不够灵活。例如，在需要清理资源的情况下，缺少类似于其他语言中`finally`块的机制，尽管可以通过`defer`语句在某种程度上实现相似的功能。\n\n总体而言，Go的错误处理模型强调简洁性和明确性，鼓励开发者显式地处理每个可能出现的错误。这种模型有其明显的优势，特别是在提高代码可读性和可维护性方面，但也要求开发者付出更多努力来管理错误处理代码的冗余和分散。\n\n## Go的错误处理和java，C++相比？\nGo语言的错误处理与Java和C++的异常处理机制有显著不同。每种语言的错误处理机制都有其设计哲学、优势和局限。下面是一个比较概览：\n\n### Go\n\n- **错误作为值**：在Go中，错误被视为值，通过`error`接口表示。函数通常返回一个错误值，以指示是否发生了错误。\n- **显式检查**：调用者必须显式检查错误值，以决定是否成功执行了函数。\n- **无异常机制**：Go语言没有异常机制。所有的错误都通过正常的控制流和值来处理。\n\n**优势**：\n- 易于理解和预测错误处理的流程。\n- 鼓励开发者面对并显式处理错误情况。\n\n**局限**：\n- 可能导致大量重复的错误检查代码。\n- 错误处理逻辑可能会分散于代码的多个地方。\n\n### Java\n\n- **异常机制**：Java使用异常来处理错误和异常情况。方法可以抛出异常，调用者需要捕获这些异常。\n- **检查型和非检查型异常**：Java区分检查型（必须显式处理）和非检查型异常（可选处理）。\n- **try-catch-finally**：通过`try-catch`语句块捕获和处理异常，`finally`块用于资源清理。\n\n**优势**：\n- 异常提供了一种强制错误处理的机制，有助于捕获运行时错误。\n- 通过异常类型，可以传递丰富的错误信息。\n\n**局限**：\n- 异常可能导致控制流难以跟踪，尤其是在多层嵌套调用中。\n- 过度使用异常可能会影响代码的可读性和性能。\n\n### C++\n\n- **异常机制**：C++同样使用异常来处理错误情况。函数可以抛出异常，使用`try-catch`块捕获异常。\n- **资源管理**：C++提倡RAII（资源获取即初始化）原则，利用对象生命周期自动管理资源，配合异常使用。\n- **noexcept**：C++11引入了`noexcept`关键字，用于指示函数是否抛出异常。\n\n**优势**：\n- 异常允许将错误处理代码从正常逻辑中分离出来，提高代码清晰度。\n- RAII原则和智能指针等机制与异常配合，有效管理资源。\n\n**局限**：\n- 异常可能导致性能开销，特别是在深层嵌套调用中。\n- 需要谨慎管理异常安全性和资源泄漏问题。\n\n### 总结\n\n- **Go**的错误处理模式倾向于简单和显式，强迫开发者面对错误，但可能导致代码冗余。\n- **Java**和**C++**使用异常机制处理错误，能够将错误处理代码与业务逻辑分离，提供更丰富的错误信息，但可能使得控制流程复杂化，且需要注意异常安全性和性能问题。\n\n选择哪种错误处理方式，很大程度上取决于项目的具体需求、团队的偏好和特定语言的生态。\n\n## go中我不想定义自己的err类型，应该用哪种默认的？\n如果你不想在Go中定义自己的错误类型，可以使用标准库`errors`包中的`errors.New`函数来创建一个简单的错误。这种方式适用于那些不需要从错误中提取额外信息的场景。`errors.New`接收一个字符串参数，返回一个符合`error`接口的错误对象。\n\n### 使用`errors.New`\n\n```go\nimport (\n    \"errors\"\n    \"fmt\"\n)\n\nfunc someFunction() error {\n    // 假设发生了某种错误情况\n    return errors.New(\"这里发生了一个错误\")\n}\n\nfunc main() {\n    err := someFunction()\n    if err != nil {\n        fmt.Println(err)\n    }\n}\n```\n\n### 格式化错误信息\n\n如果你需要在错误信息中包含变量或者更复杂的数据结构，可以使用`fmt.Errorf`来代替`errors.New`。`fmt.Errorf`允许你像使用`fmt.Sprintf`一样格式化错误字符串，并返回一个错误对象。\n\n```go\nimport (\n    \"fmt\"\n)\n\nfunc someFunction(param int) error {\n    // 使用 fmt.Errorf 格式化错误信息\n    return fmt.Errorf(\"错误发生在 %d\", param)\n}\n\nfunc main() {\n    err := someFunction(42)\n    if err != nil {\n        fmt.Println(err)\n    }\n}\n```\n\n从Go 1.13开始，`errors`包提供了`As`和`Is`函数，用于检查错误的类型和值。同时，`fmt.Errorf`支持使用`%w`动词来包装错误，使得你可以保留原始错误的同时添加上下文信息。即使你不定义自己的错误类型，这些功能也能帮助你更好地管理和检查错误。\n\n### 使用错误包装\n\n```go\nimport (\n    \"errors\"\n    \"fmt\"\n)\n\nvar ErrSpecific = errors.New(\"特定错误\")\n\nfunc someFunction() error {\n    // 返回一个包装了原始错误的新错误\n    return fmt.Errorf(\"操作失败: %w\", ErrSpecific)\n}\n\nfunc main() {\n    err := someFunction()\n    if errors.Is(err, ErrSpecific) {\n        fmt.Println(\"发生了特定的错误:\", err)\n    }\n}\n```\n\n使用`errors.New`和`fmt.Errorf`可以满足大多数不需要自定义错误类型的场景，并且通过错误包装和检查，你依然可以构建出结构化和可管理的错误处理逻辑。\n\n## 如何判断 map 中是否包含某个 key ？\n```go\nvar sample map[int]int\nif _, ok := sample[10]; ok {\n\n} else {\n\n}\n```\n\n## strings.Join ≈ strings.Builder > bytes.Buffer > \"+\" > fmt.Sprintf\n在Go语言中，拼接字符串可以通过多种方式实现，每种方式在不同场景下的性能和适用性各有差异。下面是对这五种方法——`strings.Join`、`strings.Builder`、`bytes.Buffer`、`\"+\"`操作符、`fmt.Sprintf`——的分析，按照性能从高到低排列：\n\n### 1. `strings.Join`\n\n- **适用场景**：当你有一个字符串切片，需要将其元素连接成一个单独的字符串时，`strings.Join`非常高效。\n- **性能**：通常比`+`操作符和`fmt.Sprintf`更高效，因为它在内部计算结果字符串的确切长度，然后一次性分配足够的内存。\n- **示例**：\n    ```go\n    parts := []string{\"Hello\", \"world\"}\n    result := strings.Join(parts, \" \")\n    ```\n\n### 2. `strings.Builder`\n\n- **适用场景**：对于在循环或多个步骤中构建字符串尤其有用。自Go 1.10引入以来，它是推荐的字符串构建方法。\n- **性能**：提供了高效的字符串构建能力，因为它避免了不必要的内存分配和复制。\n- **示例**：\n    ```go\n    var sb strings.Builder\n    sb.WriteString(\"Hello\")\n    sb.WriteString(\" \")\n    sb.WriteString(\"world\")\n    result := sb.String()\n    ```\n\n### 3. `bytes.Buffer`\n\n- **适用场景**：在需要频繁修改字符串或者处理二进制数据和字符串转换时适用。`bytes.Buffer`与`strings.Builder`类似，但更通用，也支持字节操作。\n- **性能**：虽然性能略低于`strings.Builder`，但在需要处理字节和字符串的场景下是一个很好的选择。\n- **示例**：\n    ```go\n    var buf bytes.Buffer\n    buf.Write([]byte(\"Hello\"))\n    buf.WriteString(\" world\")\n    result := buf.String()\n    ```\n\n### 4. `\"+\"`操作符\n\n- **适用场景**：简单的字符串拼接操作，尤其是少量字符串时。\n- **性能**：在拼接少数几个字符串时性能可接受，但在循环或大量字符串拼接场景中性能较差，因为每次拼接都会产生新的字符串，导致多次内存分配和复制。\n- **示例**：\n    ```go\n    result := \"Hello\" + \" \" + \"world\"\n    ```\n\n### 5. `fmt.Sprintf`\n\n- **适用场景**：需要格式化字符串时，如插入变量、调整格式等。\n- **性能**：相比于其他方法，性能较低，因为它需要解析格式字符串并执行类型断言等操作，但它提供了非常强大的格式化功能。\n- **示例**：\n    ```go\n    name := \"world\"\n    result := fmt.Sprintf(\"Hello %s\", name)\n    ```\n\n### 总结\n\n选择哪种方法取决于具体的应用场景。对于简单或少量的字符串拼接，直接使用`\"+\"`可能是最直观的。当需要构建大量字符串时，`strings.Builder`是首选。`strings.Join`适合已经存储在切片中的字符串拼接。`fmt.Sprintf`提供了格式化的灵活性，适用于需要格式化输出的场景。`bytes.Buffer`则在处理既包含文本又包含二进制数据的情况下非常有用。\n\n## strings.Builder原理\n`strings.Builder` 是 Go 语言在 1.10 版本中引入的一个结构体，它提供了一种高效构建字符串的方法。与其他字符串拼接方法相比，`strings.Builder` 更为高效，主要因为它在内部优化了内存的分配和复制操作。下面是 `strings.Builder` 的一些关键原理和特点：\n\n### 1. 最小化内存分配\n\n`strings.Builder` 在内部维护了一个字节切片（`[]byte`）。当向 `Builder` 添加字符串时，它实际上是将这些字符串的字节追加到内部的字节切片中。`Builder` 会根据需要自动增长这个字节切片的容量，但它尽量通过预分配足够的内存空间来避免频繁的内存重新分配。\n\n### 2. 避免不必要的复制\n\n在传统的字符串拼接操作中，每一次拼接都可能产生一个新的字符串对象，这意味着需要复制字符串的内容到新的内存位置。相比之下，`strings.Builder` 通过直接在已有的字节切片上追加内容，避免了这种复制，从而提升了性能。\n\n### 3. 高效的字符串生成\n\n当调用 `strings.Builder` 的 `String()` 方法来获取最终的字符串时，它会基于内部的字节切片创建一个新的字符串。由于 Go 语言字符串的不可变性，这个操作会涉及一次内存复制。然而，这仅仅发生在整个构建过程的最后，因此相比于多次字符串拼接，总体上仍然大大减少了内存复制的次数。\n\n### 4. `Grow` 方法\n\n`strings.Builder` 提供了 `Grow` 方法，允许手动指定预期需要的额外容量。这可以进一步优化性能，因为它可以在大量数据被写入之前预分配足够的内存，从而避免自动扩容过程中的多次内存分配。\n\n### 5. 安全性\n\n`strings.Builder` 的设计也考虑到了安全性。一旦通过 `String()` 方法获取了最终的字符串，再尝试向 `Builder` 写入新的数据将会导致 panic。这个设计确保了一旦字符串被生成，内部的字节切片不会被进一步修改，保持了字符串不可变的特性。\n\n总的来说，`strings.Builder` 的设计充分利用了 Go 语言的特性，如切片的灵活性和字符串的不可变性，通过减少内存分配和复制的次数，提供了一种高效且安全的方式来构建字符串。\n\n## Go语言 ...是什么\n\n在Go语言中，`...`符号有两个主要用途：\n\n### 1. 可变参数函数（Variadic Function）\n\n当`...`用于函数的参数类型前时，表示该函数可以接收任意数量的该类型的参数。这使得函数可以灵活处理不同数量的参数，类似于其他语言中的可变参数列表。\n\n例如，定义一个可接收多个`int`类型参数的函数，并计算它们的和：\n\n```go\nfunc sum(nums ...int) int {\n    total := 0\n    for _, num := range nums {\n        total += num\n    }\n    return total\n}\n\nfunc main() {\n    fmt.Println(sum(1, 2, 3)) // 输出 6\n    fmt.Println(sum(1, 2, 3, 4, 5)) // 输出 15\n}\n```\n\n在这个例子中，`sum`函数可以接收任意数量的`int`参数。\n\n### 2. 切片参数展开（Slice Unfolding）\n\n当`...`用于调用可变参数函数时，紧跟在切片变量后面，表示将切片的元素展开为参数列表传递给函数。\n\n继续使用上面的`sum`函数作为例子，如果你有一个`int`切片，并希望将其元素作为参数传递给`sum`，可以这样做：\n\n```go\nnums := []int{1, 2, 3, 4, 5}\nfmt.Println(sum(nums...)) // 输出 15\n```\n\n在这个例子中，`nums...`将`nums`切片中的每个元素展开，作为独立的参数传递给`sum`函数。\n\n### 总结\n\n`...`在Go语言中用作可变参数函数定义和切片参数展开的语法元素，提供了编写灵活函数接口和调用的能力。\n","source":"_posts/Go-学习笔记-1.md","raw":"---\ntitle: Go 学习笔记 1\ntags:\n  - Go\n  - PL\ntoc: true\nmath: false\ntop_img: /img/docs/md-go/advanced-go-programming-book-master/cover.png\ncover: /img/docs/md-go/golang-study-roadmap-imgs/golang-roadmap_01.png\nabbrlink: 37369\ndate: 2025-09-18 11:33:56\n---\n# ChatGPT摘抄\n\n## Go和C++的区别\nGo语言（通常称为Golang）和C++在多个方面有显著的区别，包括它们的设计哲学、类型系统、内存管理、并发模型等方面。下面是一些主要的区别：\n\n1. **设计哲学**:\n   - **Go** 设计简洁，以提高开发效率和易用性为目标。它旨在使得编写高性能、可靠、易于维护的代码更加直接和简单。\n   - **C++** 设计为一种通用编程语言，强调性能和灵活性。它支持多种编程范式（如过程式、面向对象、泛型编程），但这也使得它变得相对复杂。\n\n2. **类型系统**:\n   - **Go** 有一个静态类型系统，但它的类型推导使得代码更简洁。它支持接口，但不支持类和继承，而是通过组合和接口实现多态和代码复用。\n   - **C++** 也是静态类型的，但它支持更复杂的类型系统，包括类、继承、模板等。这提供了强大的灵活性，但也增加了复杂性。\n\n3. **内存管理**:\n   - **Go** 提供自动垃圾收集，减少了内存泄漏的风险，简化了内存管理。\n   - **C++** 需要程序员手动管理内存，虽然提供了智能指针等现代特性来帮助管理，但管理不当仍可能导致内存泄漏和其他问题。\n\n4. **并发模型**:\n   - **Go** 的并发模型是其核心特性之一，基于“goroutines”（轻量级线程）和通道。这使得编写并发程序变得更简单和安全。\n   - **C++** 支持多线程，但并发并不是语言核心的一部分。C++11及以后的版本引入了一些并发编程的标准库支持，但使用起来比Go更复杂。\n\n5. **标准库和生态系统**:\n   - **Go** 有一个丰富的标准库，尤其是对于网络编程和并发编程。Go的生态系统随着语言的普及而快速增长，特别是在云服务和微服务开发中。\n   - **C++** 拥有庞大的第三方库和工具集，适用于各种编程任务，但标准库相对较小。C++在高性能计算、游戏开发、系统编程等领域有着悠久和广泛的应用。\n\n6. **编译和执行**:\n   - **Go** 编译器倾向于生成单个静态链接的二进制文件，简化了部署和分发。\n   - **C++** 通常需要更复杂的构建系统，尤其是对于依赖于多个库和平台的项目。\n\n总之，Go和C++在设计上有根本的不同。Go旨在简化并发编程，提高开发效率，适合快速开发大型分布式系统。而C++提供了更多的控制和灵活性，适合那些需要极致性能优化和复杂系统设计的场景。选择哪种语言取决于项目需求、团队熟悉度和特定任务的需求。\n\n## 讲一下go语言中的协程\nGo语言中的协程（goroutine）是Go语言并发设计的核心。goroutine 类似于线程，但在执行和资源消耗方面更为高效。它们由Go运行时（runtime）管理，而不是直接由操作系统管理。这样做的好处是goroutine的创建和销毁的成本比操作系统线程低得多，允许在同一程序中并发运行成千上万的goroutine。\n\n### 创建goroutine\n\n在Go语言中，创建一个goroutine非常简单，只需要在函数调用前加上`go`关键字。例如：\n\n```go\ngo funcName(params)\n```\n\n这会启动一个新的goroutine并在这个新的goroutine中调用`funcName`函数，`params`是传递给`funcName`函数的参数。\n\n### 特点\n\n1. **轻量级**：每个goroutine的堆栈大小在初始化时很小，根据需要可以动态地增长和缩减。这种设计让成千上万的goroutine并发运行成为可能。\n2. **不需要显式创建和销毁**：goroutine由Go的运行时环境管理，程序员只需要创建它们，无需关心销毁和回收。\n3. **使用通道（channels）进行通信**：goroutine之间的同步通常通过channels进行，channels是Go语言中的一种类型安全的消息传递机制。使用channels，可以很容易地在goroutine之间传递数据和信号。\n\n### 示例\n\n下面的示例展示了如何使用goroutine和channels进行并发编程：\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\n// 函数打印传入的消息\nfunc printMessage(message string) {\n    for i := 0; i < 5; i++ {\n        fmt.Println(message)\n        time.Sleep(time.Millisecond * 100)\n    }\n}\n\nfunc main() {\n    // 创建一个新的goroutine运行printMessage函数\n    go printMessage(\"hello\")\n\n    // 主goroutine中也运行printMessage函数\n    printMessage(\"world\")\n\n    // 等待按键结束程序，避免主goroutine提前结束\n    fmt.Scanln()\n    fmt.Println(\"done\")\n}\n```\n\n在这个例子中，`printMessage`函数将在两个不同的goroutine中并发执行：一个是通过`go printMessage(\"hello\")`创建的goroutine，另一个是主goroutine。这两个goroutine将并发地运行，打印出交替的\"hello\"和\"world\"消息。\n\n总之，goroutine是实现并发编程的强大工具，它使得编写高性能并发程序在Go语言中变得既简单又高效。\n\n## 协程和线程的区别是什么\n协程（Coroutines）和线程（Threads）都是程序执行流的基本单位，它们之间有一些关键的区别和优缺点。理解这些区别有助于选择最适合特定应用需求的并发模型。\n\n### 1. 管理方式\n\n- **线程**：通常由操作系统管理。操作系统负责线程的调度和管理，线程切换涉及到上下文切换，包括保存当前线程的状态并恢复另一个线程的状态，这是一个相对昂贵的操作。\n- **协程**：由程序和运行时（runtime）管理，不直接依赖操作系统的线程管理。协程上下文切换的成本通常比线程低得多，因为这种切换是在用户态完成的，避免了内核态与用户态之间的切换开销。\n\n### 2. 资源消耗\n\n- **线程**：每个线程都有自己的堆栈和局部变量，占用的内存量相对较大。线程的数量受到系统资源的限制。\n- **协程**：通常非常轻量，拥有很小的堆栈和低资源消耗。因此，在同一程序中可以同时运行成千上万个协程。\n\n### 3. 并发模型\n\n- **线程**：多线程编程模型可以实现真正的并行执行（在多核处理器上），但线程间的同步和通信（如使用锁、信号量等）可能导致复杂的竞态条件和死锁问题。\n- **协程**：通常在单线程中运行，实现并发而非并行。协程之间的通信和同步通过使用消息传递（如Go语言的channels）或事件循环（如Python的asyncio）等机制，这些机制旨在避免传统的锁和条件变量带来的问题。\n\n### 4. 控制流\n\n- **线程**：操作系统控制线程的调度，程序员通常不能精确控制执行流的切换点。\n- **协程**：提供了更精细的控制能力，允许程序员确定何时以及如何切换任务，通过这种方式，可以更容易地编写非阻塞代码和管理并发。\n\n### 5. 使用场景\n\n- **线程**：适用于需要实现真正并行任务处理的场景，尤其是在计算密集型应用中。\n- **协程**：适合高并发、IO密集型应用，如网络服务器、异步处理任务等，能有效提高资源的利用率和程序的响应性。\n\n总结来说，线程是操作系统层面的并发执行单元，资源开销较大，适合于并行处理；而协程是更轻量级的用户态线程，它们提供了更高的并发性和更灵活的控制方式，适合于构建高并发的应用程序。正确地选择使用线程还是协程，取决于具体的应用场景和性能需求。\n\n## 假设我在go语言中开启了10个协程，它们会运行在几个线程上，几个CPU上\n在Go语言中，协程（goroutine）的运行不是直接映射到操作系统线程上的，而是由Go运行时（runtime）进行管理。Go运行时使用了M:N调度模型（多个goroutines被多路复用到较少的操作系统线程上），这意味着数千个goroutines可能只用到很少数量的操作系统线程。具体到你的问题，让我们看看这个模型的两个主要组件以及如何影响goroutines的运行：\n\n### 1. GOMAXPROCS\n\n`GOMAXPROCS`是一个环境变量，用于控制Go程序运行时可以使用的CPU核心数。默认情况下，它的值设为了你的机器上的逻辑CPU核心数。你可以通过`runtime.GOMAXPROCS()`函数查询或设置这个值。`GOMAXPROCS`决定了有多少个操作系统线程可以同时执行Go代码。\n\n### 2. 调度器\n\nGo的调度器是基于M:N模型实现的，其中：\n\n- **M** 代表操作系统线程（machine）。\n- **N** 代表goroutines。\n\n调度器的任务是将N个goroutines分配给M个操作系统线程上执行。这意味着，即使你有数千个goroutines，Go运行时也可能只使用`GOMAXPROCS`指定数量的操作系统线程来执行这些goroutines。\n\n### 运行在多少个线程和CPU上？\n\n假设你开启了10个goroutines：\n\n- **线程**：这些goroutines的实际运行可能全部在一个单独的操作系统线程上，也可能分布在多个操作系统线程上，具体取决于`GOMAXPROCS`的设置和Go调度器的决定。如果`GOMAXPROCS`的值大于1（默认情况下通常如此），那么这些goroutines有可能被调度到不同的操作系统线程上执行。\n- **CPU**：这些goroutines实际上在`GOMAXPROCS`设定的CPU核心上并发运行。如果`GOMAXPROCS`大于1，goroutines可以在多个CPU核心上并行执行。\n\n因此，如果`GOMAXPROCS`设置为大于1的值，你的10个goroutines可能会在多个线程和多个CPU上运行，具体分配由Go运行时的调度器动态管理。但要注意，goroutine到线程的具体映射以及调度行为是由Go运行时内部决定的，可能会随着Go版本和具体的运行情况而有所不同。\n\n## go的通道是无序的，这样怎么能做好并发呢\n在Go语言中，说通道（channels）是“无序的”可能会有点误导。实际上，通道本身维持着发送和接收操作的顺序：如果你按顺序发送了值A然后是值B到同一个通道，接收方也将首先接收到A，然后是B，这意味着在单个通道上，发送和接收是有序的。然而，当涉及到从多个并发发送者接收时，哪个发送者首先将消息送达到通道是不确定的，这可能导致看似“无序”的行为。\n\n当你在处理并发时，确保程序的正确性通常依赖于同步和通信机制，而Go通过通道和goroutines提供了强大的工具来帮助你做到这一点。这里有一些策略来确保你在并发程序中使用通道时能够正确地同步和顺序操作：\n\n1. **使用无缓冲通道进行同步**：无缓冲通道保证了发送操作会阻塞，直到接收操作发生，这可以用作goroutines之间的同步点。\n\n2. **使用有缓冲通道控制并发**：有缓冲通道允许在阻塞之前发送多个值。它们可以用来限制并发级别，比如通过控制同时运行的goroutines的数量。\n\n3. **关闭通道来广播消息**：关闭一个通道会通知所有的接收者没有更多的值会被发送到这个通道。这是一种广播机制，可以用来通知多个goroutine某个条件已经成立，比如终止。\n\n4. **选择语句**：`select` 语句允许你同时等待多个通道操作，并根据哪个通道准备就绪来执行相应的代码块。这可以用来处理来自多个来源的输入，同时保持逻辑上的清晰和顺序。\n\n5. **顺序控制**：当需要精确控制多个goroutine的执行顺序时，可以设计一种协议或使用一系列通道来顺序地进行操作，确保并发操作的正确顺序。\n\n通过这些机制，Go允许你构建复杂的并发程序，同时保持代码的简洁性和清晰度。正确地使用通道和goroutines，你可以有效地解决并发中的同步和顺序问题，从而实现高效且易于理解的并发逻辑。\n\n## 管道例子探究\n```go\nfunc main() {\n\ts := []int{7, 2, 8, -9, 4, 0}\n\n\tc := make(chan int)\n\tfmt.Println(s[:len(s)/2])\n\tfmt.Println(s[len(s)/2:])\n\tsum(s[:len(s)/2], c) // 17\n\tsum(s[len(s)/2:], c)\n\tx, y := <-c, <-c // 从 c 中接收\n\tfmt.Println(x, y, x+y)\n}\n```\n这样为什么不对？管道必须和goroutine搭配使用吗?\n\n---\n\n你的新代码片段中，`sum` 函数不是在goroutines中执行的，而是直接顺序执行。问题在于，在你尝试向通道 `c` 发送数据时（使用 `c <- sum` 语法），因为 `c` 是一个无缓冲的通道，发送操作会阻塞直到另一方准备好接收数据。在这种情况下，因为你的发送操作 (`c <- sum`) 发生在主goroutine中，而且没有其他并行的goroutine去接收这些值，这将导致死锁：主goroutine在等待自己向通道发送数据的操作完成，但这永远不会发生，因为没有其他并发操作去从通道中接收数据。\n\n通道确实设计为在goroutines之间进行通信的一种方式，它们非常适合用于并发编程。在单个goroutine内使用无缓冲通道进行发送和接收操作通常会导致死锁，因为无缓冲通道要求发送和接收操作几乎同时发生。\n\n简而言之，你的最后一个示例不正确，原因如下：\n\n1. **死锁**：由于 `sum` 函数调用并非在goroutines中执行，它们将顺序执行。第一个 `sum` 调用试图向通道 `c` 发送一个值，但会阻塞，因为没有其他goroutine在接收端等待这个值。程序将在第一个 `sum` 函数调用时阻塞，导致死锁。\n\n2. **通道与goroutine搭配使用**：虽然技术上不是必须将通道与goroutines搭配使用，但在实践中，这是避免死锁和实现有效并发程序的常见模式。使用无缓冲通道时，发送操作会阻塞，直到接收操作开始，反之亦然。这种机制非常适合在不同goroutines之间同步数据访问和传递消息。\n\n为了使你的程序按预期工作，你应该在goroutines中调用 `sum` 函数，并通过通道交换数据，正如之前正确的版本那样。这样，两个 `sum` 操作可以并发执行，主goroutine将等待并从通道中接收它们的结果，从而避免死锁并正确计算总和：\n\n```go\ngo sum(s[:len(s)/2], c) // 在goroutine中执行\ngo sum(s[len(s)/2:], c) // 在另一个goroutine中执行\nx, y := <-c, <-c // 从通道c中接收\n```\n\n通过这种方式，每个 `sum` 调用都在自己的goroutine中执行，并且能够独立地完成其向通道的发送操作。这避免了死锁，使主goroutine能够从通道接收两个结果并正确计算总和。\n\n---\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tch := make(chan int, 2)\n\tch <- 1\n\tch <- 2\n\tfmt.Println(<-ch)\n\tfmt.Println(<-ch)\n}\n```\n为什么这个又对了？这不是只有一个goroutine吗?\n\n你的最新示例之所以能够正确运行，是因为它使用了一个**有缓冲的通道**。与无缓冲通道不同，有缓冲通道允许在阻塞发送者或接收者之前存储一个固定数量的值。具体到你的例子中，通过 `make(chan int, 2)` 创建了一个可以存储两个整数的缓冲通道。这意味着你可以在没有任何接收者准备好接收之前，向通道发送（或“缓冲”）两个值。\n\n这段代码中的关键点是：\n\n1. `ch := make(chan int, 2)` 创建了一个有缓冲的通道，缓冲大小为2。这允许通道存储最多两个整数，直到它们被接收。\n\n2. `ch <- 1` 和 `ch <- 2` 这两行向通道发送两个整数。由于通道是有缓冲的，并且缓冲未满，这两个发送操作不会阻塞。这两个值被存储在通道的缓冲区中。\n\n3. `fmt.Println(<-ch)` 和 `fmt.Println(<-ch)` 这两行从通道中接收并打印这两个值。由于这两个值已经在通道的缓冲区中等待，接收操作立即发生，没有阻塞。\n\n在这个例子中，即使所有操作都在单个goroutine（主goroutine）中进行，程序也能正常运行，没有发生死锁。这是因为有缓冲通道提供了足够的空间来存储发送到通道中的值，直到它们被接收，从而避免了在发送操作时必须立即有一个接收者准备好接收值的需求。\n\n有缓冲通道是并发Go程序中一个非常有用的工具，允许goroutines在某种程度上独立操作，而不必在每次通信时都完全同步。然而，设计有缓冲通道的程序时需要谨慎，以避免逻辑错误或死锁，特别是当缓冲区满时或在更复杂的通信模式中。\n\n## Go支持垃圾回收吗？\n是的，Go语言支持垃圾回收（Garbage Collection，简称GC）。Go的垃圾回收器是一个实现了自动内存管理的程序部分，它负责检测并自动回收不再被程序使用的内存空间，从而防止内存泄漏。这意味着在Go中，开发者不需要（也不能）手动管理内存的分配和回收，大大简化了编程工作，减少了内存泄漏和其他与手动内存管理相关的错误。\n\nGo的垃圾回收器设计为“非阻塞式”的，意味着它尽量减少对程序执行的干扰。从Go 1.5版本开始，引入了并发的、三色标记清除算法，该算法允许垃圾收集过程在大部分时间与程序的其他部分并发执行，减少了垃圾收集对程序性能的影响。尽管如此，垃圾收集过程仍然会引入一定的延迟，这在极少数延迟敏感的应用中可能成为一个考虑因素。\n\nGo的运行时系统还包括其他几个与性能和资源管理相关的特性，如goroutine的调度和网络轮询器，它们一起确保了Go程序的高性能和高效的资源使用。开发者可以使用内置的分析工具（如pprof）来监视和优化程序的内存使用，以及诊断性能问题。\n\n## 如果Go 代码会被预先编译成原生的机器码，那么它在运行的时候怎么和runtime结合呢\n\nGo语言确实编译成原生机器码，这意味着Go程序在执行时不需要依赖于虚拟机，它们直接由操作系统调度。尽管如此，Go的执行模型和运行时（runtime）系统包括了许多复杂的功能，如垃圾回收（GC）、goroutine调度、通道通信、反射以及更多。这些功能的实现是预先集成在每个Go程序中的，部分原因是Go的编译器和链接器在构建最终的可执行文件时会自动包含运行时。\n\n这里是Go运行时和编译后的机器码结合的一些关键方式：\n\n1. **运行时包含**：当Go程序被编译时，运行时代码被静态链接到最终的二进制中。这包括了垃圾回收器、goroutine调度器等核心功能的实现。因此，即使Go代码被编译成了原生机器码，运行时的功能也被内嵌于程序中，随程序一起运行。\n\n2. **初始化运行时**：在Go程序启动时，它的入口点不是 `main.main` 函数。实际上，程序开始执行于运行时的初始化代码，该代码负责设置运行时环境，包括初始化内存管理器、启动垃圾回收器、创建主goroutine等。只有在这些准备工作完成之后，`main.main` 函数才会被调用。\n\n3. **goroutine调度**：Go语言的并发模型基于goroutines。运行时包含一个调度器，它在用户态模拟多线程环境，允许成千上万的goroutines伪并行地运行在较少的操作系统线程上。编译后的代码中包含与运行时交互的指令，这些指令使得goroutines能被合适地调度和管理。\n\n4. **内置函数调用运行时**：一些Go的内置函数，如 `make`、`new`，以及用于map、切片和通道操作的函数，实际上是对运行时系统的直接调用。这些函数的实现是在运行时代码中，而非Go的标准库中。\n\n5. **接口和反射**：Go的接口和反射机制也依赖于运行时的支持。运行时维护了类型信息，允许程序在运行时查询和操作类型，这是动态语言特性的一个重要基础。\n\n总的来说，虽然Go代码被编译成原生机器码，但通过将运行时的功能静态链接到每个程序、在程序启动时初始化运行时环境、以及在需要时通过编译后的代码调用运行时支持的机制，Go程序能够实现高级的语言特性，同时保持高性能和跨平台的兼容性。\n\n## Go语言中变量的生命周期\nGo语言中变量的生命周期是由变量能够被程序访问的时间段定义的。理解变量的生命周期对于编写高效和无内存泄漏的程序至关重要。在Go中，变量的生命周期取决于它是如何声明的，主要分为两种情况：在堆（heap）上和在栈（stack）上。\n\n### 栈上的变量\n\n栈上的变量通常具有短暂的生命周期。当声明一个局部变量时，它通常位于栈上，其生命周期与包含它的函数调用的生命周期相匹配。当函数被调用时，局部变量被创建；当函数返回时，这些局部变量被销毁。这意味着栈上的变量的生命周期是由它们所在的函数的执行时间来决定的。\n\n### 堆上的变量\n\n堆上的变量有一个更长久的生命周期。当你使用`new`函数或者复合字面量（如切片、映射、通道等）创建一个变量，而这个变量的引用逃逸到函数外部时，这个变量就会在堆上分配。堆上的变量的生命周期不由单个函数调用控制，而是由是否仍然可达（即程序的其他部分是否还有指向该变量的引用）来决定。只要变量可达，它就会继续存在。当变量变得不可达时，它最终会被垃圾回收器回收。\n\n### 变量生命周期的决定因素\n\n- **编译器优化**：Go编译器有时会做出决策，将本应在堆上分配的变量改为在栈上分配，如果它能确定变量的生命周期在函数范围内结束。这种优化减少了垃圾回收的负担。\n- **逃逸分析**：Go编译器执行逃逸分析来决定变量应该分配在堆还是栈上。如果函数内部创建的变量在函数外部仍然被引用（即“逃逸”到函数外部），则这些变量需要在堆上分配，以保证它们在函数返回后仍然存在。\n\n理解变量的生命周期对于优化Go程序的性能和内存使用非常重要。例如，过度使用堆分配可能会导致频繁的垃圾回收，从而影响程序性能。通过适当的变量作用域控制和利用栈分配，可以提高程序效率。\n\n## Go 常量\n在 Go 语言中，常量是一个简单值的标识符，在程序运行时，其值不会被修改。常量可以是字符、字符串、布尔或数字类型的值。\n\n定义常量的基本语法如下：\n\n```go\nconst name [type] = value\n```\n\n- `const` 关键字用于声明常量。\n- `name` 是常量的名称。\n- `type` 是可选的，指定常量的类型。\n- `value` 是常量的值。\n\n### 示例\n\n```go\nconst Pi = 3.14\n```\n\n在这个例子中，`Pi` 是一个常量，其值为 `3.14`。\n\n### 常量的类型\n\n在 Go 中，常量可以是任何基本类型，如整型、浮点型、布尔型、字符串等。如果在声明常量时没有指定类型，Go 语言会根据常量的值推导出其类型。\n\n### iota\n\nGo 语言的 `iota` 关键字用于生成一组以递增整数形式表示的常量，通常用于声明一个枚举。`iota` 在 `const` 关键字出现时被重置为 0，然后在每声明一个常量时自动递增。\n\n```go\nconst (\n    a = iota // a == 0\n    b        // b == 1\n    c        // c == 2\n)\n```\n\n在这个例子中，`a`、`b`、`c` 分别被赋予了递增的整数值 0、1、2。\n\n### 未类型化常量\n\n在 Go 中，可以声明未类型化的常量，这意味着常量没有明确的类型。未类型化常量提供了更高的精度，并可以根据上下文转换为需要的类型。\n\n### 使用常量\n\n常量可以用在任何变量可以使用的地方。使用常量可以提高代码的可读性和维护性。\n\n总之，Go 语言中的常量是一个非常有用的特性，它允许你在程序中使用固定的值，而不担心这些值会被改变。通过使用 `const` 关键字和 `iota` 生成器，你可以方便地声明和管理常量。\n\n## Go 创建新结构体\n在 Go 语言中，结构体（struct）是一种将多个不同类型的变量组织到一个名字下的复合数据类型，常用于定义和创建数据实体。创建新结构体涉及两个步骤：定义结构体类型和实例化该类型的变量。\n\n### 步骤 1：定义结构体类型\n\n定义结构体类型使用 `type` 和 `struct` 关键字。结构体类型通常在函数外部定义，以便可以在不同函数间共享。\n\n```go\ntype Person struct {\n    Name string\n    Age  int\n}\n```\n\n在这个例子中，我们定义了一个名为 `Person` 的结构体，它有两个字段：`Name` 和 `Age`。\n\n### 步骤 2：实例化结构体\n\n一旦定义了结构体类型，你就可以创建该类型的实例了。有几种不同的方式来实例化结构体。\n\n#### 方法 1：使用 `new` 关键字\n\n`new` 关键字可以用来创建一个指向结构体类型的新实例的指针。此方法会分配内存并将结构体的字段初始化为零值。\n\n```go\np1 := new(Person)\np1.Name = \"Alice\"\np1.Age = 30\n```\n\n#### 方法 2：使用结构体字面量\n\n结构体字面量允许在一个表达式中创建结构体实例，并同时初始化其字段。\n\n- **命名字段方式**：\n\n```go\np2 := Person{Name: \"Bob\", Age: 25}\n```\n\n- **按字段顺序初始化**（不推荐，因为添加或修改字段时易出错）：\n\n```go\np3 := Person{\"Charlie\", 28}\n```\n\n#### 方法 3：使用指针和结构体字面量\n\n你也可以直接创建一个指向结构体实例的指针，并初始化其字段。\n\n```go\np4 := &Person{Name: \"Diana\", Age: 32}\n```\n\n### 示例\n\n```go\npackage main\n\nimport \"fmt\"\n\ntype Person struct {\n    Name string\n    Age  int\n}\n\nfunc main() {\n    // 使用 new 关键字\n    p1 := new(Person)\n    p1.Name = \"Alice\"\n    p1.Age = 30\n\n    // 使用结构体字面量\n    p2 := Person{Name: \"Bob\", Age: 25}\n\n    // 使用指针和结构体字面量\n    p3 := &Person{Name: \"Charlie\", Age: 28}\n\n    fmt.Println(*p1)\n    fmt.Println(p2)\n    fmt.Println(*p3)\n}\n```\n\n这个例子展示了不同的方式来创建和初始化结构体 `Person` 的实例。选择哪种方式取决于具体情况，比如是否需要在初始化时立即设置字段值，或者是否需要操作结构体指针。\n\n## Go切片append\n在 Go 语言中，切片（slice）是一个动态数组，它提供了一种灵活、强大的方式来管理数据集合。尽管 Go 语言的切片类型没有直接提供 `push back` 的方法（类似于其他语言中的数组或列表的 append 功能），但可以使用内建的 `append` 函数来实现向切片末尾添加元素的效果。\n\n### 使用 `append` 函数添加元素\n\n`append` 函数可以将一个或多个新的元素添加到切片的末尾，并返回一个包含了这些新元素的新切片。如果原始切片有足够的容量来存储新增的元素，`append` 会直接在原切片的末尾添加这些元素。否则，它会自动分配一个新的底层数组，将原切片的元素和新元素一起复制到这个新数组中，然后返回这个新数组的切片表示。\n\n### 示例\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    // 创建一个整数切片\n    slice := []int{1, 2, 3}\n\n    // 向切片末尾添加一个元素\n    slice = append(slice, 4)\n\n    // 向切片末尾添加多个元素\n    slice = append(slice, 5, 6, 7)\n\n    fmt.Println(slice)\n}\n```\n\n输出将是：\n\n```\n[1 2 3 4 5 6 7]\n```\n\n### 注意事项\n\n- **容量自动扩展**：`append` 操作可能会导致切片的容量增加。如果原切片的底层数组没有足够的空间来存放新添加的元素，Go 语言运行时会自动分配一个新的、更大的数组，并将原切片的元素以及新元素一起复制到这个新数组中。\n- **返回值**：不要忘记 `append` 函数返回的是更新后的切片。你需要用返回的切片来更新你的切片变量，否则添加的新元素不会被保存。\n\n通过上面的示例和说明，你可以看到在 Go 语言中，虽然没有直接的 `push back` 函数或方法，但是通过使用 `append` 函数，我们可以轻松实现向切片末尾添加新元素的功能。\n\n## Go 切片怎样自动扩展\n在 Go 语言中，切片的自动扩展是通过内建的 `append` 函数来实现的。当你向一个切片添加元素，而该切片的底层数组没有足够的空间容纳更多元素时，`append` 会自动处理切片的扩容。这个过程涉及到分配一个新的底层数组，并将原有元素以及新添加的元素复制到这个新数组中。切片的容量（capacity）是指底层数组能够容纳的元素总数。\n\n### 扩容机制\n\n当使用 `append` 向切片添加元素，导致切片的长度超过其容量时，Go 语言运行时会自动进行如下步骤：\n\n1. **分配一个新的底层数组**：新数组的容量通常是原数组容量的两倍，但这个增长因子可能根据添加的元素数量和切片的当前容量而变化，尤其是在切片的容量非常大或者添加了多个元素的情况下。\n2. **复制原有元素到新数组**：原切片的元素会被复制到新的底层数组中。\n3. **添加新元素**：新的元素会被添加到复制的元素之后。\n4. **返回新切片**：函数返回新的切片，这个切片引用了新的底层数组，并更新了其长度和容量。\n\n### 示例代码\n\n下面的示例演示了如何通过 `append` 自动扩展切片的容量。\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    slice := make([]int, 0, 2) // 创建一个初始容量为2的切片\n\n    // 打印初始切片的长度和容量\n    fmt.Printf(\"Initial: Length=%d, Capacity=%d\\n\", len(slice), cap(slice))\n\n    // 向切片添加元素，超过其初始容量\n    for i := 1; i <= 5; i++ {\n        slice = append(slice, i)\n        // 打印每次添加元素后切片的长度和容量\n        fmt.Printf(\"After appending %d: Length=%d, Capacity=%d\\n\", i, len(slice), cap(slice))\n    }\n}\n```\n\n在这个示例中，初始切片的容量是2，但是随着元素的添加，切片的容量会自动增长，以容纳更多的元素。你会注意到，每当切片的容量不足以添加更多元素时，其容量会增加，通常是翻倍，尽管具体的增长策略可能会有所不同。\n\n### 注意事项\n\n- **性能考虑**：虽然 `append` 可以自动扩展切片的容量，但频繁地重新分配内存和复制数据可能会影响性能。如果你预先知道大概需要多少容量，使用 `make` 预分配一个足够大的切片可能会更高效。\n- **扩容策略**：Go 语言的切片扩容策略可能会因版本和具体实现而略有差异。通常，对于较小的切片，扩容会翻倍其容量；对于较大的切片，增长因子可能会小于2，以减少因为扩容而浪费的内存。\n\n## Go 实现stack 和 queue\n在 Go 语言中，没有内置的栈（Stack）和队列（Queue）数据结构，但是可以使用切片（Slice）非常容易地实现它们。切片提供了灵活的操作，如 `append` 函数和切片操作，使得实现栈和队列成为可能。\n\n### 栈（Stack）\n\n栈是一种后进先出（LIFO, Last In First Out）的数据结构，主要操作有：\n\n- **Push**：将一个元素放入栈顶。\n- **Pop**：从栈顶移除一个元素。\n\n#### 实现栈\n\n```go\npackage main\n\nimport \"fmt\"\n\ntype Stack []int\n\n// Push 添加一个元素到栈顶\nfunc (s *Stack) Push(v int) {\n    *s = append(*s, v)\n}\n\n// Pop 从栈顶移除一个元素\nfunc (s *Stack) Pop() int {\n    if len(*s) == 0 {\n        fmt.Println(\"Stack is empty!\")\n        return -1 // 返回 -1 表示栈为空\n    }\n    index := len(*s) - 1    // 获取栈顶元素索引\n    element := (*s)[index]  // 获取栈顶元素\n    *s = (*s)[:index]       // 移除栈顶元素\n    return element\n}\n\nfunc main() {\n    var stack Stack\n\n    stack.Push(1)\n    stack.Push(2)\n    stack.Push(3)\n\n    fmt.Println(stack.Pop()) // 输出: 3\n    fmt.Println(stack.Pop()) // 输出: 2\n    fmt.Println(stack.Pop()) // 输出: 1\n}\n```\n\n### 队列（Queue）\n\n队列是一种先进先出（FIFO, First In First Out）的数据结构，主要操作有：\n\n- **Enqueue**：在队列末尾添加一个元素。\n- **Dequeue**：从队列开头移除一个元素。\n\n#### 实现队列\n\n```go\npackage main\n\nimport \"fmt\"\n\ntype Queue []int\n\n// Enqueue 在队列末尾添加一个元素\nfunc (q *Queue) Enqueue(v int) {\n    *q = append(*q, v)\n}\n\n// Dequeue 从队列开头移除一个元素\nfunc (q *Queue) Dequeue() int {\n    if len(*q) == 0 {\n        fmt.Println(\"Queue is empty!\")\n        return -1 // 返回 -1 表示队列为空\n    }\n    element := (*q)[0]    // 获取队列开头元素\n    *q = (*q)[1:]         // 移除队列开头元素\n    return element\n}\n\nfunc main() {\n    var queue Queue\n\n    queue.Enqueue(1)\n    queue.Enqueue(2)\n    queue.Enqueue(3)\n\n    fmt.Println(queue.Dequeue()) // 输出: 1\n    fmt.Println(queue.Dequeue()) // 输出: 2\n    fmt.Println(queue.Dequeue()) // 输出: 3\n}\n```\n\n在这些示例中，我们使用了切片和其操作来实现栈和队列的基本功能。这两种数据结构在实际应用中非常有用，特别是在需要特定数据处理顺序的场合。通过简单的方法，Go 语言使得实现这些数据结构变得既简单又直接。\n\n## make函数在Go中的作用\n在 Go 语言中，`make` 函数是一个特殊的内置函数，它被用来初始化并分配内存给内置的数据类型，如切片（slice）、映射（map）和通道（channel）。不同于 `new` 函数，`make` 返回的是类型的初始化值，而不是指向该值的指针。`make` 的使用对于这些复合类型的正确初始化和使用是必要的，因为它们需要在内存中进行特定的布局和初始化。\n\n### 作用\n\n1. **切片（Slice）**：\n   - `make` 用于创建一个具有指定长度和容量的切片。如果未指定容量，那么容量将与长度相同。\n   - 使用 `make` 创建切片可以直接使用，无需担心初始值，因为所有元素都会被初始化为其类型的零值。\n   - 示例：`s := make([]int, 5, 10)` 创建了一个长度为 5，容量为 10 的 `int` 类型切片 `s`。\n\n2. **映射（Map）**：\n   - `make` 用于创建一个映射，并分配足够的内存，以便它可以开始存储键值对。创建的映射将为空，没有任何键值对。\n   - 使用 `make` 可以确保返回的映射是可用的，避免了将 `nil` 映射用于赋值或操作的错误。\n   - 示例：`m := make(map[string]int)` 创建了一个键类型为 `string`，值类型为 `int` 的空映射 `m`。\n\n3. **通道（Channel）**：\n   - `make` 用于创建一个通道，并指定其可以存储的值的类型以及（可选的）缓冲大小。\n   - 创建通道后，可以在协程（goroutines）之间用于通信和同步。\n   - 示例：`ch := make(chan int, 5)` 创建了一个可以存储 `int` 类型值，且有 5 个缓冲空间的通道 `ch`。\n\n### 语法\n\n```go\nmake(T, size, ...optional capacity)\n```\n\n- `T`：要创建的类型（切片、映射或通道）。\n- `size`：对于切片，它是长度（length）；对于通道，它是缓冲大小（buffer capacity）。对于映射，此参数通常省略，因为映射的大小是动态增长的。\n- `optional capacity`：可选，仅用于切片，指定切片的容量（capacity）。如果省略，容量将与长度相同。\n\n### 注意\n\n- 使用 `make` 初始化的数据结构（切片、映射、通道）可以直接使用，而无需进一步的分配或初始化。\n- 对于其他类型，如自定义结构体或基本数据类型，应使用 `new` 函数或字面量构造进行初始化。\n- `make` 仅适用于切片、映射和通道，尝试用于其他类型将导致编译错误。\n\n通过正确使用 `make` 函数，Go 程序员可以确保他们的数据结构被正确初始化，准备好安全地用于后续操作。\n\n## go中怎么样实现Equaler接口\n在Go语言中，实现一个`Equaler`接口主要涉及到定义一个接口，该接口包含一个方法，用于比较两个对象是否相等。这样的接口可以被任何想要支持等值比较操作的类型实现。下面是如何定义和实现这样一个`Equaler`接口的示例：\n\n### 步骤 1: 定义`Equaler`接口\n\n首先，你需要定义`Equaler`接口。通常，这个接口会包含一个`Equal`方法，这个方法接受另一个相同类型的对象作为参数，并返回一个布尔值，表示这两个对象是否相等。\n\n```go\npackage main\n\n// Equaler 接口定义了一个方法 Equal，任何实现了这个接口的类型\n// 都必须提供 Equal 方法的具体实现。\ntype Equaler interface {\n    Equal(other Equaler) bool\n}\n```\n\n### 步骤 2: 实现`Equaler`接口\n\n然后，你可以为你自己的类型实现`Equaler`接口。假设你有一个`Point`类型，你想要比较两个`Point`实例是否相等。\n\n```go\npackage main\n\nimport \"math\"\n\n// Point 表示一个二维点。\ntype Point struct {\n    X, Y float64\n}\n\n// Equal 实现了 Equaler 接口，用于比较两个 Point 是否相等。\n// 这里的other参数需要被类型断言为*Point，以便进行比较。\nfunc (p *Point) Equal(other Equaler) bool {\n    otherPoint, ok := other.(*Point)\n    if !ok {\n        return false\n    }\n    return math.Abs(p.X-otherPoint.X) < 0.001 && math.Abs(p.Y-otherPoint.Y) < 0.001\n}\n```\n\n### 注意事项\n\n- 在`Equal`方法中，参数`other`被定义为`Equaler`类型。这允许方法接受任何实现了`Equaler`接口的类型。然而，在实际的比较中，你通常需要将`other`类型断言为你需要比较的具体类型（在这个例子中是`*Point`），以便能够访问该类型的字段。\n- 使用类型断言（`otherPoint, ok := other.(*Point)`）时，需要处理断言失败的情况。如果断言失败，表示`other`不是一个`*Point`实例，此时应当返回`false`。\n- 比较浮点数时使用了一个小的容忍度值（`0.001`）来判断两个点是否相等。这是因为直接比较浮点数可能会因为精度问题而导致不准确的比较结果。\n\n通过这种方式，你可以为任何类型实现`Equaler`接口，只要提供了一个适当的`Equal`方法即可。这种接口抽象允许你编写更通用、更灵活的代码，因为你可以编写依赖于`Equaler`接口的函数或方法，而不是依赖于特定的类型。\n\n## go中能否让自定义的类型也可以使用==来比较\n在Go语言中，使用`==`运算符来比较两个值是否相等的能力是内建的，且适用于所有基本类型（如`int`、`float64`、`string`等）和一些复合类型（如数组）。对于自定义的类型，能否使用`==`取决于该类型的底层类型：\n\n1. **基本类型和结构体**：如果你的自定义类型是基于基本类型的（例如通过`type`关键字定义的新类型），那么可以直接使用`==`进行比较，因为这种比较是对其底层类型进行的。对于结构体，如果所有字段都可以比较，则可以使用`==`来比较两个结构体实例是否相等。\n\n2. **切片、映射和函数类型**：对于这些类型，即使是作为自定义类型的底层类型，也不能使用`==`进行比较（切片、映射、函数只能和`nil`进行比较）。尝试这样做会导致编译错误。\n\n### 示例\n\n- **基于基本类型的自定义类型**：\n\n```go\npackage main\n\nimport \"fmt\"\n\ntype MyInt int\n\nfunc main() {\n    var a MyInt = 5\n    var b MyInt = 5\n    fmt.Println(a == b) // 输出: true\n}\n```\n\n这里，`MyInt`是基于`int`类型的自定义类型，所以可以使用`==`来比较。\n\n- **结构体类型**：\n\n```go\npackage main\n\nimport \"fmt\"\n\ntype Point struct {\n    X, Y int\n}\n\nfunc main() {\n    p1 := Point{X: 1, Y: 2}\n    p2 := Point{X: 1, Y: 2}\n    fmt.Println(p1 == p2) // 输出: true\n}\n```\n\n在这个例子中，`Point`是一个结构体类型，由于它的所有字段都是可以比较的类型，所以两个`Point`类型的实例可以使用`==`进行比较。\n\n总结来说，是否可以使用`==`来比较自定义类型的值取决于该类型的底层类型以及是否满足Go语言中`==`运算符适用的类型约束。对于复杂类型或需要更灵活的比较逻辑的情况，通常会实现一个比较函数或方法，如上一条回答中所述的`Equaler`接口实现。\n\n## append是不是永远不会改变传入的切片的值\n`append`函数在Go语言中的行为有一些特点需要理解，尤其是关于它如何影响传入的切片的值。`append`操作本身不会直接修改传入的切片的元素。但是，它可能会改变切片的长度和容量，以及返回一个可能指向新数组的切片。这里有几个关键点需要注意：\n\n1. **不修改原切片元素**：`append`不会改变原有切片中的元素值。如果`append`操作不导致扩容，添加的元素会出现在原有元素之后。\n\n2. **可能返回新的切片**：如果`append`操作导致了切片扩容（即，需要更多的容量来容纳新元素），Go将分配一个新的数组，并将原切片的元素以及新添加的元素复制到这个新数组中。这时，`append`返回的切片将指向这个新的数组，而原来的切片仍指向原来的数组。\n\n3. **不改变原切片引用**：重要的是，无论`append`操作是否导致扩容，它都不会更改传入切片本身的引用。换句话说，`append`函数对原切片的修改是通过返回一个新的切片实现的，而不是直接修改传入的切片变量。\n\n### 例子\n\n下面的例子展示了`append`如何工作，以及它是如何影响切片的：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    originalSlice := []int{1, 2, 3}\n    fmt.Println(\"Original slice:\", originalSlice)\n\n    // Append without capacity overflow\n    modifiedSlice := append(originalSlice, 4)\n    fmt.Println(\"Modified slice:\", modifiedSlice)\n    fmt.Println(\"Original slice after append:\", originalSlice)\n\n    // Append that causes capacity overflow\n    for i := 5; i <= 10; i++ {\n        modifiedSlice = append(modifiedSlice, i)\n    }\n    fmt.Println(\"Modified slice after more appends:\", modifiedSlice)\n    fmt.Println(\"Original slice remains unchanged:\", originalSlice)\n}\n```\n\n在这个例子中，`originalSlice`在初次`append`后仍指向原来的数组，`modifiedSlice`可能也指向同一个数组（如果没有超出容量）或者指向一个新的数组（如果执行了扩容）。通过连续的`append`操作，最终`modifiedSlice`将指向一个不同的、更大的数组，而`originalSlice`保持不变，仍然指向最初的数组。\n\n综上所述，`append`操作不会改变传入切片的值或其指向的数组中的元素，但它会根据需要扩容的情况返回一个新的切片，这个新切片可能指向一个新的底层数组。\n\n## go 什么时候用make\n在Go语言中，`nil`是一个预定义的标识符，用于表示指针、通道、函数、接口、映射或切片类型的零值。简而言之，`nil`用于表示一个未初始化的引用或一个空的引用。以下是`nil`在不同上下文中的含义和作用：\n\n1. **指针**：对于指针类型，`nil`表示没有指向任何对象的指针。\n2. **切片**：对于切片类型，`nil`表示没有分配空间的切片。一个`nil`切片的长度和容量都是0，但它不等同于空切片（例如`[]int{}`）。\n3. **映射**：对于映射类型，`nil`表示没有分配空间的映射。尝试向一个`nil`映射添加键值对会引发运行时panic。\n4. **通道**：对于通道类型，`nil`表示没有分配空间的通道。向`nil`通道发送或从中接收会永远阻塞。\n5. **函数**：对于函数类型，`nil`可以表示一个没有被赋予任何实际函数的函数变量。\n6. **接口**：对于接口类型，`nil`表示没有绑定实现的接口。一个`nil`接口既没有存储任何值，也没有具体类型。\n\n### 为什么需要`nil`？\n\n`nil`的存在使得Go语言的错误处理和资源管理变得更加灵活和简洁。以下是一些使用`nil`的理由：\n\n- **区分初始化状态**：通过检查一个变量是否为`nil`，可以轻松判断出该变量是否已经初始化。这在处理可选的或者延迟初始化的资源时非常有用。\n- **简化错误处理**：在Go中，返回错误的惯用方式是返回一个值和一个`error`类型的值。如果没有错误发生，这个`error`类型的值通常会被设置为`nil`，这样调用者就可以通过检查`error`是否为`nil`来判断操作是否成功。\n- **节省资源**：`nil`切片和`nil`映射在没有分配内存之前不占用额外的内存，这允许开发者在不需要立即使用这些类型的情况下，延迟内存分配，从而更有效地使用资源。\n\n总之，`nil`在Go语言中扮演着重要的角色，它不仅帮助标识变量的初始化状态，还参与错误处理和资源管理，使代码更加简洁和高效。\n\n## 为什么map需要make\n在Go语言中，映射（map）是一种内建的数据类型，用于存储键值对的集合。映射的键可以是任何可比较的类型，例如整数、字符串等。映射的特性使其成为存储和检索数据的强大工具。然而，与其他一些语言不同，Go的映射需要通过`make`函数进行初始化才能使用，原因包括：\n\n1. **内存分配**：映射在Go中是引用类型，这意味着当你声明一个映射变量时，变量本身并不直接包含数据，而是指向数据所在的内存地址。使用`make`函数初始化映射可以为其分配内存空间，从而使映射准备好存储键值对。如果不通过`make`进行初始化，映射变量将是`nil`，试图向其添加数据将导致运行时panic。\n\n2. **避免`nil`映射的错误**：直接使用未经初始化的`nil`映射进行赋值操作会导致运行时错误，因为`nil`映射没有分配内存空间，无法存储任何数据。通过`make`函数创建映射，你可以确保映射已经准备好接收数据，避免这种类型的错误。\n\n3. **性能优化**：使用`make`函数初始化映射时，可以选择性地指定初始容量，这有助于提高映射操作的效率。指定一个接近或等于预期存储元素数量的初始容量可以减少映射在存储数据时需要进行的内存重新分配的次数，从而提高性能。\n\n   示例：\n   ```go\n   m := make(map[string]int, 100) // 创建一个初始容量为100的映射\n   ```\n\n简而言之，通过`make`初始化映射是为了为其分配内存，确保映射在使用前是非`nil`的，从而可以安全地添加或访问键值对。此外，`make`还提供了一种方式来优化映射的内存使用和性能。\n\n## 如何复制一个map\n在Go语言中，没有直接复制一个映射（map）的内建方法，因为映射是引用类型。如果你想复制一个映射，需要手动创建一个新映射并将原映射中的所有键值对复制到新映射中。这可以通过遍历原映射并将每个键值对添加到新映射来实现。以下是一个如何复制映射的示例：\n\n```go\nfunc CopyMap(originalMap map[string]int) map[string]int {\n    // 创建一个新的映射，用于存储复制的键值对\n    newMap := make(map[string]int)\n\n    // 遍历原映射，复制每个键值对到新映射\n    for key, value := range originalMap {\n        newMap[key] = value\n    }\n\n    // 返回新的映射副本\n    return newMap\n}\n```\n\n在这个例子中，`CopyMap`函数接受一个`map[string]int`类型的映射作为参数，创建一个新的同类型映射，并遍历原映射，将所有键值对复制到新映射中。最后，函数返回这个新映射，实现了映射的复制。\n\n需要注意的是，这种复制方法是浅复制（shallow copy），意味着如果映射的值是指针或包含指针的复杂类型（如切片、映射等），那么复制的是指针本身，而不是它指向的数据。如果需要深复制（deep copy）这样的值，你需要实现更复杂的逻辑来复制指针指向的数据，而不仅仅是指针本身。\n\n## go实现stack\n在Go语言中，可以使用切片（slice）来实现一个栈（stack）。栈是一种后进先出（LIFO）的数据结构，支持两个基本操作：push（向栈中添加一个元素）和pop（从栈中移除最顶端的元素）。下面是如何使用切片实现栈的一个简单例子：\n\n```go\npackage main\n\nimport \"fmt\"\n\n// Stack 表示栈的结构体\ntype Stack struct {\n    elements []int // 使用切片存储栈元素\n}\n\n// NewStack 创建并返回一个空栈\nfunc NewStack() *Stack {\n    return &Stack{[]int{}}\n}\n\n// Push 向栈中添加一个元素\nfunc (s *Stack) Push(element int) {\n    s.elements = append(s.elements, element)\n}\n\n// Pop 从栈中移除最顶端的元素并返回该元素\n// 如果栈为空，返回0和一个错误\nfunc (s *Stack) Pop() (int, error) {\n    if len(s.elements) == 0 {\n        return 0, fmt.Errorf(\"stack is empty\")\n    }\n    // 获取栈顶元素\n    topElement := s.elements[len(s.elements)-1]\n    // 移除栈顶元素\n    s.elements = s.elements[:len(s.elements)-1]\n    return topElement, nil\n}\n\n// IsEmpty 检查栈是否为空\nfunc (s *Stack) IsEmpty() bool {\n    return len(s.elements) == 0\n}\n\n// Size 返回栈的大小\nfunc (s *Stack) Size() int {\n    return len(s.elements)\n}\n\nfunc main() {\n    stack := NewStack()\n    stack.Push(1)\n    stack.Push(2)\n    fmt.Println(stack.Pop()) // 输出：2 <nil>\n    fmt.Println(stack.IsEmpty()) // 输出：false\n    fmt.Println(stack.Size()) // 输出：1\n}\n```\n\n这个例子中，`Stack`类型使用一个`int`类型的切片来存储栈元素。`Push`方法通过`append`函数将一个新元素添加到切片的末尾，实现了向栈中添加元素。`Pop`方法检查栈是否为空，如果不为空，则移除并返回切片的最后一个元素，模拟了从栈中移除元素的操作。此外，`IsEmpty`和`Size`方法分别用于检查栈是否为空和获取栈的大小。\n\n这个栈的实现是泛型的基础版本，只能存储`int`类型的元素。如果需要一个能够存储任何类型元素的栈，可以考虑使用`interface{}`类型代替`int`，或者使用Go 1.18及以上版本引入的泛型特性来实现。\n\n## go语言new的作用\n在Go语言中，`new`是一个内置的函数，用于分配并初始化一个类型的空间，并返回指向这个新分配空间的指针。`new(T)`将分配类型`T`的零值内存空间，并返回一个指向该空间的指针，其类型为`*T`，其中`T`表示任意给定的类型。使用`new`分配的空间被初始化为类型的零值，例如，数值类型的零值是`0`，布尔类型的零值是`false`，指针类型的零值是`nil`等。\n\n### 使用`new`的示例\n\n假设你有一个简单的结构体：\n\n```go\ntype MyStruct struct {\n    Field1 int\n    Field2 string\n}\n```\n\n你可以使用`new`来创建这个结构体的一个实例：\n\n```go\nms := new(MyStruct)\n```\n\n这行代码将分配`MyStruct`的内存，并将`ms`初始化为指向这块内存的指针。由于使用了`new`，`MyStruct`中的字段`Field1`和`Field2`会被初始化为它们各自类型的零值，即`Field1`为`0`，`Field2`为`\"\"`（空字符串）。\n\n### `new`与复合字面量的区别\n\n虽然`new`可以用来创建类型的实例并获取其指针，Go语言还提供了另一种创建并初始化类型实例的方法，即使用复合字面量（composite literals）：\n\n```go\nms := &MyStruct{}\n```\n\n这种方法不仅创建了`MyStruct`的实例，并将其初始化为零值，还返回了指向这个实例的指针，类似于`new(MyStruct)`的作用。不过，复合字面量还允许你在创建实例的同时初始化字段值：\n\n```go\nms := &MyStruct{Field1: 10, Field2: \"Hello\"}\n```\n\n### 总结\n\n`new`函数在Go中用于分配并初始化一个类型的零值实例，并返回指向这个实例的指针。尽管`new`在某些情况下很有用，但在Go中，使用复合字面量初始化结构体及其指针更加常见，因为这种方法更灵活，可以直接在创建实例时初始化字段。\n\n## go range 本质\n在Go语言中，`range`是一个用于迭代各种集合元素的关键字，包括数组、切片、映射、字符串和通道（channel）。`range`的本质是提供了一种简洁的语法来遍历容器类型的元素，而具体的迭代逻辑是根据被迭代对象的类型而内置在Go语言中的。下面是`range`用法的一些关键点，帮助理解其本质：\n\n### 1. 数组和切片\n\n当使用`range`迭代数组或切片时，它会返回每个元素的索引和该索引处的值的副本。因为是副本，所以在迭代过程中修改这些值不会影响到原数组或切片中的元素。\n\n```go\nslice := []int{1, 2, 3}\nfor i, v := range slice {\n    fmt.Println(i, v) // i 是索引，v 是该索引处的值的副本\n}\n```\n\n### 2. 映射（Map）\n\n迭代映射时，`range`返回每个键值对的键和值。由于映射的迭代顺序是不确定的，每次迭代同一个映射可能会得到不同的顺序。\n\n```go\nm := map[string]int{\"a\": 1, \"b\": 2}\nfor k, v := range m {\n    fmt.Println(k, v) // k 是键，v 是对应的值\n}\n```\n\n### 3. 字符串\n\n对于字符串，`range`迭代的是Unicode字符（rune），而不是字节。它返回当前字符的字节索引（不一定连续，因为Unicode字符可能占多个字节）和字符本身的rune值。\n\n```go\ns := \"Go语言\"\nfor i, r := range s {\n    fmt.Println(i, r) // i 是rune的起始字节索引，r 是rune值\n}\n```\n\n### 4. 通道（Channel）\n\n当从通道中迭代时，`range`会连续从通道接收值，直到通道被关闭。\n\n```go\nc := make(chan int)\ngo func() {\n    c <- 1\n    c <- 2\n    close(c)\n}()\nfor v := range c {\n    fmt.Println(v) // v 是从通道接收到的值\n}\n```\n\n### 本质理解\n\n`range`的本质是语法糖，它为不同的集合类型提供了一种统一的迭代接口。在底层，Go语言根据被迭代对象的类型执行相应的迭代逻辑。这种设计简化了遍历数据结构的代码，使得开发者可以使用相同的语法模式来迭代不同类型的集合，而无需担心每种类型背后具体的迭代实现细节。\n\n## go string如何push_back\n在Go语言中，字符串（`string`）是不可变的，这意味着一旦一个字符串被创建，它所包含的内容就不能被修改了。因此，Go中的字符串没有类似C++中`std::string`的`push_back`方法来直接在字符串的末尾添加一个字符。但是，你可以通过字符串连接的方式来“添加”字符或者另一个字符串到现有字符串的末尾，从而实现类似`push_back`的功能。\n\n使用`+`操作符或`fmt.Sprintf`函数是实现这一点的常见方法：\n\n### 使用`+`操作符\n\n```go\ns := \"hello\"\ns += \" world\" // 将\" world\"添加到\"hello\"的末尾\nfmt.Println(s) // 输出: \"hello world\"\n```\n\n### 使用`fmt.Sprintf`\n\n```go\ns := \"hello\"\ns = fmt.Sprintf(\"%s%s\", s, \" world\") // 将\" world\"添加到\"hello\"的末尾\nfmt.Println(s) // 输出: \"hello world\"\n```\n\n如果你只想添加一个字符，可以将该字符先转换为字符串：\n\n```go\ns := \"hello\"\nc := '!' // 字符类型在Go中是rune\ns += string(c) // 将字符'!'添加到\"hello\"的末尾\nfmt.Println(s) // 输出: \"hello!\"\n```\n\n请记住，每次字符串连接操作实际上都会创建一个新的字符串，因为Go中的字符串是不可变的。如果你需要执行大量的字符串连接操作，使用`strings.Builder`类型可能会更高效：\n\n### 使用`strings.Builder`\n\n```go\nvar builder strings.Builder\nbuilder.WriteString(\"hello\")\nbuilder.WriteString(\" world\")\nfmt.Println(builder.String()) // 输出: \"hello world\"\n```\n\n`strings.Builder`提供了一个可变的字符串缓冲区，可以更高效地构建字符串，特别是在涉及到大量字符串拼接操作时。它在内部管理一个字节切片（`[]byte`）来避免多次分配和复制字符串带来的性能开销。\n\n## 介绍go中的错误处理\n在Go语言中，错误处理是通过使用`error`接口类型来实现的，这与许多其他语言使用异常（exceptions）的方式有所不同。`error`类型是Go语言标准库中的一个接口，定义如下：\n\n```go\ntype error interface {\n    Error() string\n}\n```\n\n任何拥有`Error() string`方法的类型都可以实现`error`接口，从而成为一个可以用于错误处理的错误类型。Go语言鼓励显式的错误处理，这意味着函数在遇到错误情况时，通常会返回一个错误值（实现了`error`接口的值），调用者应检查此返回值来决定如何应对错误。\n\n### 错误处理的惯用法\n\n在Go中处理错误的典型方式是通过检查函数的返回值中的错误值：\n\n```go\nresult, err := someFunction()\nif err != nil {\n    // 处理错误\n    fmt.Println(\"发生错误：\", err)\n    return // 或者其他错误处理\n}\n// 继续正常逻辑\n```\n\n### 自定义错误\n\n你可以通过实现`error`接口创建自定义错误类型。这通常通过定义一个结构体，然后为它实现`Error() string`方法来完成：\n\n```go\ntype MyError struct {\n    Message string\n    Code    int\n}\n\nfunc (e *MyError) Error() string {\n    return fmt.Sprintf(\"%d - %s\", e.Code, e.Message)\n}\n\n// 使用自定义错误的函数示例\nfunc doSomething() error {\n    // 假设发生了某种错误情况\n    return &MyError{Message: \"出了点问题\", Code: 404}\n}\n```\n\n### 错误检查与处理\n\nGo语言的错误处理模式鼓励开发者显式地检查和处理错误，这可以让错误的来源和处理更加清晰，有助于编写可靠和容易维护的代码。虽然这种方式可能使代码量略增，但它提高了程序的稳定性和可读性。\n\n### `errors`包和`fmt.Errorf`\n\nGo标准库提供了`errors`包，用于简化常见错误的创建。使用`errors.New`函数可以快速创建一个基本的错误实例：\n\n```go\nimport \"errors\"\n\nerr := errors.New(\"发生了一个错误\")\n```\n\n另外，`fmt`包的`Errorf`函数可以用来格式化错误信息并返回一个错误。这是创建带有格式化信息的错误的便捷方式：\n\n```go\nerr := fmt.Errorf(\"发生了错误：%v\", \"具体信息\")\n```\n\n### 错误处理的进阶使用\n\n在一些复杂的应用场景中，Go语言的错误处理还涉及错误的封装（wrapping）、检查（inspection）、以及自定义错误类型的设计，以满足更高级的错误处理需求。从Go 1.13开始，标准库`errors`包引入了对错误封装和展开的支持，使得错误处理更加灵活。\n\n## Go的错误处理，和其他语言相比，优点是什么？缺点是什么？\nGo语言的错误处理模型有其独特之处，相较于其他编程语言，这种模型既有优点也有缺点。\n\n### 优点\n\n1. **简明易懂**：Go的错误处理非常直接。函数要么成功并返回结果，要么失败并返回错误。这种明确性使得错误处理逻辑易于理解和维护。\n2. **显式错误处理**：强制要求检查错误迫使开发者面对可能出现的错误情况，这有助于提高代码的健壮性。在Go中，忽略错误不是默许的做法，这与一些其他语言中可能通过异常处理隐式地忽略错误的情况不同。\n3. **灵活性**：由于错误被视为普通值，开发者可以使用Go的所有语言特性来处理错误，比如可以很容易地将错误信息记录到日志、添加额外的上下文信息，或者根据错误类型进行不同的处理。\n4. **性能**：相比异常处理机制，Go的错误处理方式通常有更好的性能。在Go中，错误作为返回值处理，避免了异常处理可能带来的性能开销。\n\n### 缺点\n\n1. **代码冗余**：在每个可能发生错误的函数调用后都需要检查错误，这可能会导致大量重复的错误检查代码。虽然这提高了代码的明确性和可靠性，但也使得代码更加冗长。\n2. **错误处理分散**：错误需要在它们发生的地方立即被处理，这可能导致错误处理逻辑分散在代码库的各个部分，而不是集中处理。\n3. **缺乏统一的错误处理结构**：虽然Go的`interface{}`类型允许以统一的方式处理所有错误，但标准库并没有提供一个统一处理错误的结构或者模式，这可能导致不同的开发者或团队采用不同的错误处理策略，降低了代码的一致性。\n4. **功能限制**：与支持异常的语言相比，Go的错误处理模型在某些情况下可能不够灵活。例如，在需要清理资源的情况下，缺少类似于其他语言中`finally`块的机制，尽管可以通过`defer`语句在某种程度上实现相似的功能。\n\n总体而言，Go的错误处理模型强调简洁性和明确性，鼓励开发者显式地处理每个可能出现的错误。这种模型有其明显的优势，特别是在提高代码可读性和可维护性方面，但也要求开发者付出更多努力来管理错误处理代码的冗余和分散。\n\n## Go的错误处理和java，C++相比？\nGo语言的错误处理与Java和C++的异常处理机制有显著不同。每种语言的错误处理机制都有其设计哲学、优势和局限。下面是一个比较概览：\n\n### Go\n\n- **错误作为值**：在Go中，错误被视为值，通过`error`接口表示。函数通常返回一个错误值，以指示是否发生了错误。\n- **显式检查**：调用者必须显式检查错误值，以决定是否成功执行了函数。\n- **无异常机制**：Go语言没有异常机制。所有的错误都通过正常的控制流和值来处理。\n\n**优势**：\n- 易于理解和预测错误处理的流程。\n- 鼓励开发者面对并显式处理错误情况。\n\n**局限**：\n- 可能导致大量重复的错误检查代码。\n- 错误处理逻辑可能会分散于代码的多个地方。\n\n### Java\n\n- **异常机制**：Java使用异常来处理错误和异常情况。方法可以抛出异常，调用者需要捕获这些异常。\n- **检查型和非检查型异常**：Java区分检查型（必须显式处理）和非检查型异常（可选处理）。\n- **try-catch-finally**：通过`try-catch`语句块捕获和处理异常，`finally`块用于资源清理。\n\n**优势**：\n- 异常提供了一种强制错误处理的机制，有助于捕获运行时错误。\n- 通过异常类型，可以传递丰富的错误信息。\n\n**局限**：\n- 异常可能导致控制流难以跟踪，尤其是在多层嵌套调用中。\n- 过度使用异常可能会影响代码的可读性和性能。\n\n### C++\n\n- **异常机制**：C++同样使用异常来处理错误情况。函数可以抛出异常，使用`try-catch`块捕获异常。\n- **资源管理**：C++提倡RAII（资源获取即初始化）原则，利用对象生命周期自动管理资源，配合异常使用。\n- **noexcept**：C++11引入了`noexcept`关键字，用于指示函数是否抛出异常。\n\n**优势**：\n- 异常允许将错误处理代码从正常逻辑中分离出来，提高代码清晰度。\n- RAII原则和智能指针等机制与异常配合，有效管理资源。\n\n**局限**：\n- 异常可能导致性能开销，特别是在深层嵌套调用中。\n- 需要谨慎管理异常安全性和资源泄漏问题。\n\n### 总结\n\n- **Go**的错误处理模式倾向于简单和显式，强迫开发者面对错误，但可能导致代码冗余。\n- **Java**和**C++**使用异常机制处理错误，能够将错误处理代码与业务逻辑分离，提供更丰富的错误信息，但可能使得控制流程复杂化，且需要注意异常安全性和性能问题。\n\n选择哪种错误处理方式，很大程度上取决于项目的具体需求、团队的偏好和特定语言的生态。\n\n## go中我不想定义自己的err类型，应该用哪种默认的？\n如果你不想在Go中定义自己的错误类型，可以使用标准库`errors`包中的`errors.New`函数来创建一个简单的错误。这种方式适用于那些不需要从错误中提取额外信息的场景。`errors.New`接收一个字符串参数，返回一个符合`error`接口的错误对象。\n\n### 使用`errors.New`\n\n```go\nimport (\n    \"errors\"\n    \"fmt\"\n)\n\nfunc someFunction() error {\n    // 假设发生了某种错误情况\n    return errors.New(\"这里发生了一个错误\")\n}\n\nfunc main() {\n    err := someFunction()\n    if err != nil {\n        fmt.Println(err)\n    }\n}\n```\n\n### 格式化错误信息\n\n如果你需要在错误信息中包含变量或者更复杂的数据结构，可以使用`fmt.Errorf`来代替`errors.New`。`fmt.Errorf`允许你像使用`fmt.Sprintf`一样格式化错误字符串，并返回一个错误对象。\n\n```go\nimport (\n    \"fmt\"\n)\n\nfunc someFunction(param int) error {\n    // 使用 fmt.Errorf 格式化错误信息\n    return fmt.Errorf(\"错误发生在 %d\", param)\n}\n\nfunc main() {\n    err := someFunction(42)\n    if err != nil {\n        fmt.Println(err)\n    }\n}\n```\n\n从Go 1.13开始，`errors`包提供了`As`和`Is`函数，用于检查错误的类型和值。同时，`fmt.Errorf`支持使用`%w`动词来包装错误，使得你可以保留原始错误的同时添加上下文信息。即使你不定义自己的错误类型，这些功能也能帮助你更好地管理和检查错误。\n\n### 使用错误包装\n\n```go\nimport (\n    \"errors\"\n    \"fmt\"\n)\n\nvar ErrSpecific = errors.New(\"特定错误\")\n\nfunc someFunction() error {\n    // 返回一个包装了原始错误的新错误\n    return fmt.Errorf(\"操作失败: %w\", ErrSpecific)\n}\n\nfunc main() {\n    err := someFunction()\n    if errors.Is(err, ErrSpecific) {\n        fmt.Println(\"发生了特定的错误:\", err)\n    }\n}\n```\n\n使用`errors.New`和`fmt.Errorf`可以满足大多数不需要自定义错误类型的场景，并且通过错误包装和检查，你依然可以构建出结构化和可管理的错误处理逻辑。\n\n## 如何判断 map 中是否包含某个 key ？\n```go\nvar sample map[int]int\nif _, ok := sample[10]; ok {\n\n} else {\n\n}\n```\n\n## strings.Join ≈ strings.Builder > bytes.Buffer > \"+\" > fmt.Sprintf\n在Go语言中，拼接字符串可以通过多种方式实现，每种方式在不同场景下的性能和适用性各有差异。下面是对这五种方法——`strings.Join`、`strings.Builder`、`bytes.Buffer`、`\"+\"`操作符、`fmt.Sprintf`——的分析，按照性能从高到低排列：\n\n### 1. `strings.Join`\n\n- **适用场景**：当你有一个字符串切片，需要将其元素连接成一个单独的字符串时，`strings.Join`非常高效。\n- **性能**：通常比`+`操作符和`fmt.Sprintf`更高效，因为它在内部计算结果字符串的确切长度，然后一次性分配足够的内存。\n- **示例**：\n    ```go\n    parts := []string{\"Hello\", \"world\"}\n    result := strings.Join(parts, \" \")\n    ```\n\n### 2. `strings.Builder`\n\n- **适用场景**：对于在循环或多个步骤中构建字符串尤其有用。自Go 1.10引入以来，它是推荐的字符串构建方法。\n- **性能**：提供了高效的字符串构建能力，因为它避免了不必要的内存分配和复制。\n- **示例**：\n    ```go\n    var sb strings.Builder\n    sb.WriteString(\"Hello\")\n    sb.WriteString(\" \")\n    sb.WriteString(\"world\")\n    result := sb.String()\n    ```\n\n### 3. `bytes.Buffer`\n\n- **适用场景**：在需要频繁修改字符串或者处理二进制数据和字符串转换时适用。`bytes.Buffer`与`strings.Builder`类似，但更通用，也支持字节操作。\n- **性能**：虽然性能略低于`strings.Builder`，但在需要处理字节和字符串的场景下是一个很好的选择。\n- **示例**：\n    ```go\n    var buf bytes.Buffer\n    buf.Write([]byte(\"Hello\"))\n    buf.WriteString(\" world\")\n    result := buf.String()\n    ```\n\n### 4. `\"+\"`操作符\n\n- **适用场景**：简单的字符串拼接操作，尤其是少量字符串时。\n- **性能**：在拼接少数几个字符串时性能可接受，但在循环或大量字符串拼接场景中性能较差，因为每次拼接都会产生新的字符串，导致多次内存分配和复制。\n- **示例**：\n    ```go\n    result := \"Hello\" + \" \" + \"world\"\n    ```\n\n### 5. `fmt.Sprintf`\n\n- **适用场景**：需要格式化字符串时，如插入变量、调整格式等。\n- **性能**：相比于其他方法，性能较低，因为它需要解析格式字符串并执行类型断言等操作，但它提供了非常强大的格式化功能。\n- **示例**：\n    ```go\n    name := \"world\"\n    result := fmt.Sprintf(\"Hello %s\", name)\n    ```\n\n### 总结\n\n选择哪种方法取决于具体的应用场景。对于简单或少量的字符串拼接，直接使用`\"+\"`可能是最直观的。当需要构建大量字符串时，`strings.Builder`是首选。`strings.Join`适合已经存储在切片中的字符串拼接。`fmt.Sprintf`提供了格式化的灵活性，适用于需要格式化输出的场景。`bytes.Buffer`则在处理既包含文本又包含二进制数据的情况下非常有用。\n\n## strings.Builder原理\n`strings.Builder` 是 Go 语言在 1.10 版本中引入的一个结构体，它提供了一种高效构建字符串的方法。与其他字符串拼接方法相比，`strings.Builder` 更为高效，主要因为它在内部优化了内存的分配和复制操作。下面是 `strings.Builder` 的一些关键原理和特点：\n\n### 1. 最小化内存分配\n\n`strings.Builder` 在内部维护了一个字节切片（`[]byte`）。当向 `Builder` 添加字符串时，它实际上是将这些字符串的字节追加到内部的字节切片中。`Builder` 会根据需要自动增长这个字节切片的容量，但它尽量通过预分配足够的内存空间来避免频繁的内存重新分配。\n\n### 2. 避免不必要的复制\n\n在传统的字符串拼接操作中，每一次拼接都可能产生一个新的字符串对象，这意味着需要复制字符串的内容到新的内存位置。相比之下，`strings.Builder` 通过直接在已有的字节切片上追加内容，避免了这种复制，从而提升了性能。\n\n### 3. 高效的字符串生成\n\n当调用 `strings.Builder` 的 `String()` 方法来获取最终的字符串时，它会基于内部的字节切片创建一个新的字符串。由于 Go 语言字符串的不可变性，这个操作会涉及一次内存复制。然而，这仅仅发生在整个构建过程的最后，因此相比于多次字符串拼接，总体上仍然大大减少了内存复制的次数。\n\n### 4. `Grow` 方法\n\n`strings.Builder` 提供了 `Grow` 方法，允许手动指定预期需要的额外容量。这可以进一步优化性能，因为它可以在大量数据被写入之前预分配足够的内存，从而避免自动扩容过程中的多次内存分配。\n\n### 5. 安全性\n\n`strings.Builder` 的设计也考虑到了安全性。一旦通过 `String()` 方法获取了最终的字符串，再尝试向 `Builder` 写入新的数据将会导致 panic。这个设计确保了一旦字符串被生成，内部的字节切片不会被进一步修改，保持了字符串不可变的特性。\n\n总的来说，`strings.Builder` 的设计充分利用了 Go 语言的特性，如切片的灵活性和字符串的不可变性，通过减少内存分配和复制的次数，提供了一种高效且安全的方式来构建字符串。\n\n## Go语言 ...是什么\n\n在Go语言中，`...`符号有两个主要用途：\n\n### 1. 可变参数函数（Variadic Function）\n\n当`...`用于函数的参数类型前时，表示该函数可以接收任意数量的该类型的参数。这使得函数可以灵活处理不同数量的参数，类似于其他语言中的可变参数列表。\n\n例如，定义一个可接收多个`int`类型参数的函数，并计算它们的和：\n\n```go\nfunc sum(nums ...int) int {\n    total := 0\n    for _, num := range nums {\n        total += num\n    }\n    return total\n}\n\nfunc main() {\n    fmt.Println(sum(1, 2, 3)) // 输出 6\n    fmt.Println(sum(1, 2, 3, 4, 5)) // 输出 15\n}\n```\n\n在这个例子中，`sum`函数可以接收任意数量的`int`参数。\n\n### 2. 切片参数展开（Slice Unfolding）\n\n当`...`用于调用可变参数函数时，紧跟在切片变量后面，表示将切片的元素展开为参数列表传递给函数。\n\n继续使用上面的`sum`函数作为例子，如果你有一个`int`切片，并希望将其元素作为参数传递给`sum`，可以这样做：\n\n```go\nnums := []int{1, 2, 3, 4, 5}\nfmt.Println(sum(nums...)) // 输出 15\n```\n\n在这个例子中，`nums...`将`nums`切片中的每个元素展开，作为独立的参数传递给`sum`函数。\n\n### 总结\n\n`...`在Go语言中用作可变参数函数定义和切片参数展开的语法元素，提供了编写灵活函数接口和调用的能力。\n","slug":"Go-学习笔记-1","published":1,"updated":"2025-10-11T06:35:31.487Z","comments":1,"layout":"post","photos":[],"_id":"cmgly8kq0000a88vo5qq20xsq","content":"<h1 id=\"ChatGPT摘抄\"><a href=\"#ChatGPT摘抄\" class=\"headerlink\" title=\"ChatGPT摘抄\"></a>ChatGPT摘抄</h1><h2 id=\"Go和C-的区别\"><a href=\"#Go和C-的区别\" class=\"headerlink\" title=\"Go和C++的区别\"></a>Go和C++的区别</h2><p>Go语言（通常称为Golang）和C++在多个方面有显著的区别，包括它们的设计哲学、类型系统、内存管理、并发模型等方面。下面是一些主要的区别：</p>\n<ol>\n<li><p><strong>设计哲学</strong>:</p>\n<ul>\n<li><strong>Go</strong> 设计简洁，以提高开发效率和易用性为目标。它旨在使得编写高性能、可靠、易于维护的代码更加直接和简单。</li>\n<li><strong>C++</strong> 设计为一种通用编程语言，强调性能和灵活性。它支持多种编程范式（如过程式、面向对象、泛型编程），但这也使得它变得相对复杂。</li>\n</ul>\n</li>\n<li><p><strong>类型系统</strong>:</p>\n<ul>\n<li><strong>Go</strong> 有一个静态类型系统，但它的类型推导使得代码更简洁。它支持接口，但不支持类和继承，而是通过组合和接口实现多态和代码复用。</li>\n<li><strong>C++</strong> 也是静态类型的，但它支持更复杂的类型系统，包括类、继承、模板等。这提供了强大的灵活性，但也增加了复杂性。</li>\n</ul>\n</li>\n<li><p><strong>内存管理</strong>:</p>\n<ul>\n<li><strong>Go</strong> 提供自动垃圾收集，减少了内存泄漏的风险，简化了内存管理。</li>\n<li><strong>C++</strong> 需要程序员手动管理内存，虽然提供了智能指针等现代特性来帮助管理，但管理不当仍可能导致内存泄漏和其他问题。</li>\n</ul>\n</li>\n<li><p><strong>并发模型</strong>:</p>\n<ul>\n<li><strong>Go</strong> 的并发模型是其核心特性之一，基于“goroutines”（轻量级线程）和通道。这使得编写并发程序变得更简单和安全。</li>\n<li><strong>C++</strong> 支持多线程，但并发并不是语言核心的一部分。C++11及以后的版本引入了一些并发编程的标准库支持，但使用起来比Go更复杂。</li>\n</ul>\n</li>\n<li><p><strong>标准库和生态系统</strong>:</p>\n<ul>\n<li><strong>Go</strong> 有一个丰富的标准库，尤其是对于网络编程和并发编程。Go的生态系统随着语言的普及而快速增长，特别是在云服务和微服务开发中。</li>\n<li><strong>C++</strong> 拥有庞大的第三方库和工具集，适用于各种编程任务，但标准库相对较小。C++在高性能计算、游戏开发、系统编程等领域有着悠久和广泛的应用。</li>\n</ul>\n</li>\n<li><p><strong>编译和执行</strong>:</p>\n<ul>\n<li><strong>Go</strong> 编译器倾向于生成单个静态链接的二进制文件，简化了部署和分发。</li>\n<li><strong>C++</strong> 通常需要更复杂的构建系统，尤其是对于依赖于多个库和平台的项目。</li>\n</ul>\n</li>\n</ol>\n<p>总之，Go和C++在设计上有根本的不同。Go旨在简化并发编程，提高开发效率，适合快速开发大型分布式系统。而C++提供了更多的控制和灵活性，适合那些需要极致性能优化和复杂系统设计的场景。选择哪种语言取决于项目需求、团队熟悉度和特定任务的需求。</p>\n<h2 id=\"讲一下go语言中的协程\"><a href=\"#讲一下go语言中的协程\" class=\"headerlink\" title=\"讲一下go语言中的协程\"></a>讲一下go语言中的协程</h2><p>Go语言中的协程（goroutine）是Go语言并发设计的核心。goroutine 类似于线程，但在执行和资源消耗方面更为高效。它们由Go运行时（runtime）管理，而不是直接由操作系统管理。这样做的好处是goroutine的创建和销毁的成本比操作系统线程低得多，允许在同一程序中并发运行成千上万的goroutine。</p>\n<h3 id=\"创建goroutine\"><a href=\"#创建goroutine\" class=\"headerlink\" title=\"创建goroutine\"></a>创建goroutine</h3><p>在Go语言中，创建一个goroutine非常简单，只需要在函数调用前加上<code>go</code>关键字。例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> funcName(params)</span><br></pre></td></tr></table></figure>\n\n<p>这会启动一个新的goroutine并在这个新的goroutine中调用<code>funcName</code>函数，<code>params</code>是传递给<code>funcName</code>函数的参数。</p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ol>\n<li><strong>轻量级</strong>：每个goroutine的堆栈大小在初始化时很小，根据需要可以动态地增长和缩减。这种设计让成千上万的goroutine并发运行成为可能。</li>\n<li><strong>不需要显式创建和销毁</strong>：goroutine由Go的运行时环境管理，程序员只需要创建它们，无需关心销毁和回收。</li>\n<li><strong>使用通道（channels）进行通信</strong>：goroutine之间的同步通常通过channels进行，channels是Go语言中的一种类型安全的消息传递机制。使用channels，可以很容易地在goroutine之间传递数据和信号。</li>\n</ol>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>下面的示例展示了如何使用goroutine和channels进行并发编程：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数打印传入的消息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printMessage</span><span class=\"params\">(message <span class=\"type\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">        fmt.Println(message)</span><br><span class=\"line\">        time.Sleep(time.Millisecond * <span class=\"number\">100</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个新的goroutine运行printMessage函数</span></span><br><span class=\"line\">    <span class=\"keyword\">go</span> printMessage(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 主goroutine中也运行printMessage函数</span></span><br><span class=\"line\">    printMessage(<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 等待按键结束程序，避免主goroutine提前结束</span></span><br><span class=\"line\">    fmt.Scanln()</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;done&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>printMessage</code>函数将在两个不同的goroutine中并发执行：一个是通过<code>go printMessage(&quot;hello&quot;)</code>创建的goroutine，另一个是主goroutine。这两个goroutine将并发地运行，打印出交替的”hello”和”world”消息。</p>\n<p>总之，goroutine是实现并发编程的强大工具，它使得编写高性能并发程序在Go语言中变得既简单又高效。</p>\n<h2 id=\"协程和线程的区别是什么\"><a href=\"#协程和线程的区别是什么\" class=\"headerlink\" title=\"协程和线程的区别是什么\"></a>协程和线程的区别是什么</h2><p>协程（Coroutines）和线程（Threads）都是程序执行流的基本单位，它们之间有一些关键的区别和优缺点。理解这些区别有助于选择最适合特定应用需求的并发模型。</p>\n<h3 id=\"1-管理方式\"><a href=\"#1-管理方式\" class=\"headerlink\" title=\"1. 管理方式\"></a>1. 管理方式</h3><ul>\n<li><strong>线程</strong>：通常由操作系统管理。操作系统负责线程的调度和管理，线程切换涉及到上下文切换，包括保存当前线程的状态并恢复另一个线程的状态，这是一个相对昂贵的操作。</li>\n<li><strong>协程</strong>：由程序和运行时（runtime）管理，不直接依赖操作系统的线程管理。协程上下文切换的成本通常比线程低得多，因为这种切换是在用户态完成的，避免了内核态与用户态之间的切换开销。</li>\n</ul>\n<h3 id=\"2-资源消耗\"><a href=\"#2-资源消耗\" class=\"headerlink\" title=\"2. 资源消耗\"></a>2. 资源消耗</h3><ul>\n<li><strong>线程</strong>：每个线程都有自己的堆栈和局部变量，占用的内存量相对较大。线程的数量受到系统资源的限制。</li>\n<li><strong>协程</strong>：通常非常轻量，拥有很小的堆栈和低资源消耗。因此，在同一程序中可以同时运行成千上万个协程。</li>\n</ul>\n<h3 id=\"3-并发模型\"><a href=\"#3-并发模型\" class=\"headerlink\" title=\"3. 并发模型\"></a>3. 并发模型</h3><ul>\n<li><strong>线程</strong>：多线程编程模型可以实现真正的并行执行（在多核处理器上），但线程间的同步和通信（如使用锁、信号量等）可能导致复杂的竞态条件和死锁问题。</li>\n<li><strong>协程</strong>：通常在单线程中运行，实现并发而非并行。协程之间的通信和同步通过使用消息传递（如Go语言的channels）或事件循环（如Python的asyncio）等机制，这些机制旨在避免传统的锁和条件变量带来的问题。</li>\n</ul>\n<h3 id=\"4-控制流\"><a href=\"#4-控制流\" class=\"headerlink\" title=\"4. 控制流\"></a>4. 控制流</h3><ul>\n<li><strong>线程</strong>：操作系统控制线程的调度，程序员通常不能精确控制执行流的切换点。</li>\n<li><strong>协程</strong>：提供了更精细的控制能力，允许程序员确定何时以及如何切换任务，通过这种方式，可以更容易地编写非阻塞代码和管理并发。</li>\n</ul>\n<h3 id=\"5-使用场景\"><a href=\"#5-使用场景\" class=\"headerlink\" title=\"5. 使用场景\"></a>5. 使用场景</h3><ul>\n<li><strong>线程</strong>：适用于需要实现真正并行任务处理的场景，尤其是在计算密集型应用中。</li>\n<li><strong>协程</strong>：适合高并发、IO密集型应用，如网络服务器、异步处理任务等，能有效提高资源的利用率和程序的响应性。</li>\n</ul>\n<p>总结来说，线程是操作系统层面的并发执行单元，资源开销较大，适合于并行处理；而协程是更轻量级的用户态线程，它们提供了更高的并发性和更灵活的控制方式，适合于构建高并发的应用程序。正确地选择使用线程还是协程，取决于具体的应用场景和性能需求。</p>\n<h2 id=\"假设我在go语言中开启了10个协程，它们会运行在几个线程上，几个CPU上\"><a href=\"#假设我在go语言中开启了10个协程，它们会运行在几个线程上，几个CPU上\" class=\"headerlink\" title=\"假设我在go语言中开启了10个协程，它们会运行在几个线程上，几个CPU上\"></a>假设我在go语言中开启了10个协程，它们会运行在几个线程上，几个CPU上</h2><p>在Go语言中，协程（goroutine）的运行不是直接映射到操作系统线程上的，而是由Go运行时（runtime）进行管理。Go运行时使用了M:N调度模型（多个goroutines被多路复用到较少的操作系统线程上），这意味着数千个goroutines可能只用到很少数量的操作系统线程。具体到你的问题，让我们看看这个模型的两个主要组件以及如何影响goroutines的运行：</p>\n<h3 id=\"1-GOMAXPROCS\"><a href=\"#1-GOMAXPROCS\" class=\"headerlink\" title=\"1. GOMAXPROCS\"></a>1. GOMAXPROCS</h3><p><code>GOMAXPROCS</code>是一个环境变量，用于控制Go程序运行时可以使用的CPU核心数。默认情况下，它的值设为了你的机器上的逻辑CPU核心数。你可以通过<code>runtime.GOMAXPROCS()</code>函数查询或设置这个值。<code>GOMAXPROCS</code>决定了有多少个操作系统线程可以同时执行Go代码。</p>\n<h3 id=\"2-调度器\"><a href=\"#2-调度器\" class=\"headerlink\" title=\"2. 调度器\"></a>2. 调度器</h3><p>Go的调度器是基于M:N模型实现的，其中：</p>\n<ul>\n<li><strong>M</strong> 代表操作系统线程（machine）。</li>\n<li><strong>N</strong> 代表goroutines。</li>\n</ul>\n<p>调度器的任务是将N个goroutines分配给M个操作系统线程上执行。这意味着，即使你有数千个goroutines，Go运行时也可能只使用<code>GOMAXPROCS</code>指定数量的操作系统线程来执行这些goroutines。</p>\n<h3 id=\"运行在多少个线程和CPU上？\"><a href=\"#运行在多少个线程和CPU上？\" class=\"headerlink\" title=\"运行在多少个线程和CPU上？\"></a>运行在多少个线程和CPU上？</h3><p>假设你开启了10个goroutines：</p>\n<ul>\n<li><strong>线程</strong>：这些goroutines的实际运行可能全部在一个单独的操作系统线程上，也可能分布在多个操作系统线程上，具体取决于<code>GOMAXPROCS</code>的设置和Go调度器的决定。如果<code>GOMAXPROCS</code>的值大于1（默认情况下通常如此），那么这些goroutines有可能被调度到不同的操作系统线程上执行。</li>\n<li><strong>CPU</strong>：这些goroutines实际上在<code>GOMAXPROCS</code>设定的CPU核心上并发运行。如果<code>GOMAXPROCS</code>大于1，goroutines可以在多个CPU核心上并行执行。</li>\n</ul>\n<p>因此，如果<code>GOMAXPROCS</code>设置为大于1的值，你的10个goroutines可能会在多个线程和多个CPU上运行，具体分配由Go运行时的调度器动态管理。但要注意，goroutine到线程的具体映射以及调度行为是由Go运行时内部决定的，可能会随着Go版本和具体的运行情况而有所不同。</p>\n<h2 id=\"go的通道是无序的，这样怎么能做好并发呢\"><a href=\"#go的通道是无序的，这样怎么能做好并发呢\" class=\"headerlink\" title=\"go的通道是无序的，这样怎么能做好并发呢\"></a>go的通道是无序的，这样怎么能做好并发呢</h2><p>在Go语言中，说通道（channels）是“无序的”可能会有点误导。实际上，通道本身维持着发送和接收操作的顺序：如果你按顺序发送了值A然后是值B到同一个通道，接收方也将首先接收到A，然后是B，这意味着在单个通道上，发送和接收是有序的。然而，当涉及到从多个并发发送者接收时，哪个发送者首先将消息送达到通道是不确定的，这可能导致看似“无序”的行为。</p>\n<p>当你在处理并发时，确保程序的正确性通常依赖于同步和通信机制，而Go通过通道和goroutines提供了强大的工具来帮助你做到这一点。这里有一些策略来确保你在并发程序中使用通道时能够正确地同步和顺序操作：</p>\n<ol>\n<li><p><strong>使用无缓冲通道进行同步</strong>：无缓冲通道保证了发送操作会阻塞，直到接收操作发生，这可以用作goroutines之间的同步点。</p>\n</li>\n<li><p><strong>使用有缓冲通道控制并发</strong>：有缓冲通道允许在阻塞之前发送多个值。它们可以用来限制并发级别，比如通过控制同时运行的goroutines的数量。</p>\n</li>\n<li><p><strong>关闭通道来广播消息</strong>：关闭一个通道会通知所有的接收者没有更多的值会被发送到这个通道。这是一种广播机制，可以用来通知多个goroutine某个条件已经成立，比如终止。</p>\n</li>\n<li><p><strong>选择语句</strong>：<code>select</code> 语句允许你同时等待多个通道操作，并根据哪个通道准备就绪来执行相应的代码块。这可以用来处理来自多个来源的输入，同时保持逻辑上的清晰和顺序。</p>\n</li>\n<li><p><strong>顺序控制</strong>：当需要精确控制多个goroutine的执行顺序时，可以设计一种协议或使用一系列通道来顺序地进行操作，确保并发操作的正确顺序。</p>\n</li>\n</ol>\n<p>通过这些机制，Go允许你构建复杂的并发程序，同时保持代码的简洁性和清晰度。正确地使用通道和goroutines，你可以有效地解决并发中的同步和顺序问题，从而实现高效且易于理解的并发逻辑。</p>\n<h2 id=\"管道例子探究\"><a href=\"#管道例子探究\" class=\"headerlink\" title=\"管道例子探究\"></a>管道例子探究</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ts := []<span class=\"type\">int</span>&#123;<span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">-9</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tc := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\">\tfmt.Println(s[:<span class=\"built_in\">len</span>(s)/<span class=\"number\">2</span>])</span><br><span class=\"line\">\tfmt.Println(s[<span class=\"built_in\">len</span>(s)/<span class=\"number\">2</span>:])</span><br><span class=\"line\">\tsum(s[:<span class=\"built_in\">len</span>(s)/<span class=\"number\">2</span>], c) <span class=\"comment\">// 17</span></span><br><span class=\"line\">\tsum(s[<span class=\"built_in\">len</span>(s)/<span class=\"number\">2</span>:], c)</span><br><span class=\"line\">\tx, y := &lt;-c, &lt;-c <span class=\"comment\">// 从 c 中接收</span></span><br><span class=\"line\">\tfmt.Println(x, y, x+y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样为什么不对？管道必须和goroutine搭配使用吗?</p>\n<hr>\n<p>你的新代码片段中，<code>sum</code> 函数不是在goroutines中执行的，而是直接顺序执行。问题在于，在你尝试向通道 <code>c</code> 发送数据时（使用 <code>c &lt;- sum</code> 语法），因为 <code>c</code> 是一个无缓冲的通道，发送操作会阻塞直到另一方准备好接收数据。在这种情况下，因为你的发送操作 (<code>c &lt;- sum</code>) 发生在主goroutine中，而且没有其他并行的goroutine去接收这些值，这将导致死锁：主goroutine在等待自己向通道发送数据的操作完成，但这永远不会发生，因为没有其他并发操作去从通道中接收数据。</p>\n<p>通道确实设计为在goroutines之间进行通信的一种方式，它们非常适合用于并发编程。在单个goroutine内使用无缓冲通道进行发送和接收操作通常会导致死锁，因为无缓冲通道要求发送和接收操作几乎同时发生。</p>\n<p>简而言之，你的最后一个示例不正确，原因如下：</p>\n<ol>\n<li><p><strong>死锁</strong>：由于 <code>sum</code> 函数调用并非在goroutines中执行，它们将顺序执行。第一个 <code>sum</code> 调用试图向通道 <code>c</code> 发送一个值，但会阻塞，因为没有其他goroutine在接收端等待这个值。程序将在第一个 <code>sum</code> 函数调用时阻塞，导致死锁。</p>\n</li>\n<li><p><strong>通道与goroutine搭配使用</strong>：虽然技术上不是必须将通道与goroutines搭配使用，但在实践中，这是避免死锁和实现有效并发程序的常见模式。使用无缓冲通道时，发送操作会阻塞，直到接收操作开始，反之亦然。这种机制非常适合在不同goroutines之间同步数据访问和传递消息。</p>\n</li>\n</ol>\n<p>为了使你的程序按预期工作，你应该在goroutines中调用 <code>sum</code> 函数，并通过通道交换数据，正如之前正确的版本那样。这样，两个 <code>sum</code> 操作可以并发执行，主goroutine将等待并从通道中接收它们的结果，从而避免死锁并正确计算总和：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> sum(s[:<span class=\"built_in\">len</span>(s)/<span class=\"number\">2</span>], c) <span class=\"comment\">// 在goroutine中执行</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> sum(s[<span class=\"built_in\">len</span>(s)/<span class=\"number\">2</span>:], c) <span class=\"comment\">// 在另一个goroutine中执行</span></span><br><span class=\"line\">x, y := &lt;-c, &lt;-c <span class=\"comment\">// 从通道c中接收</span></span><br></pre></td></tr></table></figure>\n\n<p>通过这种方式，每个 <code>sum</code> 调用都在自己的goroutine中执行，并且能够独立地完成其向通道的发送操作。这避免了死锁，使主goroutine能够从通道接收两个结果并正确计算总和。</p>\n<hr>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">\tch &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">\tch &lt;- <span class=\"number\">2</span></span><br><span class=\"line\">\tfmt.Println(&lt;-ch)</span><br><span class=\"line\">\tfmt.Println(&lt;-ch)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为什么这个又对了？这不是只有一个goroutine吗?</p>\n<p>你的最新示例之所以能够正确运行，是因为它使用了一个<strong>有缓冲的通道</strong>。与无缓冲通道不同，有缓冲通道允许在阻塞发送者或接收者之前存储一个固定数量的值。具体到你的例子中，通过 <code>make(chan int, 2)</code> 创建了一个可以存储两个整数的缓冲通道。这意味着你可以在没有任何接收者准备好接收之前，向通道发送（或“缓冲”）两个值。</p>\n<p>这段代码中的关键点是：</p>\n<ol>\n<li><p><code>ch := make(chan int, 2)</code> 创建了一个有缓冲的通道，缓冲大小为2。这允许通道存储最多两个整数，直到它们被接收。</p>\n</li>\n<li><p><code>ch &lt;- 1</code> 和 <code>ch &lt;- 2</code> 这两行向通道发送两个整数。由于通道是有缓冲的，并且缓冲未满，这两个发送操作不会阻塞。这两个值被存储在通道的缓冲区中。</p>\n</li>\n<li><p><code>fmt.Println(&lt;-ch)</code> 和 <code>fmt.Println(&lt;-ch)</code> 这两行从通道中接收并打印这两个值。由于这两个值已经在通道的缓冲区中等待，接收操作立即发生，没有阻塞。</p>\n</li>\n</ol>\n<p>在这个例子中，即使所有操作都在单个goroutine（主goroutine）中进行，程序也能正常运行，没有发生死锁。这是因为有缓冲通道提供了足够的空间来存储发送到通道中的值，直到它们被接收，从而避免了在发送操作时必须立即有一个接收者准备好接收值的需求。</p>\n<p>有缓冲通道是并发Go程序中一个非常有用的工具，允许goroutines在某种程度上独立操作，而不必在每次通信时都完全同步。然而，设计有缓冲通道的程序时需要谨慎，以避免逻辑错误或死锁，特别是当缓冲区满时或在更复杂的通信模式中。</p>\n<h2 id=\"Go支持垃圾回收吗？\"><a href=\"#Go支持垃圾回收吗？\" class=\"headerlink\" title=\"Go支持垃圾回收吗？\"></a>Go支持垃圾回收吗？</h2><p>是的，Go语言支持垃圾回收（Garbage Collection，简称GC）。Go的垃圾回收器是一个实现了自动内存管理的程序部分，它负责检测并自动回收不再被程序使用的内存空间，从而防止内存泄漏。这意味着在Go中，开发者不需要（也不能）手动管理内存的分配和回收，大大简化了编程工作，减少了内存泄漏和其他与手动内存管理相关的错误。</p>\n<p>Go的垃圾回收器设计为“非阻塞式”的，意味着它尽量减少对程序执行的干扰。从Go 1.5版本开始，引入了并发的、三色标记清除算法，该算法允许垃圾收集过程在大部分时间与程序的其他部分并发执行，减少了垃圾收集对程序性能的影响。尽管如此，垃圾收集过程仍然会引入一定的延迟，这在极少数延迟敏感的应用中可能成为一个考虑因素。</p>\n<p>Go的运行时系统还包括其他几个与性能和资源管理相关的特性，如goroutine的调度和网络轮询器，它们一起确保了Go程序的高性能和高效的资源使用。开发者可以使用内置的分析工具（如pprof）来监视和优化程序的内存使用，以及诊断性能问题。</p>\n<h2 id=\"如果Go-代码会被预先编译成原生的机器码，那么它在运行的时候怎么和runtime结合呢\"><a href=\"#如果Go-代码会被预先编译成原生的机器码，那么它在运行的时候怎么和runtime结合呢\" class=\"headerlink\" title=\"如果Go 代码会被预先编译成原生的机器码，那么它在运行的时候怎么和runtime结合呢\"></a>如果Go 代码会被预先编译成原生的机器码，那么它在运行的时候怎么和runtime结合呢</h2><p>Go语言确实编译成原生机器码，这意味着Go程序在执行时不需要依赖于虚拟机，它们直接由操作系统调度。尽管如此，Go的执行模型和运行时（runtime）系统包括了许多复杂的功能，如垃圾回收（GC）、goroutine调度、通道通信、反射以及更多。这些功能的实现是预先集成在每个Go程序中的，部分原因是Go的编译器和链接器在构建最终的可执行文件时会自动包含运行时。</p>\n<p>这里是Go运行时和编译后的机器码结合的一些关键方式：</p>\n<ol>\n<li><p><strong>运行时包含</strong>：当Go程序被编译时，运行时代码被静态链接到最终的二进制中。这包括了垃圾回收器、goroutine调度器等核心功能的实现。因此，即使Go代码被编译成了原生机器码，运行时的功能也被内嵌于程序中，随程序一起运行。</p>\n</li>\n<li><p><strong>初始化运行时</strong>：在Go程序启动时，它的入口点不是 <code>main.main</code> 函数。实际上，程序开始执行于运行时的初始化代码，该代码负责设置运行时环境，包括初始化内存管理器、启动垃圾回收器、创建主goroutine等。只有在这些准备工作完成之后，<code>main.main</code> 函数才会被调用。</p>\n</li>\n<li><p><strong>goroutine调度</strong>：Go语言的并发模型基于goroutines。运行时包含一个调度器，它在用户态模拟多线程环境，允许成千上万的goroutines伪并行地运行在较少的操作系统线程上。编译后的代码中包含与运行时交互的指令，这些指令使得goroutines能被合适地调度和管理。</p>\n</li>\n<li><p><strong>内置函数调用运行时</strong>：一些Go的内置函数，如 <code>make</code>、<code>new</code>，以及用于map、切片和通道操作的函数，实际上是对运行时系统的直接调用。这些函数的实现是在运行时代码中，而非Go的标准库中。</p>\n</li>\n<li><p><strong>接口和反射</strong>：Go的接口和反射机制也依赖于运行时的支持。运行时维护了类型信息，允许程序在运行时查询和操作类型，这是动态语言特性的一个重要基础。</p>\n</li>\n</ol>\n<p>总的来说，虽然Go代码被编译成原生机器码，但通过将运行时的功能静态链接到每个程序、在程序启动时初始化运行时环境、以及在需要时通过编译后的代码调用运行时支持的机制，Go程序能够实现高级的语言特性，同时保持高性能和跨平台的兼容性。</p>\n<h2 id=\"Go语言中变量的生命周期\"><a href=\"#Go语言中变量的生命周期\" class=\"headerlink\" title=\"Go语言中变量的生命周期\"></a>Go语言中变量的生命周期</h2><p>Go语言中变量的生命周期是由变量能够被程序访问的时间段定义的。理解变量的生命周期对于编写高效和无内存泄漏的程序至关重要。在Go中，变量的生命周期取决于它是如何声明的，主要分为两种情况：在堆（heap）上和在栈（stack）上。</p>\n<h3 id=\"栈上的变量\"><a href=\"#栈上的变量\" class=\"headerlink\" title=\"栈上的变量\"></a>栈上的变量</h3><p>栈上的变量通常具有短暂的生命周期。当声明一个局部变量时，它通常位于栈上，其生命周期与包含它的函数调用的生命周期相匹配。当函数被调用时，局部变量被创建；当函数返回时，这些局部变量被销毁。这意味着栈上的变量的生命周期是由它们所在的函数的执行时间来决定的。</p>\n<h3 id=\"堆上的变量\"><a href=\"#堆上的变量\" class=\"headerlink\" title=\"堆上的变量\"></a>堆上的变量</h3><p>堆上的变量有一个更长久的生命周期。当你使用<code>new</code>函数或者复合字面量（如切片、映射、通道等）创建一个变量，而这个变量的引用逃逸到函数外部时，这个变量就会在堆上分配。堆上的变量的生命周期不由单个函数调用控制，而是由是否仍然可达（即程序的其他部分是否还有指向该变量的引用）来决定。只要变量可达，它就会继续存在。当变量变得不可达时，它最终会被垃圾回收器回收。</p>\n<h3 id=\"变量生命周期的决定因素\"><a href=\"#变量生命周期的决定因素\" class=\"headerlink\" title=\"变量生命周期的决定因素\"></a>变量生命周期的决定因素</h3><ul>\n<li><strong>编译器优化</strong>：Go编译器有时会做出决策，将本应在堆上分配的变量改为在栈上分配，如果它能确定变量的生命周期在函数范围内结束。这种优化减少了垃圾回收的负担。</li>\n<li><strong>逃逸分析</strong>：Go编译器执行逃逸分析来决定变量应该分配在堆还是栈上。如果函数内部创建的变量在函数外部仍然被引用（即“逃逸”到函数外部），则这些变量需要在堆上分配，以保证它们在函数返回后仍然存在。</li>\n</ul>\n<p>理解变量的生命周期对于优化Go程序的性能和内存使用非常重要。例如，过度使用堆分配可能会导致频繁的垃圾回收，从而影响程序性能。通过适当的变量作用域控制和利用栈分配，可以提高程序效率。</p>\n<h2 id=\"Go-常量\"><a href=\"#Go-常量\" class=\"headerlink\" title=\"Go 常量\"></a>Go 常量</h2><p>在 Go 语言中，常量是一个简单值的标识符，在程序运行时，其值不会被修改。常量可以是字符、字符串、布尔或数字类型的值。</p>\n<p>定义常量的基本语法如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name [<span class=\"keyword\">type</span>] = value</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>const</code> 关键字用于声明常量。</li>\n<li><code>name</code> 是常量的名称。</li>\n<li><code>type</code> 是可选的，指定常量的类型。</li>\n<li><code>value</code> 是常量的值。</li>\n</ul>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Pi = <span class=\"number\">3.14</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>Pi</code> 是一个常量，其值为 <code>3.14</code>。</p>\n<h3 id=\"常量的类型\"><a href=\"#常量的类型\" class=\"headerlink\" title=\"常量的类型\"></a>常量的类型</h3><p>在 Go 中，常量可以是任何基本类型，如整型、浮点型、布尔型、字符串等。如果在声明常量时没有指定类型，Go 语言会根据常量的值推导出其类型。</p>\n<h3 id=\"iota\"><a href=\"#iota\" class=\"headerlink\" title=\"iota\"></a>iota</h3><p>Go 语言的 <code>iota</code> 关键字用于生成一组以递增整数形式表示的常量，通常用于声明一个枚举。<code>iota</code> 在 <code>const</code> 关键字出现时被重置为 0，然后在每声明一个常量时自动递增。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    a = <span class=\"literal\">iota</span> <span class=\"comment\">// a == 0</span></span><br><span class=\"line\">    b        <span class=\"comment\">// b == 1</span></span><br><span class=\"line\">    c        <span class=\"comment\">// c == 2</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>a</code>、<code>b</code>、<code>c</code> 分别被赋予了递增的整数值 0、1、2。</p>\n<h3 id=\"未类型化常量\"><a href=\"#未类型化常量\" class=\"headerlink\" title=\"未类型化常量\"></a>未类型化常量</h3><p>在 Go 中，可以声明未类型化的常量，这意味着常量没有明确的类型。未类型化常量提供了更高的精度，并可以根据上下文转换为需要的类型。</p>\n<h3 id=\"使用常量\"><a href=\"#使用常量\" class=\"headerlink\" title=\"使用常量\"></a>使用常量</h3><p>常量可以用在任何变量可以使用的地方。使用常量可以提高代码的可读性和维护性。</p>\n<p>总之，Go 语言中的常量是一个非常有用的特性，它允许你在程序中使用固定的值，而不担心这些值会被改变。通过使用 <code>const</code> 关键字和 <code>iota</code> 生成器，你可以方便地声明和管理常量。</p>\n<h2 id=\"Go-创建新结构体\"><a href=\"#Go-创建新结构体\" class=\"headerlink\" title=\"Go 创建新结构体\"></a>Go 创建新结构体</h2><p>在 Go 语言中，结构体（struct）是一种将多个不同类型的变量组织到一个名字下的复合数据类型，常用于定义和创建数据实体。创建新结构体涉及两个步骤：定义结构体类型和实例化该类型的变量。</p>\n<h3 id=\"步骤-1：定义结构体类型\"><a href=\"#步骤-1：定义结构体类型\" class=\"headerlink\" title=\"步骤 1：定义结构体类型\"></a>步骤 1：定义结构体类型</h3><p>定义结构体类型使用 <code>type</code> 和 <code>struct</code> 关键字。结构体类型通常在函数外部定义，以便可以在不同函数间共享。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Name <span class=\"type\">string</span></span><br><span class=\"line\">    Age  <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了一个名为 <code>Person</code> 的结构体，它有两个字段：<code>Name</code> 和 <code>Age</code>。</p>\n<h3 id=\"步骤-2：实例化结构体\"><a href=\"#步骤-2：实例化结构体\" class=\"headerlink\" title=\"步骤 2：实例化结构体\"></a>步骤 2：实例化结构体</h3><p>一旦定义了结构体类型，你就可以创建该类型的实例了。有几种不同的方式来实例化结构体。</p>\n<h4 id=\"方法-1：使用-new-关键字\"><a href=\"#方法-1：使用-new-关键字\" class=\"headerlink\" title=\"方法 1：使用 new 关键字\"></a>方法 1：使用 <code>new</code> 关键字</h4><p><code>new</code> 关键字可以用来创建一个指向结构体类型的新实例的指针。此方法会分配内存并将结构体的字段初始化为零值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p1 := <span class=\"built_in\">new</span>(Person)</span><br><span class=\"line\">p1.Name = <span class=\"string\">&quot;Alice&quot;</span></span><br><span class=\"line\">p1.Age = <span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方法-2：使用结构体字面量\"><a href=\"#方法-2：使用结构体字面量\" class=\"headerlink\" title=\"方法 2：使用结构体字面量\"></a>方法 2：使用结构体字面量</h4><p>结构体字面量允许在一个表达式中创建结构体实例，并同时初始化其字段。</p>\n<ul>\n<li><strong>命名字段方式</strong>：</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p2 := Person&#123;Name: <span class=\"string\">&quot;Bob&quot;</span>, Age: <span class=\"number\">25</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>按字段顺序初始化</strong>（不推荐，因为添加或修改字段时易出错）：</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p3 := Person&#123;<span class=\"string\">&quot;Charlie&quot;</span>, <span class=\"number\">28</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方法-3：使用指针和结构体字面量\"><a href=\"#方法-3：使用指针和结构体字面量\" class=\"headerlink\" title=\"方法 3：使用指针和结构体字面量\"></a>方法 3：使用指针和结构体字面量</h4><p>你也可以直接创建一个指向结构体实例的指针，并初始化其字段。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p4 := &amp;Person&#123;Name: <span class=\"string\">&quot;Diana&quot;</span>, Age: <span class=\"number\">32</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Name <span class=\"type\">string</span></span><br><span class=\"line\">    Age  <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 new 关键字</span></span><br><span class=\"line\">    p1 := <span class=\"built_in\">new</span>(Person)</span><br><span class=\"line\">    p1.Name = <span class=\"string\">&quot;Alice&quot;</span></span><br><span class=\"line\">    p1.Age = <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用结构体字面量</span></span><br><span class=\"line\">    p2 := Person&#123;Name: <span class=\"string\">&quot;Bob&quot;</span>, Age: <span class=\"number\">25</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用指针和结构体字面量</span></span><br><span class=\"line\">    p3 := &amp;Person&#123;Name: <span class=\"string\">&quot;Charlie&quot;</span>, Age: <span class=\"number\">28</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(*p1)</span><br><span class=\"line\">    fmt.Println(p2)</span><br><span class=\"line\">    fmt.Println(*p3)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个例子展示了不同的方式来创建和初始化结构体 <code>Person</code> 的实例。选择哪种方式取决于具体情况，比如是否需要在初始化时立即设置字段值，或者是否需要操作结构体指针。</p>\n<h2 id=\"Go切片append\"><a href=\"#Go切片append\" class=\"headerlink\" title=\"Go切片append\"></a>Go切片append</h2><p>在 Go 语言中，切片（slice）是一个动态数组，它提供了一种灵活、强大的方式来管理数据集合。尽管 Go 语言的切片类型没有直接提供 <code>push back</code> 的方法（类似于其他语言中的数组或列表的 append 功能），但可以使用内建的 <code>append</code> 函数来实现向切片末尾添加元素的效果。</p>\n<h3 id=\"使用-append-函数添加元素\"><a href=\"#使用-append-函数添加元素\" class=\"headerlink\" title=\"使用 append 函数添加元素\"></a>使用 <code>append</code> 函数添加元素</h3><p><code>append</code> 函数可以将一个或多个新的元素添加到切片的末尾，并返回一个包含了这些新元素的新切片。如果原始切片有足够的容量来存储新增的元素，<code>append</code> 会直接在原切片的末尾添加这些元素。否则，它会自动分配一个新的底层数组，将原切片的元素和新元素一起复制到这个新数组中，然后返回这个新数组的切片表示。</p>\n<h3 id=\"示例-3\"><a href=\"#示例-3\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个整数切片</span></span><br><span class=\"line\">    slice := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向切片末尾添加一个元素</span></span><br><span class=\"line\">    slice = <span class=\"built_in\">append</span>(slice, <span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向切片末尾添加多个元素</span></span><br><span class=\"line\">    slice = <span class=\"built_in\">append</span>(slice, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(slice)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出将是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1 2 3 4 5 6 7]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li><strong>容量自动扩展</strong>：<code>append</code> 操作可能会导致切片的容量增加。如果原切片的底层数组没有足够的空间来存放新添加的元素，Go 语言运行时会自动分配一个新的、更大的数组，并将原切片的元素以及新元素一起复制到这个新数组中。</li>\n<li><strong>返回值</strong>：不要忘记 <code>append</code> 函数返回的是更新后的切片。你需要用返回的切片来更新你的切片变量，否则添加的新元素不会被保存。</li>\n</ul>\n<p>通过上面的示例和说明，你可以看到在 Go 语言中，虽然没有直接的 <code>push back</code> 函数或方法，但是通过使用 <code>append</code> 函数，我们可以轻松实现向切片末尾添加新元素的功能。</p>\n<h2 id=\"Go-切片怎样自动扩展\"><a href=\"#Go-切片怎样自动扩展\" class=\"headerlink\" title=\"Go 切片怎样自动扩展\"></a>Go 切片怎样自动扩展</h2><p>在 Go 语言中，切片的自动扩展是通过内建的 <code>append</code> 函数来实现的。当你向一个切片添加元素，而该切片的底层数组没有足够的空间容纳更多元素时，<code>append</code> 会自动处理切片的扩容。这个过程涉及到分配一个新的底层数组，并将原有元素以及新添加的元素复制到这个新数组中。切片的容量（capacity）是指底层数组能够容纳的元素总数。</p>\n<h3 id=\"扩容机制\"><a href=\"#扩容机制\" class=\"headerlink\" title=\"扩容机制\"></a>扩容机制</h3><p>当使用 <code>append</code> 向切片添加元素，导致切片的长度超过其容量时，Go 语言运行时会自动进行如下步骤：</p>\n<ol>\n<li><strong>分配一个新的底层数组</strong>：新数组的容量通常是原数组容量的两倍，但这个增长因子可能根据添加的元素数量和切片的当前容量而变化，尤其是在切片的容量非常大或者添加了多个元素的情况下。</li>\n<li><strong>复制原有元素到新数组</strong>：原切片的元素会被复制到新的底层数组中。</li>\n<li><strong>添加新元素</strong>：新的元素会被添加到复制的元素之后。</li>\n<li><strong>返回新切片</strong>：函数返回新的切片，这个切片引用了新的底层数组，并更新了其长度和容量。</li>\n</ol>\n<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><p>下面的示例演示了如何通过 <code>append</code> 自动扩展切片的容量。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    slice := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 创建一个初始容量为2的切片</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 打印初始切片的长度和容量</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;Initial: Length=%d, Capacity=%d\\n&quot;</span>, <span class=\"built_in\">len</span>(slice), <span class=\"built_in\">cap</span>(slice))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向切片添加元素，超过其初始容量</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">        slice = <span class=\"built_in\">append</span>(slice, i)</span><br><span class=\"line\">        <span class=\"comment\">// 打印每次添加元素后切片的长度和容量</span></span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">&quot;After appending %d: Length=%d, Capacity=%d\\n&quot;</span>, i, <span class=\"built_in\">len</span>(slice), <span class=\"built_in\">cap</span>(slice))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，初始切片的容量是2，但是随着元素的添加，切片的容量会自动增长，以容纳更多的元素。你会注意到，每当切片的容量不足以添加更多元素时，其容量会增加，通常是翻倍，尽管具体的增长策略可能会有所不同。</p>\n<h3 id=\"注意事项-1\"><a href=\"#注意事项-1\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li><strong>性能考虑</strong>：虽然 <code>append</code> 可以自动扩展切片的容量，但频繁地重新分配内存和复制数据可能会影响性能。如果你预先知道大概需要多少容量，使用 <code>make</code> 预分配一个足够大的切片可能会更高效。</li>\n<li><strong>扩容策略</strong>：Go 语言的切片扩容策略可能会因版本和具体实现而略有差异。通常，对于较小的切片，扩容会翻倍其容量；对于较大的切片，增长因子可能会小于2，以减少因为扩容而浪费的内存。</li>\n</ul>\n<h2 id=\"Go-实现stack-和-queue\"><a href=\"#Go-实现stack-和-queue\" class=\"headerlink\" title=\"Go 实现stack 和 queue\"></a>Go 实现stack 和 queue</h2><p>在 Go 语言中，没有内置的栈（Stack）和队列（Queue）数据结构，但是可以使用切片（Slice）非常容易地实现它们。切片提供了灵活的操作，如 <code>append</code> 函数和切片操作，使得实现栈和队列成为可能。</p>\n<h3 id=\"栈（Stack）\"><a href=\"#栈（Stack）\" class=\"headerlink\" title=\"栈（Stack）\"></a>栈（Stack）</h3><p>栈是一种后进先出（LIFO, Last In First Out）的数据结构，主要操作有：</p>\n<ul>\n<li><strong>Push</strong>：将一个元素放入栈顶。</li>\n<li><strong>Pop</strong>：从栈顶移除一个元素。</li>\n</ul>\n<h4 id=\"实现栈\"><a href=\"#实现栈\" class=\"headerlink\" title=\"实现栈\"></a>实现栈</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Stack []<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Push 添加一个元素到栈顶</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Stack)</span></span> Push(v <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">    *s = <span class=\"built_in\">append</span>(*s, v)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Pop 从栈顶移除一个元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Stack)</span></span> Pop() <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(*s) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;Stack is empty!&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span> <span class=\"comment\">// 返回 -1 表示栈为空</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    index := <span class=\"built_in\">len</span>(*s) - <span class=\"number\">1</span>    <span class=\"comment\">// 获取栈顶元素索引</span></span><br><span class=\"line\">    element := (*s)[index]  <span class=\"comment\">// 获取栈顶元素</span></span><br><span class=\"line\">    *s = (*s)[:index]       <span class=\"comment\">// 移除栈顶元素</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> element</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> stack Stack</span><br><span class=\"line\"></span><br><span class=\"line\">    stack.Push(<span class=\"number\">1</span>)</span><br><span class=\"line\">    stack.Push(<span class=\"number\">2</span>)</span><br><span class=\"line\">    stack.Push(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(stack.Pop()) <span class=\"comment\">// 输出: 3</span></span><br><span class=\"line\">    fmt.Println(stack.Pop()) <span class=\"comment\">// 输出: 2</span></span><br><span class=\"line\">    fmt.Println(stack.Pop()) <span class=\"comment\">// 输出: 1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"队列（Queue）\"><a href=\"#队列（Queue）\" class=\"headerlink\" title=\"队列（Queue）\"></a>队列（Queue）</h3><p>队列是一种先进先出（FIFO, First In First Out）的数据结构，主要操作有：</p>\n<ul>\n<li><strong>Enqueue</strong>：在队列末尾添加一个元素。</li>\n<li><strong>Dequeue</strong>：从队列开头移除一个元素。</li>\n</ul>\n<h4 id=\"实现队列\"><a href=\"#实现队列\" class=\"headerlink\" title=\"实现队列\"></a>实现队列</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Queue []<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Enqueue 在队列末尾添加一个元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(q *Queue)</span></span> Enqueue(v <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">    *q = <span class=\"built_in\">append</span>(*q, v)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Dequeue 从队列开头移除一个元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(q *Queue)</span></span> Dequeue() <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(*q) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;Queue is empty!&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span> <span class=\"comment\">// 返回 -1 表示队列为空</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    element := (*q)[<span class=\"number\">0</span>]    <span class=\"comment\">// 获取队列开头元素</span></span><br><span class=\"line\">    *q = (*q)[<span class=\"number\">1</span>:]         <span class=\"comment\">// 移除队列开头元素</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> element</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> queue Queue</span><br><span class=\"line\"></span><br><span class=\"line\">    queue.Enqueue(<span class=\"number\">1</span>)</span><br><span class=\"line\">    queue.Enqueue(<span class=\"number\">2</span>)</span><br><span class=\"line\">    queue.Enqueue(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(queue.Dequeue()) <span class=\"comment\">// 输出: 1</span></span><br><span class=\"line\">    fmt.Println(queue.Dequeue()) <span class=\"comment\">// 输出: 2</span></span><br><span class=\"line\">    fmt.Println(queue.Dequeue()) <span class=\"comment\">// 输出: 3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这些示例中，我们使用了切片和其操作来实现栈和队列的基本功能。这两种数据结构在实际应用中非常有用，特别是在需要特定数据处理顺序的场合。通过简单的方法，Go 语言使得实现这些数据结构变得既简单又直接。</p>\n<h2 id=\"make函数在Go中的作用\"><a href=\"#make函数在Go中的作用\" class=\"headerlink\" title=\"make函数在Go中的作用\"></a>make函数在Go中的作用</h2><p>在 Go 语言中，<code>make</code> 函数是一个特殊的内置函数，它被用来初始化并分配内存给内置的数据类型，如切片（slice）、映射（map）和通道（channel）。不同于 <code>new</code> 函数，<code>make</code> 返回的是类型的初始化值，而不是指向该值的指针。<code>make</code> 的使用对于这些复合类型的正确初始化和使用是必要的，因为它们需要在内存中进行特定的布局和初始化。</p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ol>\n<li><p><strong>切片（Slice）</strong>：</p>\n<ul>\n<li><code>make</code> 用于创建一个具有指定长度和容量的切片。如果未指定容量，那么容量将与长度相同。</li>\n<li>使用 <code>make</code> 创建切片可以直接使用，无需担心初始值，因为所有元素都会被初始化为其类型的零值。</li>\n<li>示例：<code>s := make([]int, 5, 10)</code> 创建了一个长度为 5，容量为 10 的 <code>int</code> 类型切片 <code>s</code>。</li>\n</ul>\n</li>\n<li><p><strong>映射（Map）</strong>：</p>\n<ul>\n<li><code>make</code> 用于创建一个映射，并分配足够的内存，以便它可以开始存储键值对。创建的映射将为空，没有任何键值对。</li>\n<li>使用 <code>make</code> 可以确保返回的映射是可用的，避免了将 <code>nil</code> 映射用于赋值或操作的错误。</li>\n<li>示例：<code>m := make(map[string]int)</code> 创建了一个键类型为 <code>string</code>，值类型为 <code>int</code> 的空映射 <code>m</code>。</li>\n</ul>\n</li>\n<li><p><strong>通道（Channel）</strong>：</p>\n<ul>\n<li><code>make</code> 用于创建一个通道，并指定其可以存储的值的类型以及（可选的）缓冲大小。</li>\n<li>创建通道后，可以在协程（goroutines）之间用于通信和同步。</li>\n<li>示例：<code>ch := make(chan int, 5)</code> 创建了一个可以存储 <code>int</code> 类型值，且有 5 个缓冲空间的通道 <code>ch</code>。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">make</span>(T, size, ...optional capacity)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>T</code>：要创建的类型（切片、映射或通道）。</li>\n<li><code>size</code>：对于切片，它是长度（length）；对于通道，它是缓冲大小（buffer capacity）。对于映射，此参数通常省略，因为映射的大小是动态增长的。</li>\n<li><code>optional capacity</code>：可选，仅用于切片，指定切片的容量（capacity）。如果省略，容量将与长度相同。</li>\n</ul>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li>使用 <code>make</code> 初始化的数据结构（切片、映射、通道）可以直接使用，而无需进一步的分配或初始化。</li>\n<li>对于其他类型，如自定义结构体或基本数据类型，应使用 <code>new</code> 函数或字面量构造进行初始化。</li>\n<li><code>make</code> 仅适用于切片、映射和通道，尝试用于其他类型将导致编译错误。</li>\n</ul>\n<p>通过正确使用 <code>make</code> 函数，Go 程序员可以确保他们的数据结构被正确初始化，准备好安全地用于后续操作。</p>\n<h2 id=\"go中怎么样实现Equaler接口\"><a href=\"#go中怎么样实现Equaler接口\" class=\"headerlink\" title=\"go中怎么样实现Equaler接口\"></a>go中怎么样实现Equaler接口</h2><p>在Go语言中，实现一个<code>Equaler</code>接口主要涉及到定义一个接口，该接口包含一个方法，用于比较两个对象是否相等。这样的接口可以被任何想要支持等值比较操作的类型实现。下面是如何定义和实现这样一个<code>Equaler</code>接口的示例：</p>\n<h3 id=\"步骤-1-定义Equaler接口\"><a href=\"#步骤-1-定义Equaler接口\" class=\"headerlink\" title=\"步骤 1: 定义Equaler接口\"></a>步骤 1: 定义<code>Equaler</code>接口</h3><p>首先，你需要定义<code>Equaler</code>接口。通常，这个接口会包含一个<code>Equal</code>方法，这个方法接受另一个相同类型的对象作为参数，并返回一个布尔值，表示这两个对象是否相等。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Equaler 接口定义了一个方法 Equal，任何实现了这个接口的类型</span></span><br><span class=\"line\"><span class=\"comment\">// 都必须提供 Equal 方法的具体实现。</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Equaler <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    Equal(other Equaler) <span class=\"type\">bool</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤-2-实现Equaler接口\"><a href=\"#步骤-2-实现Equaler接口\" class=\"headerlink\" title=\"步骤 2: 实现Equaler接口\"></a>步骤 2: 实现<code>Equaler</code>接口</h3><p>然后，你可以为你自己的类型实现<code>Equaler</code>接口。假设你有一个<code>Point</code>类型，你想要比较两个<code>Point</code>实例是否相等。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Point 表示一个二维点。</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Point <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    X, Y <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Equal 实现了 Equaler 接口，用于比较两个 Point 是否相等。</span></span><br><span class=\"line\"><span class=\"comment\">// 这里的other参数需要被类型断言为*Point，以便进行比较。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Point)</span></span> Equal(other Equaler) <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">    otherPoint, ok := other.(*Point)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.Abs(p.X-otherPoint.X) &lt; <span class=\"number\">0.001</span> &amp;&amp; math.Abs(p.Y-otherPoint.Y) &lt; <span class=\"number\">0.001</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项-2\"><a href=\"#注意事项-2\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>在<code>Equal</code>方法中，参数<code>other</code>被定义为<code>Equaler</code>类型。这允许方法接受任何实现了<code>Equaler</code>接口的类型。然而，在实际的比较中，你通常需要将<code>other</code>类型断言为你需要比较的具体类型（在这个例子中是<code>*Point</code>），以便能够访问该类型的字段。</li>\n<li>使用类型断言（<code>otherPoint, ok := other.(*Point)</code>）时，需要处理断言失败的情况。如果断言失败，表示<code>other</code>不是一个<code>*Point</code>实例，此时应当返回<code>false</code>。</li>\n<li>比较浮点数时使用了一个小的容忍度值（<code>0.001</code>）来判断两个点是否相等。这是因为直接比较浮点数可能会因为精度问题而导致不准确的比较结果。</li>\n</ul>\n<p>通过这种方式，你可以为任何类型实现<code>Equaler</code>接口，只要提供了一个适当的<code>Equal</code>方法即可。这种接口抽象允许你编写更通用、更灵活的代码，因为你可以编写依赖于<code>Equaler</code>接口的函数或方法，而不是依赖于特定的类型。</p>\n<h2 id=\"go中能否让自定义的类型也可以使用-来比较\"><a href=\"#go中能否让自定义的类型也可以使用-来比较\" class=\"headerlink\" title=\"go中能否让自定义的类型也可以使用&#x3D;&#x3D;来比较\"></a>go中能否让自定义的类型也可以使用&#x3D;&#x3D;来比较</h2><p>在Go语言中，使用<code>==</code>运算符来比较两个值是否相等的能力是内建的，且适用于所有基本类型（如<code>int</code>、<code>float64</code>、<code>string</code>等）和一些复合类型（如数组）。对于自定义的类型，能否使用<code>==</code>取决于该类型的底层类型：</p>\n<ol>\n<li><p><strong>基本类型和结构体</strong>：如果你的自定义类型是基于基本类型的（例如通过<code>type</code>关键字定义的新类型），那么可以直接使用<code>==</code>进行比较，因为这种比较是对其底层类型进行的。对于结构体，如果所有字段都可以比较，则可以使用<code>==</code>来比较两个结构体实例是否相等。</p>\n</li>\n<li><p><strong>切片、映射和函数类型</strong>：对于这些类型，即使是作为自定义类型的底层类型，也不能使用<code>==</code>进行比较（切片、映射、函数只能和<code>nil</code>进行比较）。尝试这样做会导致编译错误。</p>\n</li>\n</ol>\n<h3 id=\"示例-4\"><a href=\"#示例-4\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li><strong>基于基本类型的自定义类型</strong>：</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyInt <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a MyInt = <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b MyInt = <span class=\"number\">5</span></span><br><span class=\"line\">    fmt.Println(a == b) <span class=\"comment\">// 输出: true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里，<code>MyInt</code>是基于<code>int</code>类型的自定义类型，所以可以使用<code>==</code>来比较。</p>\n<ul>\n<li><strong>结构体类型</strong>：</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Point <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    X, Y <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    p1 := Point&#123;X: <span class=\"number\">1</span>, Y: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">    p2 := Point&#123;X: <span class=\"number\">1</span>, Y: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">    fmt.Println(p1 == p2) <span class=\"comment\">// 输出: true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>Point</code>是一个结构体类型，由于它的所有字段都是可以比较的类型，所以两个<code>Point</code>类型的实例可以使用<code>==</code>进行比较。</p>\n<p>总结来说，是否可以使用<code>==</code>来比较自定义类型的值取决于该类型的底层类型以及是否满足Go语言中<code>==</code>运算符适用的类型约束。对于复杂类型或需要更灵活的比较逻辑的情况，通常会实现一个比较函数或方法，如上一条回答中所述的<code>Equaler</code>接口实现。</p>\n<h2 id=\"append是不是永远不会改变传入的切片的值\"><a href=\"#append是不是永远不会改变传入的切片的值\" class=\"headerlink\" title=\"append是不是永远不会改变传入的切片的值\"></a>append是不是永远不会改变传入的切片的值</h2><p><code>append</code>函数在Go语言中的行为有一些特点需要理解，尤其是关于它如何影响传入的切片的值。<code>append</code>操作本身不会直接修改传入的切片的元素。但是，它可能会改变切片的长度和容量，以及返回一个可能指向新数组的切片。这里有几个关键点需要注意：</p>\n<ol>\n<li><p><strong>不修改原切片元素</strong>：<code>append</code>不会改变原有切片中的元素值。如果<code>append</code>操作不导致扩容，添加的元素会出现在原有元素之后。</p>\n</li>\n<li><p><strong>可能返回新的切片</strong>：如果<code>append</code>操作导致了切片扩容（即，需要更多的容量来容纳新元素），Go将分配一个新的数组，并将原切片的元素以及新添加的元素复制到这个新数组中。这时，<code>append</code>返回的切片将指向这个新的数组，而原来的切片仍指向原来的数组。</p>\n</li>\n<li><p><strong>不改变原切片引用</strong>：重要的是，无论<code>append</code>操作是否导致扩容，它都不会更改传入切片本身的引用。换句话说，<code>append</code>函数对原切片的修改是通过返回一个新的切片实现的，而不是直接修改传入的切片变量。</p>\n</li>\n</ol>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>下面的例子展示了<code>append</code>如何工作，以及它是如何影响切片的：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    originalSlice := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Original slice:&quot;</span>, originalSlice)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Append without capacity overflow</span></span><br><span class=\"line\">    modifiedSlice := <span class=\"built_in\">append</span>(originalSlice, <span class=\"number\">4</span>)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Modified slice:&quot;</span>, modifiedSlice)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Original slice after append:&quot;</span>, originalSlice)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Append that causes capacity overflow</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">5</span>; i &lt;= <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">        modifiedSlice = <span class=\"built_in\">append</span>(modifiedSlice, i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Modified slice after more appends:&quot;</span>, modifiedSlice)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Original slice remains unchanged:&quot;</span>, originalSlice)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>originalSlice</code>在初次<code>append</code>后仍指向原来的数组，<code>modifiedSlice</code>可能也指向同一个数组（如果没有超出容量）或者指向一个新的数组（如果执行了扩容）。通过连续的<code>append</code>操作，最终<code>modifiedSlice</code>将指向一个不同的、更大的数组，而<code>originalSlice</code>保持不变，仍然指向最初的数组。</p>\n<p>综上所述，<code>append</code>操作不会改变传入切片的值或其指向的数组中的元素，但它会根据需要扩容的情况返回一个新的切片，这个新切片可能指向一个新的底层数组。</p>\n<h2 id=\"go-什么时候用make\"><a href=\"#go-什么时候用make\" class=\"headerlink\" title=\"go 什么时候用make\"></a>go 什么时候用make</h2><p>在Go语言中，<code>nil</code>是一个预定义的标识符，用于表示指针、通道、函数、接口、映射或切片类型的零值。简而言之，<code>nil</code>用于表示一个未初始化的引用或一个空的引用。以下是<code>nil</code>在不同上下文中的含义和作用：</p>\n<ol>\n<li><strong>指针</strong>：对于指针类型，<code>nil</code>表示没有指向任何对象的指针。</li>\n<li><strong>切片</strong>：对于切片类型，<code>nil</code>表示没有分配空间的切片。一个<code>nil</code>切片的长度和容量都是0，但它不等同于空切片（例如<code>[]int&#123;&#125;</code>）。</li>\n<li><strong>映射</strong>：对于映射类型，<code>nil</code>表示没有分配空间的映射。尝试向一个<code>nil</code>映射添加键值对会引发运行时panic。</li>\n<li><strong>通道</strong>：对于通道类型，<code>nil</code>表示没有分配空间的通道。向<code>nil</code>通道发送或从中接收会永远阻塞。</li>\n<li><strong>函数</strong>：对于函数类型，<code>nil</code>可以表示一个没有被赋予任何实际函数的函数变量。</li>\n<li><strong>接口</strong>：对于接口类型，<code>nil</code>表示没有绑定实现的接口。一个<code>nil</code>接口既没有存储任何值，也没有具体类型。</li>\n</ol>\n<h3 id=\"为什么需要nil？\"><a href=\"#为什么需要nil？\" class=\"headerlink\" title=\"为什么需要nil？\"></a>为什么需要<code>nil</code>？</h3><p><code>nil</code>的存在使得Go语言的错误处理和资源管理变得更加灵活和简洁。以下是一些使用<code>nil</code>的理由：</p>\n<ul>\n<li><strong>区分初始化状态</strong>：通过检查一个变量是否为<code>nil</code>，可以轻松判断出该变量是否已经初始化。这在处理可选的或者延迟初始化的资源时非常有用。</li>\n<li><strong>简化错误处理</strong>：在Go中，返回错误的惯用方式是返回一个值和一个<code>error</code>类型的值。如果没有错误发生，这个<code>error</code>类型的值通常会被设置为<code>nil</code>，这样调用者就可以通过检查<code>error</code>是否为<code>nil</code>来判断操作是否成功。</li>\n<li><strong>节省资源</strong>：<code>nil</code>切片和<code>nil</code>映射在没有分配内存之前不占用额外的内存，这允许开发者在不需要立即使用这些类型的情况下，延迟内存分配，从而更有效地使用资源。</li>\n</ul>\n<p>总之，<code>nil</code>在Go语言中扮演着重要的角色，它不仅帮助标识变量的初始化状态，还参与错误处理和资源管理，使代码更加简洁和高效。</p>\n<h2 id=\"为什么map需要make\"><a href=\"#为什么map需要make\" class=\"headerlink\" title=\"为什么map需要make\"></a>为什么map需要make</h2><p>在Go语言中，映射（map）是一种内建的数据类型，用于存储键值对的集合。映射的键可以是任何可比较的类型，例如整数、字符串等。映射的特性使其成为存储和检索数据的强大工具。然而，与其他一些语言不同，Go的映射需要通过<code>make</code>函数进行初始化才能使用，原因包括：</p>\n<ol>\n<li><p><strong>内存分配</strong>：映射在Go中是引用类型，这意味着当你声明一个映射变量时，变量本身并不直接包含数据，而是指向数据所在的内存地址。使用<code>make</code>函数初始化映射可以为其分配内存空间，从而使映射准备好存储键值对。如果不通过<code>make</code>进行初始化，映射变量将是<code>nil</code>，试图向其添加数据将导致运行时panic。</p>\n</li>\n<li><p><strong>避免<code>nil</code>映射的错误</strong>：直接使用未经初始化的<code>nil</code>映射进行赋值操作会导致运行时错误，因为<code>nil</code>映射没有分配内存空间，无法存储任何数据。通过<code>make</code>函数创建映射，你可以确保映射已经准备好接收数据，避免这种类型的错误。</p>\n</li>\n<li><p><strong>性能优化</strong>：使用<code>make</code>函数初始化映射时，可以选择性地指定初始容量，这有助于提高映射操作的效率。指定一个接近或等于预期存储元素数量的初始容量可以减少映射在存储数据时需要进行的内存重新分配的次数，从而提高性能。</p>\n<p>示例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>, <span class=\"number\">100</span>) <span class=\"comment\">// 创建一个初始容量为100的映射</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>简而言之，通过<code>make</code>初始化映射是为了为其分配内存，确保映射在使用前是非<code>nil</code>的，从而可以安全地添加或访问键值对。此外，<code>make</code>还提供了一种方式来优化映射的内存使用和性能。</p>\n<h2 id=\"如何复制一个map\"><a href=\"#如何复制一个map\" class=\"headerlink\" title=\"如何复制一个map\"></a>如何复制一个map</h2><p>在Go语言中，没有直接复制一个映射（map）的内建方法，因为映射是引用类型。如果你想复制一个映射，需要手动创建一个新映射并将原映射中的所有键值对复制到新映射中。这可以通过遍历原映射并将每个键值对添加到新映射来实现。以下是一个如何复制映射的示例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CopyMap</span><span class=\"params\">(originalMap <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>)</span></span> <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个新的映射，用于存储复制的键值对</span></span><br><span class=\"line\">    newMap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历原映射，复制每个键值对到新映射</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> key, value := <span class=\"keyword\">range</span> originalMap &#123;</span><br><span class=\"line\">        newMap[key] = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回新的映射副本</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newMap</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>CopyMap</code>函数接受一个<code>map[string]int</code>类型的映射作为参数，创建一个新的同类型映射，并遍历原映射，将所有键值对复制到新映射中。最后，函数返回这个新映射，实现了映射的复制。</p>\n<p>需要注意的是，这种复制方法是浅复制（shallow copy），意味着如果映射的值是指针或包含指针的复杂类型（如切片、映射等），那么复制的是指针本身，而不是它指向的数据。如果需要深复制（deep copy）这样的值，你需要实现更复杂的逻辑来复制指针指向的数据，而不仅仅是指针本身。</p>\n<h2 id=\"go实现stack\"><a href=\"#go实现stack\" class=\"headerlink\" title=\"go实现stack\"></a>go实现stack</h2><p>在Go语言中，可以使用切片（slice）来实现一个栈（stack）。栈是一种后进先出（LIFO）的数据结构，支持两个基本操作：push（向栈中添加一个元素）和pop（从栈中移除最顶端的元素）。下面是如何使用切片实现栈的一个简单例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Stack 表示栈的结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Stack <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    elements []<span class=\"type\">int</span> <span class=\"comment\">// 使用切片存储栈元素</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewStack 创建并返回一个空栈</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStack</span><span class=\"params\">()</span></span> *Stack &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;Stack&#123;[]<span class=\"type\">int</span>&#123;&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Push 向栈中添加一个元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Stack)</span></span> Push(element <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">    s.elements = <span class=\"built_in\">append</span>(s.elements, element)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Pop 从栈中移除最顶端的元素并返回该元素</span></span><br><span class=\"line\"><span class=\"comment\">// 如果栈为空，返回0和一个错误</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Stack)</span></span> Pop() (<span class=\"type\">int</span>, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(s.elements) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>, fmt.Errorf(<span class=\"string\">&quot;stack is empty&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 获取栈顶元素</span></span><br><span class=\"line\">    topElement := s.elements[<span class=\"built_in\">len</span>(s.elements)<span class=\"number\">-1</span>]</span><br><span class=\"line\">    <span class=\"comment\">// 移除栈顶元素</span></span><br><span class=\"line\">    s.elements = s.elements[:<span class=\"built_in\">len</span>(s.elements)<span class=\"number\">-1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> topElement, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IsEmpty 检查栈是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Stack)</span></span> IsEmpty() <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(s.elements) == <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Size 返回栈的大小</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Stack)</span></span> Size() <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(s.elements)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    stack := NewStack()</span><br><span class=\"line\">    stack.Push(<span class=\"number\">1</span>)</span><br><span class=\"line\">    stack.Push(<span class=\"number\">2</span>)</span><br><span class=\"line\">    fmt.Println(stack.Pop()) <span class=\"comment\">// 输出：2 &lt;nil&gt;</span></span><br><span class=\"line\">    fmt.Println(stack.IsEmpty()) <span class=\"comment\">// 输出：false</span></span><br><span class=\"line\">    fmt.Println(stack.Size()) <span class=\"comment\">// 输出：1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个例子中，<code>Stack</code>类型使用一个<code>int</code>类型的切片来存储栈元素。<code>Push</code>方法通过<code>append</code>函数将一个新元素添加到切片的末尾，实现了向栈中添加元素。<code>Pop</code>方法检查栈是否为空，如果不为空，则移除并返回切片的最后一个元素，模拟了从栈中移除元素的操作。此外，<code>IsEmpty</code>和<code>Size</code>方法分别用于检查栈是否为空和获取栈的大小。</p>\n<p>这个栈的实现是泛型的基础版本，只能存储<code>int</code>类型的元素。如果需要一个能够存储任何类型元素的栈，可以考虑使用<code>interface&#123;&#125;</code>类型代替<code>int</code>，或者使用Go 1.18及以上版本引入的泛型特性来实现。</p>\n<h2 id=\"go语言new的作用\"><a href=\"#go语言new的作用\" class=\"headerlink\" title=\"go语言new的作用\"></a>go语言new的作用</h2><p>在Go语言中，<code>new</code>是一个内置的函数，用于分配并初始化一个类型的空间，并返回指向这个新分配空间的指针。<code>new(T)</code>将分配类型<code>T</code>的零值内存空间，并返回一个指向该空间的指针，其类型为<code>*T</code>，其中<code>T</code>表示任意给定的类型。使用<code>new</code>分配的空间被初始化为类型的零值，例如，数值类型的零值是<code>0</code>，布尔类型的零值是<code>false</code>，指针类型的零值是<code>nil</code>等。</p>\n<h3 id=\"使用new的示例\"><a href=\"#使用new的示例\" class=\"headerlink\" title=\"使用new的示例\"></a>使用<code>new</code>的示例</h3><p>假设你有一个简单的结构体：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyStruct <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Field1 <span class=\"type\">int</span></span><br><span class=\"line\">    Field2 <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以使用<code>new</code>来创建这个结构体的一个实例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ms := <span class=\"built_in\">new</span>(MyStruct)</span><br></pre></td></tr></table></figure>\n\n<p>这行代码将分配<code>MyStruct</code>的内存，并将<code>ms</code>初始化为指向这块内存的指针。由于使用了<code>new</code>，<code>MyStruct</code>中的字段<code>Field1</code>和<code>Field2</code>会被初始化为它们各自类型的零值，即<code>Field1</code>为<code>0</code>，<code>Field2</code>为<code>&quot;&quot;</code>（空字符串）。</p>\n<h3 id=\"new与复合字面量的区别\"><a href=\"#new与复合字面量的区别\" class=\"headerlink\" title=\"new与复合字面量的区别\"></a><code>new</code>与复合字面量的区别</h3><p>虽然<code>new</code>可以用来创建类型的实例并获取其指针，Go语言还提供了另一种创建并初始化类型实例的方法，即使用复合字面量（composite literals）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ms := &amp;MyStruct&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种方法不仅创建了<code>MyStruct</code>的实例，并将其初始化为零值，还返回了指向这个实例的指针，类似于<code>new(MyStruct)</code>的作用。不过，复合字面量还允许你在创建实例的同时初始化字段值：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ms := &amp;MyStruct&#123;Field1: <span class=\"number\">10</span>, Field2: <span class=\"string\">&quot;Hello&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>new</code>函数在Go中用于分配并初始化一个类型的零值实例，并返回指向这个实例的指针。尽管<code>new</code>在某些情况下很有用，但在Go中，使用复合字面量初始化结构体及其指针更加常见，因为这种方法更灵活，可以直接在创建实例时初始化字段。</p>\n<h2 id=\"go-range-本质\"><a href=\"#go-range-本质\" class=\"headerlink\" title=\"go range 本质\"></a>go range 本质</h2><p>在Go语言中，<code>range</code>是一个用于迭代各种集合元素的关键字，包括数组、切片、映射、字符串和通道（channel）。<code>range</code>的本质是提供了一种简洁的语法来遍历容器类型的元素，而具体的迭代逻辑是根据被迭代对象的类型而内置在Go语言中的。下面是<code>range</code>用法的一些关键点，帮助理解其本质：</p>\n<h3 id=\"1-数组和切片\"><a href=\"#1-数组和切片\" class=\"headerlink\" title=\"1. 数组和切片\"></a>1. 数组和切片</h3><p>当使用<code>range</code>迭代数组或切片时，它会返回每个元素的索引和该索引处的值的副本。因为是副本，所以在迭代过程中修改这些值不会影响到原数组或切片中的元素。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slice := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> slice &#123;</span><br><span class=\"line\">    fmt.Println(i, v) <span class=\"comment\">// i 是索引，v 是该索引处的值的副本</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-映射（Map）\"><a href=\"#2-映射（Map）\" class=\"headerlink\" title=\"2. 映射（Map）\"></a>2. 映射（Map）</h3><p>迭代映射时，<code>range</code>返回每个键值对的键和值。由于映射的迭代顺序是不确定的，每次迭代同一个映射可能会得到不同的顺序。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m := <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>&#123;<span class=\"string\">&quot;a&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;b&quot;</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> m &#123;</span><br><span class=\"line\">    fmt.Println(k, v) <span class=\"comment\">// k 是键，v 是对应的值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-字符串\"><a href=\"#3-字符串\" class=\"headerlink\" title=\"3. 字符串\"></a>3. 字符串</h3><p>对于字符串，<code>range</code>迭代的是Unicode字符（rune），而不是字节。它返回当前字符的字节索引（不一定连续，因为Unicode字符可能占多个字节）和字符本身的rune值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := <span class=\"string\">&quot;Go语言&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, r := <span class=\"keyword\">range</span> s &#123;</span><br><span class=\"line\">    fmt.Println(i, r) <span class=\"comment\">// i 是rune的起始字节索引，r 是rune值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-通道（Channel）\"><a href=\"#4-通道（Channel）\" class=\"headerlink\" title=\"4. 通道（Channel）\"></a>4. 通道（Channel）</h3><p>当从通道中迭代时，<code>range</code>会连续从通道接收值，直到通道被关闭。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    c &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">    c &lt;- <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"built_in\">close</span>(c)</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"><span class=\"keyword\">for</span> v := <span class=\"keyword\">range</span> c &#123;</span><br><span class=\"line\">    fmt.Println(v) <span class=\"comment\">// v 是从通道接收到的值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本质理解\"><a href=\"#本质理解\" class=\"headerlink\" title=\"本质理解\"></a>本质理解</h3><p><code>range</code>的本质是语法糖，它为不同的集合类型提供了一种统一的迭代接口。在底层，Go语言根据被迭代对象的类型执行相应的迭代逻辑。这种设计简化了遍历数据结构的代码，使得开发者可以使用相同的语法模式来迭代不同类型的集合，而无需担心每种类型背后具体的迭代实现细节。</p>\n<h2 id=\"go-string如何push-back\"><a href=\"#go-string如何push-back\" class=\"headerlink\" title=\"go string如何push_back\"></a>go string如何push_back</h2><p>在Go语言中，字符串（<code>string</code>）是不可变的，这意味着一旦一个字符串被创建，它所包含的内容就不能被修改了。因此，Go中的字符串没有类似C++中<code>std::string</code>的<code>push_back</code>方法来直接在字符串的末尾添加一个字符。但是，你可以通过字符串连接的方式来“添加”字符或者另一个字符串到现有字符串的末尾，从而实现类似<code>push_back</code>的功能。</p>\n<p>使用<code>+</code>操作符或<code>fmt.Sprintf</code>函数是实现这一点的常见方法：</p>\n<h3 id=\"使用-操作符\"><a href=\"#使用-操作符\" class=\"headerlink\" title=\"使用+操作符\"></a>使用<code>+</code>操作符</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">s += <span class=\"string\">&quot; world&quot;</span> <span class=\"comment\">// 将&quot; world&quot;添加到&quot;hello&quot;的末尾</span></span><br><span class=\"line\">fmt.Println(s) <span class=\"comment\">// 输出: &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用fmt-Sprintf\"><a href=\"#使用fmt-Sprintf\" class=\"headerlink\" title=\"使用fmt.Sprintf\"></a>使用<code>fmt.Sprintf</code></h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">s = fmt.Sprintf(<span class=\"string\">&quot;%s%s&quot;</span>, s, <span class=\"string\">&quot; world&quot;</span>) <span class=\"comment\">// 将&quot; world&quot;添加到&quot;hello&quot;的末尾</span></span><br><span class=\"line\">fmt.Println(s) <span class=\"comment\">// 输出: &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你只想添加一个字符，可以将该字符先转换为字符串：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">c := <span class=\"string\">&#x27;!&#x27;</span> <span class=\"comment\">// 字符类型在Go中是rune</span></span><br><span class=\"line\">s += <span class=\"type\">string</span>(c) <span class=\"comment\">// 将字符&#x27;!&#x27;添加到&quot;hello&quot;的末尾</span></span><br><span class=\"line\">fmt.Println(s) <span class=\"comment\">// 输出: &quot;hello!&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>请记住，每次字符串连接操作实际上都会创建一个新的字符串，因为Go中的字符串是不可变的。如果你需要执行大量的字符串连接操作，使用<code>strings.Builder</code>类型可能会更高效：</p>\n<h3 id=\"使用strings-Builder\"><a href=\"#使用strings-Builder\" class=\"headerlink\" title=\"使用strings.Builder\"></a>使用<code>strings.Builder</code></h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> builder strings.Builder</span><br><span class=\"line\">builder.WriteString(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">builder.WriteString(<span class=\"string\">&quot; world&quot;</span>)</span><br><span class=\"line\">fmt.Println(builder.String()) <span class=\"comment\">// 输出: &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>strings.Builder</code>提供了一个可变的字符串缓冲区，可以更高效地构建字符串，特别是在涉及到大量字符串拼接操作时。它在内部管理一个字节切片（<code>[]byte</code>）来避免多次分配和复制字符串带来的性能开销。</p>\n<h2 id=\"介绍go中的错误处理\"><a href=\"#介绍go中的错误处理\" class=\"headerlink\" title=\"介绍go中的错误处理\"></a>介绍go中的错误处理</h2><p>在Go语言中，错误处理是通过使用<code>error</code>接口类型来实现的，这与许多其他语言使用异常（exceptions）的方式有所不同。<code>error</code>类型是Go语言标准库中的一个接口，定义如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">error</span> <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    Error() <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>任何拥有<code>Error() string</code>方法的类型都可以实现<code>error</code>接口，从而成为一个可以用于错误处理的错误类型。Go语言鼓励显式的错误处理，这意味着函数在遇到错误情况时，通常会返回一个错误值（实现了<code>error</code>接口的值），调用者应检查此返回值来决定如何应对错误。</p>\n<h3 id=\"错误处理的惯用法\"><a href=\"#错误处理的惯用法\" class=\"headerlink\" title=\"错误处理的惯用法\"></a>错误处理的惯用法</h3><p>在Go中处理错误的典型方式是通过检查函数的返回值中的错误值：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result, err := someFunction()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理错误</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;发生错误：&quot;</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"comment\">// 或者其他错误处理</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 继续正常逻辑</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义错误\"><a href=\"#自定义错误\" class=\"headerlink\" title=\"自定义错误\"></a>自定义错误</h3><p>你可以通过实现<code>error</code>接口创建自定义错误类型。这通常通过定义一个结构体，然后为它实现<code>Error() string</code>方法来完成：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyError <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Message <span class=\"type\">string</span></span><br><span class=\"line\">    Code    <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *MyError)</span></span> Error() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">&quot;%d - %s&quot;</span>, e.Code, e.Message)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用自定义错误的函数示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 假设发生了某种错误情况</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;MyError&#123;Message: <span class=\"string\">&quot;出了点问题&quot;</span>, Code: <span class=\"number\">404</span>&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"错误检查与处理\"><a href=\"#错误检查与处理\" class=\"headerlink\" title=\"错误检查与处理\"></a>错误检查与处理</h3><p>Go语言的错误处理模式鼓励开发者显式地检查和处理错误，这可以让错误的来源和处理更加清晰，有助于编写可靠和容易维护的代码。虽然这种方式可能使代码量略增，但它提高了程序的稳定性和可读性。</p>\n<h3 id=\"errors包和fmt-Errorf\"><a href=\"#errors包和fmt-Errorf\" class=\"headerlink\" title=\"errors包和fmt.Errorf\"></a><code>errors</code>包和<code>fmt.Errorf</code></h3><p>Go标准库提供了<code>errors</code>包，用于简化常见错误的创建。使用<code>errors.New</code>函数可以快速创建一个基本的错误实例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;errors&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">err := errors.New(<span class=\"string\">&quot;发生了一个错误&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>另外，<code>fmt</code>包的<code>Errorf</code>函数可以用来格式化错误信息并返回一个错误。这是创建带有格式化信息的错误的便捷方式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err := fmt.Errorf(<span class=\"string\">&quot;发生了错误：%v&quot;</span>, <span class=\"string\">&quot;具体信息&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"错误处理的进阶使用\"><a href=\"#错误处理的进阶使用\" class=\"headerlink\" title=\"错误处理的进阶使用\"></a>错误处理的进阶使用</h3><p>在一些复杂的应用场景中，Go语言的错误处理还涉及错误的封装（wrapping）、检查（inspection）、以及自定义错误类型的设计，以满足更高级的错误处理需求。从Go 1.13开始，标准库<code>errors</code>包引入了对错误封装和展开的支持，使得错误处理更加灵活。</p>\n<h2 id=\"Go的错误处理，和其他语言相比，优点是什么？缺点是什么？\"><a href=\"#Go的错误处理，和其他语言相比，优点是什么？缺点是什么？\" class=\"headerlink\" title=\"Go的错误处理，和其他语言相比，优点是什么？缺点是什么？\"></a>Go的错误处理，和其他语言相比，优点是什么？缺点是什么？</h2><p>Go语言的错误处理模型有其独特之处，相较于其他编程语言，这种模型既有优点也有缺点。</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li><strong>简明易懂</strong>：Go的错误处理非常直接。函数要么成功并返回结果，要么失败并返回错误。这种明确性使得错误处理逻辑易于理解和维护。</li>\n<li><strong>显式错误处理</strong>：强制要求检查错误迫使开发者面对可能出现的错误情况，这有助于提高代码的健壮性。在Go中，忽略错误不是默许的做法，这与一些其他语言中可能通过异常处理隐式地忽略错误的情况不同。</li>\n<li><strong>灵活性</strong>：由于错误被视为普通值，开发者可以使用Go的所有语言特性来处理错误，比如可以很容易地将错误信息记录到日志、添加额外的上下文信息，或者根据错误类型进行不同的处理。</li>\n<li><strong>性能</strong>：相比异常处理机制，Go的错误处理方式通常有更好的性能。在Go中，错误作为返回值处理，避免了异常处理可能带来的性能开销。</li>\n</ol>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ol>\n<li><strong>代码冗余</strong>：在每个可能发生错误的函数调用后都需要检查错误，这可能会导致大量重复的错误检查代码。虽然这提高了代码的明确性和可靠性，但也使得代码更加冗长。</li>\n<li><strong>错误处理分散</strong>：错误需要在它们发生的地方立即被处理，这可能导致错误处理逻辑分散在代码库的各个部分，而不是集中处理。</li>\n<li><strong>缺乏统一的错误处理结构</strong>：虽然Go的<code>interface&#123;&#125;</code>类型允许以统一的方式处理所有错误，但标准库并没有提供一个统一处理错误的结构或者模式，这可能导致不同的开发者或团队采用不同的错误处理策略，降低了代码的一致性。</li>\n<li><strong>功能限制</strong>：与支持异常的语言相比，Go的错误处理模型在某些情况下可能不够灵活。例如，在需要清理资源的情况下，缺少类似于其他语言中<code>finally</code>块的机制，尽管可以通过<code>defer</code>语句在某种程度上实现相似的功能。</li>\n</ol>\n<p>总体而言，Go的错误处理模型强调简洁性和明确性，鼓励开发者显式地处理每个可能出现的错误。这种模型有其明显的优势，特别是在提高代码可读性和可维护性方面，但也要求开发者付出更多努力来管理错误处理代码的冗余和分散。</p>\n<h2 id=\"Go的错误处理和java，C-相比？\"><a href=\"#Go的错误处理和java，C-相比？\" class=\"headerlink\" title=\"Go的错误处理和java，C++相比？\"></a>Go的错误处理和java，C++相比？</h2><p>Go语言的错误处理与Java和C++的异常处理机制有显著不同。每种语言的错误处理机制都有其设计哲学、优势和局限。下面是一个比较概览：</p>\n<h3 id=\"Go\"><a href=\"#Go\" class=\"headerlink\" title=\"Go\"></a>Go</h3><ul>\n<li><strong>错误作为值</strong>：在Go中，错误被视为值，通过<code>error</code>接口表示。函数通常返回一个错误值，以指示是否发生了错误。</li>\n<li><strong>显式检查</strong>：调用者必须显式检查错误值，以决定是否成功执行了函数。</li>\n<li><strong>无异常机制</strong>：Go语言没有异常机制。所有的错误都通过正常的控制流和值来处理。</li>\n</ul>\n<p><strong>优势</strong>：</p>\n<ul>\n<li>易于理解和预测错误处理的流程。</li>\n<li>鼓励开发者面对并显式处理错误情况。</li>\n</ul>\n<p><strong>局限</strong>：</p>\n<ul>\n<li>可能导致大量重复的错误检查代码。</li>\n<li>错误处理逻辑可能会分散于代码的多个地方。</li>\n</ul>\n<h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><ul>\n<li><strong>异常机制</strong>：Java使用异常来处理错误和异常情况。方法可以抛出异常，调用者需要捕获这些异常。</li>\n<li><strong>检查型和非检查型异常</strong>：Java区分检查型（必须显式处理）和非检查型异常（可选处理）。</li>\n<li><strong>try-catch-finally</strong>：通过<code>try-catch</code>语句块捕获和处理异常，<code>finally</code>块用于资源清理。</li>\n</ul>\n<p><strong>优势</strong>：</p>\n<ul>\n<li>异常提供了一种强制错误处理的机制，有助于捕获运行时错误。</li>\n<li>通过异常类型，可以传递丰富的错误信息。</li>\n</ul>\n<p><strong>局限</strong>：</p>\n<ul>\n<li>异常可能导致控制流难以跟踪，尤其是在多层嵌套调用中。</li>\n<li>过度使用异常可能会影响代码的可读性和性能。</li>\n</ul>\n<h3 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C++\"></a>C++</h3><ul>\n<li><strong>异常机制</strong>：C++同样使用异常来处理错误情况。函数可以抛出异常，使用<code>try-catch</code>块捕获异常。</li>\n<li><strong>资源管理</strong>：C++提倡RAII（资源获取即初始化）原则，利用对象生命周期自动管理资源，配合异常使用。</li>\n<li><strong>noexcept</strong>：C++11引入了<code>noexcept</code>关键字，用于指示函数是否抛出异常。</li>\n</ul>\n<p><strong>优势</strong>：</p>\n<ul>\n<li>异常允许将错误处理代码从正常逻辑中分离出来，提高代码清晰度。</li>\n<li>RAII原则和智能指针等机制与异常配合，有效管理资源。</li>\n</ul>\n<p><strong>局限</strong>：</p>\n<ul>\n<li>异常可能导致性能开销，特别是在深层嵌套调用中。</li>\n<li>需要谨慎管理异常安全性和资源泄漏问题。</li>\n</ul>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>Go</strong>的错误处理模式倾向于简单和显式，强迫开发者面对错误，但可能导致代码冗余。</li>\n<li><strong>Java</strong>和**C++**使用异常机制处理错误，能够将错误处理代码与业务逻辑分离，提供更丰富的错误信息，但可能使得控制流程复杂化，且需要注意异常安全性和性能问题。</li>\n</ul>\n<p>选择哪种错误处理方式，很大程度上取决于项目的具体需求、团队的偏好和特定语言的生态。</p>\n<h2 id=\"go中我不想定义自己的err类型，应该用哪种默认的？\"><a href=\"#go中我不想定义自己的err类型，应该用哪种默认的？\" class=\"headerlink\" title=\"go中我不想定义自己的err类型，应该用哪种默认的？\"></a>go中我不想定义自己的err类型，应该用哪种默认的？</h2><p>如果你不想在Go中定义自己的错误类型，可以使用标准库<code>errors</code>包中的<code>errors.New</code>函数来创建一个简单的错误。这种方式适用于那些不需要从错误中提取额外信息的场景。<code>errors.New</code>接收一个字符串参数，返回一个符合<code>error</code>接口的错误对象。</p>\n<h3 id=\"使用errors-New\"><a href=\"#使用errors-New\" class=\"headerlink\" title=\"使用errors.New\"></a>使用<code>errors.New</code></h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;errors&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span><span class=\"params\">()</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 假设发生了某种错误情况</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.New(<span class=\"string\">&quot;这里发生了一个错误&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    err := someFunction()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Println(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"格式化错误信息\"><a href=\"#格式化错误信息\" class=\"headerlink\" title=\"格式化错误信息\"></a>格式化错误信息</h3><p>如果你需要在错误信息中包含变量或者更复杂的数据结构，可以使用<code>fmt.Errorf</code>来代替<code>errors.New</code>。<code>fmt.Errorf</code>允许你像使用<code>fmt.Sprintf</code>一样格式化错误字符串，并返回一个错误对象。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span><span class=\"params\">(param <span class=\"type\">int</span>)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 fmt.Errorf 格式化错误信息</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">&quot;错误发生在 %d&quot;</span>, param)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    err := someFunction(<span class=\"number\">42</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Println(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从Go 1.13开始，<code>errors</code>包提供了<code>As</code>和<code>Is</code>函数，用于检查错误的类型和值。同时，<code>fmt.Errorf</code>支持使用<code>%w</code>动词来包装错误，使得你可以保留原始错误的同时添加上下文信息。即使你不定义自己的错误类型，这些功能也能帮助你更好地管理和检查错误。</p>\n<h3 id=\"使用错误包装\"><a href=\"#使用错误包装\" class=\"headerlink\" title=\"使用错误包装\"></a>使用错误包装</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;errors&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ErrSpecific = errors.New(<span class=\"string\">&quot;特定错误&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span><span class=\"params\">()</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回一个包装了原始错误的新错误</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">&quot;操作失败: %w&quot;</span>, ErrSpecific)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    err := someFunction()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> errors.Is(err, ErrSpecific) &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;发生了特定的错误:&quot;</span>, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>errors.New</code>和<code>fmt.Errorf</code>可以满足大多数不需要自定义错误类型的场景，并且通过错误包装和检查，你依然可以构建出结构化和可管理的错误处理逻辑。</p>\n<h2 id=\"如何判断-map-中是否包含某个-key-？\"><a href=\"#如何判断-map-中是否包含某个-key-？\" class=\"headerlink\" title=\"如何判断 map 中是否包含某个 key ？\"></a>如何判断 map 中是否包含某个 key ？</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sample <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> _, ok := sample[<span class=\"number\">10</span>]; ok &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"strings-Join-≈-strings-Builder-bytes-Buffer-“-”-fmt-Sprintf\"><a href=\"#strings-Join-≈-strings-Builder-bytes-Buffer-“-”-fmt-Sprintf\" class=\"headerlink\" title=\"strings.Join ≈ strings.Builder &gt; bytes.Buffer &gt; “+” &gt; fmt.Sprintf\"></a>strings.Join ≈ strings.Builder &gt; bytes.Buffer &gt; “+” &gt; fmt.Sprintf</h2><p>在Go语言中，拼接字符串可以通过多种方式实现，每种方式在不同场景下的性能和适用性各有差异。下面是对这五种方法——<code>strings.Join</code>、<code>strings.Builder</code>、<code>bytes.Buffer</code>、<code>&quot;+&quot;</code>操作符、<code>fmt.Sprintf</code>——的分析，按照性能从高到低排列：</p>\n<h3 id=\"1-strings-Join\"><a href=\"#1-strings-Join\" class=\"headerlink\" title=\"1. strings.Join\"></a>1. <code>strings.Join</code></h3><ul>\n<li><strong>适用场景</strong>：当你有一个字符串切片，需要将其元素连接成一个单独的字符串时，<code>strings.Join</code>非常高效。</li>\n<li><strong>性能</strong>：通常比<code>+</code>操作符和<code>fmt.Sprintf</code>更高效，因为它在内部计算结果字符串的确切长度，然后一次性分配足够的内存。</li>\n<li><strong>示例</strong>：  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parts := []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;Hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>&#125;</span><br><span class=\"line\">result := strings.Join(parts, <span class=\"string\">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-strings-Builder\"><a href=\"#2-strings-Builder\" class=\"headerlink\" title=\"2. strings.Builder\"></a>2. <code>strings.Builder</code></h3><ul>\n<li><strong>适用场景</strong>：对于在循环或多个步骤中构建字符串尤其有用。自Go 1.10引入以来，它是推荐的字符串构建方法。</li>\n<li><strong>性能</strong>：提供了高效的字符串构建能力，因为它避免了不必要的内存分配和复制。</li>\n<li><strong>示例</strong>：  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sb strings.Builder</span><br><span class=\"line\">sb.WriteString(<span class=\"string\">&quot;Hello&quot;</span>)</span><br><span class=\"line\">sb.WriteString(<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">sb.WriteString(<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">result := sb.String()</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-bytes-Buffer\"><a href=\"#3-bytes-Buffer\" class=\"headerlink\" title=\"3. bytes.Buffer\"></a>3. <code>bytes.Buffer</code></h3><ul>\n<li><strong>适用场景</strong>：在需要频繁修改字符串或者处理二进制数据和字符串转换时适用。<code>bytes.Buffer</code>与<code>strings.Builder</code>类似，但更通用，也支持字节操作。</li>\n<li><strong>性能</strong>：虽然性能略低于<code>strings.Builder</code>，但在需要处理字节和字符串的场景下是一个很好的选择。</li>\n<li><strong>示例</strong>：  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buf bytes.Buffer</span><br><span class=\"line\">buf.Write([]<span class=\"type\">byte</span>(<span class=\"string\">&quot;Hello&quot;</span>))</span><br><span class=\"line\">buf.WriteString(<span class=\"string\">&quot; world&quot;</span>)</span><br><span class=\"line\">result := buf.String()</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"4-操作符\"><a href=\"#4-操作符\" class=\"headerlink\" title=\"4. &quot;+&quot;操作符\"></a>4. <code>&quot;+&quot;</code>操作符</h3><ul>\n<li><strong>适用场景</strong>：简单的字符串拼接操作，尤其是少量字符串时。</li>\n<li><strong>性能</strong>：在拼接少数几个字符串时性能可接受，但在循环或大量字符串拼接场景中性能较差，因为每次拼接都会产生新的字符串，导致多次内存分配和复制。</li>\n<li><strong>示例</strong>：  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result := <span class=\"string\">&quot;Hello&quot;</span> + <span class=\"string\">&quot; &quot;</span> + <span class=\"string\">&quot;world&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"5-fmt-Sprintf\"><a href=\"#5-fmt-Sprintf\" class=\"headerlink\" title=\"5. fmt.Sprintf\"></a>5. <code>fmt.Sprintf</code></h3><ul>\n<li><strong>适用场景</strong>：需要格式化字符串时，如插入变量、调整格式等。</li>\n<li><strong>性能</strong>：相比于其他方法，性能较低，因为它需要解析格式字符串并执行类型断言等操作，但它提供了非常强大的格式化功能。</li>\n<li><strong>示例</strong>：  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name := <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">result := fmt.Sprintf(<span class=\"string\">&quot;Hello %s&quot;</span>, name)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>选择哪种方法取决于具体的应用场景。对于简单或少量的字符串拼接，直接使用<code>&quot;+&quot;</code>可能是最直观的。当需要构建大量字符串时，<code>strings.Builder</code>是首选。<code>strings.Join</code>适合已经存储在切片中的字符串拼接。<code>fmt.Sprintf</code>提供了格式化的灵活性，适用于需要格式化输出的场景。<code>bytes.Buffer</code>则在处理既包含文本又包含二进制数据的情况下非常有用。</p>\n<h2 id=\"strings-Builder原理\"><a href=\"#strings-Builder原理\" class=\"headerlink\" title=\"strings.Builder原理\"></a>strings.Builder原理</h2><p><code>strings.Builder</code> 是 Go 语言在 1.10 版本中引入的一个结构体，它提供了一种高效构建字符串的方法。与其他字符串拼接方法相比，<code>strings.Builder</code> 更为高效，主要因为它在内部优化了内存的分配和复制操作。下面是 <code>strings.Builder</code> 的一些关键原理和特点：</p>\n<h3 id=\"1-最小化内存分配\"><a href=\"#1-最小化内存分配\" class=\"headerlink\" title=\"1. 最小化内存分配\"></a>1. 最小化内存分配</h3><p><code>strings.Builder</code> 在内部维护了一个字节切片（<code>[]byte</code>）。当向 <code>Builder</code> 添加字符串时，它实际上是将这些字符串的字节追加到内部的字节切片中。<code>Builder</code> 会根据需要自动增长这个字节切片的容量，但它尽量通过预分配足够的内存空间来避免频繁的内存重新分配。</p>\n<h3 id=\"2-避免不必要的复制\"><a href=\"#2-避免不必要的复制\" class=\"headerlink\" title=\"2. 避免不必要的复制\"></a>2. 避免不必要的复制</h3><p>在传统的字符串拼接操作中，每一次拼接都可能产生一个新的字符串对象，这意味着需要复制字符串的内容到新的内存位置。相比之下，<code>strings.Builder</code> 通过直接在已有的字节切片上追加内容，避免了这种复制，从而提升了性能。</p>\n<h3 id=\"3-高效的字符串生成\"><a href=\"#3-高效的字符串生成\" class=\"headerlink\" title=\"3. 高效的字符串生成\"></a>3. 高效的字符串生成</h3><p>当调用 <code>strings.Builder</code> 的 <code>String()</code> 方法来获取最终的字符串时，它会基于内部的字节切片创建一个新的字符串。由于 Go 语言字符串的不可变性，这个操作会涉及一次内存复制。然而，这仅仅发生在整个构建过程的最后，因此相比于多次字符串拼接，总体上仍然大大减少了内存复制的次数。</p>\n<h3 id=\"4-Grow-方法\"><a href=\"#4-Grow-方法\" class=\"headerlink\" title=\"4. Grow 方法\"></a>4. <code>Grow</code> 方法</h3><p><code>strings.Builder</code> 提供了 <code>Grow</code> 方法，允许手动指定预期需要的额外容量。这可以进一步优化性能，因为它可以在大量数据被写入之前预分配足够的内存，从而避免自动扩容过程中的多次内存分配。</p>\n<h3 id=\"5-安全性\"><a href=\"#5-安全性\" class=\"headerlink\" title=\"5. 安全性\"></a>5. 安全性</h3><p><code>strings.Builder</code> 的设计也考虑到了安全性。一旦通过 <code>String()</code> 方法获取了最终的字符串，再尝试向 <code>Builder</code> 写入新的数据将会导致 panic。这个设计确保了一旦字符串被生成，内部的字节切片不会被进一步修改，保持了字符串不可变的特性。</p>\n<p>总的来说，<code>strings.Builder</code> 的设计充分利用了 Go 语言的特性，如切片的灵活性和字符串的不可变性，通过减少内存分配和复制的次数，提供了一种高效且安全的方式来构建字符串。</p>\n<h2 id=\"Go语言-…是什么\"><a href=\"#Go语言-…是什么\" class=\"headerlink\" title=\"Go语言 …是什么\"></a>Go语言 …是什么</h2><p>在Go语言中，<code>...</code>符号有两个主要用途：</p>\n<h3 id=\"1-可变参数函数（Variadic-Function）\"><a href=\"#1-可变参数函数（Variadic-Function）\" class=\"headerlink\" title=\"1. 可变参数函数（Variadic Function）\"></a>1. 可变参数函数（Variadic Function）</h3><p>当<code>...</code>用于函数的参数类型前时，表示该函数可以接收任意数量的该类型的参数。这使得函数可以灵活处理不同数量的参数，类似于其他语言中的可变参数列表。</p>\n<p>例如，定义一个可接收多个<code>int</code>类型参数的函数，并计算它们的和：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(nums ...<span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    total := <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, num := <span class=\"keyword\">range</span> nums &#123;</span><br><span class=\"line\">        total += num</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> total</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)) <span class=\"comment\">// 输出 6</span></span><br><span class=\"line\">    fmt.Println(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)) <span class=\"comment\">// 输出 15</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>sum</code>函数可以接收任意数量的<code>int</code>参数。</p>\n<h3 id=\"2-切片参数展开（Slice-Unfolding）\"><a href=\"#2-切片参数展开（Slice-Unfolding）\" class=\"headerlink\" title=\"2. 切片参数展开（Slice Unfolding）\"></a>2. 切片参数展开（Slice Unfolding）</h3><p>当<code>...</code>用于调用可变参数函数时，紧跟在切片变量后面，表示将切片的元素展开为参数列表传递给函数。</p>\n<p>继续使用上面的<code>sum</code>函数作为例子，如果你有一个<code>int</code>切片，并希望将其元素作为参数传递给<code>sum</code>，可以这样做：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">fmt.Println(sum(nums...)) <span class=\"comment\">// 输出 15</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>nums...</code>将<code>nums</code>切片中的每个元素展开，作为独立的参数传递给<code>sum</code>函数。</p>\n<h3 id=\"总结-3\"><a href=\"#总结-3\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>...</code>在Go语言中用作可变参数函数定义和切片参数展开的语法元素，提供了编写灵活函数接口和调用的能力。</p>\n","excerpt":"","more":"<h1 id=\"ChatGPT摘抄\"><a href=\"#ChatGPT摘抄\" class=\"headerlink\" title=\"ChatGPT摘抄\"></a>ChatGPT摘抄</h1><h2 id=\"Go和C-的区别\"><a href=\"#Go和C-的区别\" class=\"headerlink\" title=\"Go和C++的区别\"></a>Go和C++的区别</h2><p>Go语言（通常称为Golang）和C++在多个方面有显著的区别，包括它们的设计哲学、类型系统、内存管理、并发模型等方面。下面是一些主要的区别：</p>\n<ol>\n<li><p><strong>设计哲学</strong>:</p>\n<ul>\n<li><strong>Go</strong> 设计简洁，以提高开发效率和易用性为目标。它旨在使得编写高性能、可靠、易于维护的代码更加直接和简单。</li>\n<li><strong>C++</strong> 设计为一种通用编程语言，强调性能和灵活性。它支持多种编程范式（如过程式、面向对象、泛型编程），但这也使得它变得相对复杂。</li>\n</ul>\n</li>\n<li><p><strong>类型系统</strong>:</p>\n<ul>\n<li><strong>Go</strong> 有一个静态类型系统，但它的类型推导使得代码更简洁。它支持接口，但不支持类和继承，而是通过组合和接口实现多态和代码复用。</li>\n<li><strong>C++</strong> 也是静态类型的，但它支持更复杂的类型系统，包括类、继承、模板等。这提供了强大的灵活性，但也增加了复杂性。</li>\n</ul>\n</li>\n<li><p><strong>内存管理</strong>:</p>\n<ul>\n<li><strong>Go</strong> 提供自动垃圾收集，减少了内存泄漏的风险，简化了内存管理。</li>\n<li><strong>C++</strong> 需要程序员手动管理内存，虽然提供了智能指针等现代特性来帮助管理，但管理不当仍可能导致内存泄漏和其他问题。</li>\n</ul>\n</li>\n<li><p><strong>并发模型</strong>:</p>\n<ul>\n<li><strong>Go</strong> 的并发模型是其核心特性之一，基于“goroutines”（轻量级线程）和通道。这使得编写并发程序变得更简单和安全。</li>\n<li><strong>C++</strong> 支持多线程，但并发并不是语言核心的一部分。C++11及以后的版本引入了一些并发编程的标准库支持，但使用起来比Go更复杂。</li>\n</ul>\n</li>\n<li><p><strong>标准库和生态系统</strong>:</p>\n<ul>\n<li><strong>Go</strong> 有一个丰富的标准库，尤其是对于网络编程和并发编程。Go的生态系统随着语言的普及而快速增长，特别是在云服务和微服务开发中。</li>\n<li><strong>C++</strong> 拥有庞大的第三方库和工具集，适用于各种编程任务，但标准库相对较小。C++在高性能计算、游戏开发、系统编程等领域有着悠久和广泛的应用。</li>\n</ul>\n</li>\n<li><p><strong>编译和执行</strong>:</p>\n<ul>\n<li><strong>Go</strong> 编译器倾向于生成单个静态链接的二进制文件，简化了部署和分发。</li>\n<li><strong>C++</strong> 通常需要更复杂的构建系统，尤其是对于依赖于多个库和平台的项目。</li>\n</ul>\n</li>\n</ol>\n<p>总之，Go和C++在设计上有根本的不同。Go旨在简化并发编程，提高开发效率，适合快速开发大型分布式系统。而C++提供了更多的控制和灵活性，适合那些需要极致性能优化和复杂系统设计的场景。选择哪种语言取决于项目需求、团队熟悉度和特定任务的需求。</p>\n<h2 id=\"讲一下go语言中的协程\"><a href=\"#讲一下go语言中的协程\" class=\"headerlink\" title=\"讲一下go语言中的协程\"></a>讲一下go语言中的协程</h2><p>Go语言中的协程（goroutine）是Go语言并发设计的核心。goroutine 类似于线程，但在执行和资源消耗方面更为高效。它们由Go运行时（runtime）管理，而不是直接由操作系统管理。这样做的好处是goroutine的创建和销毁的成本比操作系统线程低得多，允许在同一程序中并发运行成千上万的goroutine。</p>\n<h3 id=\"创建goroutine\"><a href=\"#创建goroutine\" class=\"headerlink\" title=\"创建goroutine\"></a>创建goroutine</h3><p>在Go语言中，创建一个goroutine非常简单，只需要在函数调用前加上<code>go</code>关键字。例如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> funcName(params)</span><br></pre></td></tr></table></figure>\n\n<p>这会启动一个新的goroutine并在这个新的goroutine中调用<code>funcName</code>函数，<code>params</code>是传递给<code>funcName</code>函数的参数。</p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ol>\n<li><strong>轻量级</strong>：每个goroutine的堆栈大小在初始化时很小，根据需要可以动态地增长和缩减。这种设计让成千上万的goroutine并发运行成为可能。</li>\n<li><strong>不需要显式创建和销毁</strong>：goroutine由Go的运行时环境管理，程序员只需要创建它们，无需关心销毁和回收。</li>\n<li><strong>使用通道（channels）进行通信</strong>：goroutine之间的同步通常通过channels进行，channels是Go语言中的一种类型安全的消息传递机制。使用channels，可以很容易地在goroutine之间传递数据和信号。</li>\n</ol>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>下面的示例展示了如何使用goroutine和channels进行并发编程：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数打印传入的消息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printMessage</span><span class=\"params\">(message <span class=\"type\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">        fmt.Println(message)</span><br><span class=\"line\">        time.Sleep(time.Millisecond * <span class=\"number\">100</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个新的goroutine运行printMessage函数</span></span><br><span class=\"line\">    <span class=\"keyword\">go</span> printMessage(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 主goroutine中也运行printMessage函数</span></span><br><span class=\"line\">    printMessage(<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 等待按键结束程序，避免主goroutine提前结束</span></span><br><span class=\"line\">    fmt.Scanln()</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;done&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>printMessage</code>函数将在两个不同的goroutine中并发执行：一个是通过<code>go printMessage(&quot;hello&quot;)</code>创建的goroutine，另一个是主goroutine。这两个goroutine将并发地运行，打印出交替的”hello”和”world”消息。</p>\n<p>总之，goroutine是实现并发编程的强大工具，它使得编写高性能并发程序在Go语言中变得既简单又高效。</p>\n<h2 id=\"协程和线程的区别是什么\"><a href=\"#协程和线程的区别是什么\" class=\"headerlink\" title=\"协程和线程的区别是什么\"></a>协程和线程的区别是什么</h2><p>协程（Coroutines）和线程（Threads）都是程序执行流的基本单位，它们之间有一些关键的区别和优缺点。理解这些区别有助于选择最适合特定应用需求的并发模型。</p>\n<h3 id=\"1-管理方式\"><a href=\"#1-管理方式\" class=\"headerlink\" title=\"1. 管理方式\"></a>1. 管理方式</h3><ul>\n<li><strong>线程</strong>：通常由操作系统管理。操作系统负责线程的调度和管理，线程切换涉及到上下文切换，包括保存当前线程的状态并恢复另一个线程的状态，这是一个相对昂贵的操作。</li>\n<li><strong>协程</strong>：由程序和运行时（runtime）管理，不直接依赖操作系统的线程管理。协程上下文切换的成本通常比线程低得多，因为这种切换是在用户态完成的，避免了内核态与用户态之间的切换开销。</li>\n</ul>\n<h3 id=\"2-资源消耗\"><a href=\"#2-资源消耗\" class=\"headerlink\" title=\"2. 资源消耗\"></a>2. 资源消耗</h3><ul>\n<li><strong>线程</strong>：每个线程都有自己的堆栈和局部变量，占用的内存量相对较大。线程的数量受到系统资源的限制。</li>\n<li><strong>协程</strong>：通常非常轻量，拥有很小的堆栈和低资源消耗。因此，在同一程序中可以同时运行成千上万个协程。</li>\n</ul>\n<h3 id=\"3-并发模型\"><a href=\"#3-并发模型\" class=\"headerlink\" title=\"3. 并发模型\"></a>3. 并发模型</h3><ul>\n<li><strong>线程</strong>：多线程编程模型可以实现真正的并行执行（在多核处理器上），但线程间的同步和通信（如使用锁、信号量等）可能导致复杂的竞态条件和死锁问题。</li>\n<li><strong>协程</strong>：通常在单线程中运行，实现并发而非并行。协程之间的通信和同步通过使用消息传递（如Go语言的channels）或事件循环（如Python的asyncio）等机制，这些机制旨在避免传统的锁和条件变量带来的问题。</li>\n</ul>\n<h3 id=\"4-控制流\"><a href=\"#4-控制流\" class=\"headerlink\" title=\"4. 控制流\"></a>4. 控制流</h3><ul>\n<li><strong>线程</strong>：操作系统控制线程的调度，程序员通常不能精确控制执行流的切换点。</li>\n<li><strong>协程</strong>：提供了更精细的控制能力，允许程序员确定何时以及如何切换任务，通过这种方式，可以更容易地编写非阻塞代码和管理并发。</li>\n</ul>\n<h3 id=\"5-使用场景\"><a href=\"#5-使用场景\" class=\"headerlink\" title=\"5. 使用场景\"></a>5. 使用场景</h3><ul>\n<li><strong>线程</strong>：适用于需要实现真正并行任务处理的场景，尤其是在计算密集型应用中。</li>\n<li><strong>协程</strong>：适合高并发、IO密集型应用，如网络服务器、异步处理任务等，能有效提高资源的利用率和程序的响应性。</li>\n</ul>\n<p>总结来说，线程是操作系统层面的并发执行单元，资源开销较大，适合于并行处理；而协程是更轻量级的用户态线程，它们提供了更高的并发性和更灵活的控制方式，适合于构建高并发的应用程序。正确地选择使用线程还是协程，取决于具体的应用场景和性能需求。</p>\n<h2 id=\"假设我在go语言中开启了10个协程，它们会运行在几个线程上，几个CPU上\"><a href=\"#假设我在go语言中开启了10个协程，它们会运行在几个线程上，几个CPU上\" class=\"headerlink\" title=\"假设我在go语言中开启了10个协程，它们会运行在几个线程上，几个CPU上\"></a>假设我在go语言中开启了10个协程，它们会运行在几个线程上，几个CPU上</h2><p>在Go语言中，协程（goroutine）的运行不是直接映射到操作系统线程上的，而是由Go运行时（runtime）进行管理。Go运行时使用了M:N调度模型（多个goroutines被多路复用到较少的操作系统线程上），这意味着数千个goroutines可能只用到很少数量的操作系统线程。具体到你的问题，让我们看看这个模型的两个主要组件以及如何影响goroutines的运行：</p>\n<h3 id=\"1-GOMAXPROCS\"><a href=\"#1-GOMAXPROCS\" class=\"headerlink\" title=\"1. GOMAXPROCS\"></a>1. GOMAXPROCS</h3><p><code>GOMAXPROCS</code>是一个环境变量，用于控制Go程序运行时可以使用的CPU核心数。默认情况下，它的值设为了你的机器上的逻辑CPU核心数。你可以通过<code>runtime.GOMAXPROCS()</code>函数查询或设置这个值。<code>GOMAXPROCS</code>决定了有多少个操作系统线程可以同时执行Go代码。</p>\n<h3 id=\"2-调度器\"><a href=\"#2-调度器\" class=\"headerlink\" title=\"2. 调度器\"></a>2. 调度器</h3><p>Go的调度器是基于M:N模型实现的，其中：</p>\n<ul>\n<li><strong>M</strong> 代表操作系统线程（machine）。</li>\n<li><strong>N</strong> 代表goroutines。</li>\n</ul>\n<p>调度器的任务是将N个goroutines分配给M个操作系统线程上执行。这意味着，即使你有数千个goroutines，Go运行时也可能只使用<code>GOMAXPROCS</code>指定数量的操作系统线程来执行这些goroutines。</p>\n<h3 id=\"运行在多少个线程和CPU上？\"><a href=\"#运行在多少个线程和CPU上？\" class=\"headerlink\" title=\"运行在多少个线程和CPU上？\"></a>运行在多少个线程和CPU上？</h3><p>假设你开启了10个goroutines：</p>\n<ul>\n<li><strong>线程</strong>：这些goroutines的实际运行可能全部在一个单独的操作系统线程上，也可能分布在多个操作系统线程上，具体取决于<code>GOMAXPROCS</code>的设置和Go调度器的决定。如果<code>GOMAXPROCS</code>的值大于1（默认情况下通常如此），那么这些goroutines有可能被调度到不同的操作系统线程上执行。</li>\n<li><strong>CPU</strong>：这些goroutines实际上在<code>GOMAXPROCS</code>设定的CPU核心上并发运行。如果<code>GOMAXPROCS</code>大于1，goroutines可以在多个CPU核心上并行执行。</li>\n</ul>\n<p>因此，如果<code>GOMAXPROCS</code>设置为大于1的值，你的10个goroutines可能会在多个线程和多个CPU上运行，具体分配由Go运行时的调度器动态管理。但要注意，goroutine到线程的具体映射以及调度行为是由Go运行时内部决定的，可能会随着Go版本和具体的运行情况而有所不同。</p>\n<h2 id=\"go的通道是无序的，这样怎么能做好并发呢\"><a href=\"#go的通道是无序的，这样怎么能做好并发呢\" class=\"headerlink\" title=\"go的通道是无序的，这样怎么能做好并发呢\"></a>go的通道是无序的，这样怎么能做好并发呢</h2><p>在Go语言中，说通道（channels）是“无序的”可能会有点误导。实际上，通道本身维持着发送和接收操作的顺序：如果你按顺序发送了值A然后是值B到同一个通道，接收方也将首先接收到A，然后是B，这意味着在单个通道上，发送和接收是有序的。然而，当涉及到从多个并发发送者接收时，哪个发送者首先将消息送达到通道是不确定的，这可能导致看似“无序”的行为。</p>\n<p>当你在处理并发时，确保程序的正确性通常依赖于同步和通信机制，而Go通过通道和goroutines提供了强大的工具来帮助你做到这一点。这里有一些策略来确保你在并发程序中使用通道时能够正确地同步和顺序操作：</p>\n<ol>\n<li><p><strong>使用无缓冲通道进行同步</strong>：无缓冲通道保证了发送操作会阻塞，直到接收操作发生，这可以用作goroutines之间的同步点。</p>\n</li>\n<li><p><strong>使用有缓冲通道控制并发</strong>：有缓冲通道允许在阻塞之前发送多个值。它们可以用来限制并发级别，比如通过控制同时运行的goroutines的数量。</p>\n</li>\n<li><p><strong>关闭通道来广播消息</strong>：关闭一个通道会通知所有的接收者没有更多的值会被发送到这个通道。这是一种广播机制，可以用来通知多个goroutine某个条件已经成立，比如终止。</p>\n</li>\n<li><p><strong>选择语句</strong>：<code>select</code> 语句允许你同时等待多个通道操作，并根据哪个通道准备就绪来执行相应的代码块。这可以用来处理来自多个来源的输入，同时保持逻辑上的清晰和顺序。</p>\n</li>\n<li><p><strong>顺序控制</strong>：当需要精确控制多个goroutine的执行顺序时，可以设计一种协议或使用一系列通道来顺序地进行操作，确保并发操作的正确顺序。</p>\n</li>\n</ol>\n<p>通过这些机制，Go允许你构建复杂的并发程序，同时保持代码的简洁性和清晰度。正确地使用通道和goroutines，你可以有效地解决并发中的同步和顺序问题，从而实现高效且易于理解的并发逻辑。</p>\n<h2 id=\"管道例子探究\"><a href=\"#管道例子探究\" class=\"headerlink\" title=\"管道例子探究\"></a>管道例子探究</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ts := []<span class=\"type\">int</span>&#123;<span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">-9</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tc := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\">\tfmt.Println(s[:<span class=\"built_in\">len</span>(s)/<span class=\"number\">2</span>])</span><br><span class=\"line\">\tfmt.Println(s[<span class=\"built_in\">len</span>(s)/<span class=\"number\">2</span>:])</span><br><span class=\"line\">\tsum(s[:<span class=\"built_in\">len</span>(s)/<span class=\"number\">2</span>], c) <span class=\"comment\">// 17</span></span><br><span class=\"line\">\tsum(s[<span class=\"built_in\">len</span>(s)/<span class=\"number\">2</span>:], c)</span><br><span class=\"line\">\tx, y := &lt;-c, &lt;-c <span class=\"comment\">// 从 c 中接收</span></span><br><span class=\"line\">\tfmt.Println(x, y, x+y)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样为什么不对？管道必须和goroutine搭配使用吗?</p>\n<hr>\n<p>你的新代码片段中，<code>sum</code> 函数不是在goroutines中执行的，而是直接顺序执行。问题在于，在你尝试向通道 <code>c</code> 发送数据时（使用 <code>c &lt;- sum</code> 语法），因为 <code>c</code> 是一个无缓冲的通道，发送操作会阻塞直到另一方准备好接收数据。在这种情况下，因为你的发送操作 (<code>c &lt;- sum</code>) 发生在主goroutine中，而且没有其他并行的goroutine去接收这些值，这将导致死锁：主goroutine在等待自己向通道发送数据的操作完成，但这永远不会发生，因为没有其他并发操作去从通道中接收数据。</p>\n<p>通道确实设计为在goroutines之间进行通信的一种方式，它们非常适合用于并发编程。在单个goroutine内使用无缓冲通道进行发送和接收操作通常会导致死锁，因为无缓冲通道要求发送和接收操作几乎同时发生。</p>\n<p>简而言之，你的最后一个示例不正确，原因如下：</p>\n<ol>\n<li><p><strong>死锁</strong>：由于 <code>sum</code> 函数调用并非在goroutines中执行，它们将顺序执行。第一个 <code>sum</code> 调用试图向通道 <code>c</code> 发送一个值，但会阻塞，因为没有其他goroutine在接收端等待这个值。程序将在第一个 <code>sum</code> 函数调用时阻塞，导致死锁。</p>\n</li>\n<li><p><strong>通道与goroutine搭配使用</strong>：虽然技术上不是必须将通道与goroutines搭配使用，但在实践中，这是避免死锁和实现有效并发程序的常见模式。使用无缓冲通道时，发送操作会阻塞，直到接收操作开始，反之亦然。这种机制非常适合在不同goroutines之间同步数据访问和传递消息。</p>\n</li>\n</ol>\n<p>为了使你的程序按预期工作，你应该在goroutines中调用 <code>sum</code> 函数，并通过通道交换数据，正如之前正确的版本那样。这样，两个 <code>sum</code> 操作可以并发执行，主goroutine将等待并从通道中接收它们的结果，从而避免死锁并正确计算总和：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> sum(s[:<span class=\"built_in\">len</span>(s)/<span class=\"number\">2</span>], c) <span class=\"comment\">// 在goroutine中执行</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> sum(s[<span class=\"built_in\">len</span>(s)/<span class=\"number\">2</span>:], c) <span class=\"comment\">// 在另一个goroutine中执行</span></span><br><span class=\"line\">x, y := &lt;-c, &lt;-c <span class=\"comment\">// 从通道c中接收</span></span><br></pre></td></tr></table></figure>\n\n<p>通过这种方式，每个 <code>sum</code> 调用都在自己的goroutine中执行，并且能够独立地完成其向通道的发送操作。这避免了死锁，使主goroutine能够从通道接收两个结果并正确计算总和。</p>\n<hr>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">\tch &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">\tch &lt;- <span class=\"number\">2</span></span><br><span class=\"line\">\tfmt.Println(&lt;-ch)</span><br><span class=\"line\">\tfmt.Println(&lt;-ch)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为什么这个又对了？这不是只有一个goroutine吗?</p>\n<p>你的最新示例之所以能够正确运行，是因为它使用了一个<strong>有缓冲的通道</strong>。与无缓冲通道不同，有缓冲通道允许在阻塞发送者或接收者之前存储一个固定数量的值。具体到你的例子中，通过 <code>make(chan int, 2)</code> 创建了一个可以存储两个整数的缓冲通道。这意味着你可以在没有任何接收者准备好接收之前，向通道发送（或“缓冲”）两个值。</p>\n<p>这段代码中的关键点是：</p>\n<ol>\n<li><p><code>ch := make(chan int, 2)</code> 创建了一个有缓冲的通道，缓冲大小为2。这允许通道存储最多两个整数，直到它们被接收。</p>\n</li>\n<li><p><code>ch &lt;- 1</code> 和 <code>ch &lt;- 2</code> 这两行向通道发送两个整数。由于通道是有缓冲的，并且缓冲未满，这两个发送操作不会阻塞。这两个值被存储在通道的缓冲区中。</p>\n</li>\n<li><p><code>fmt.Println(&lt;-ch)</code> 和 <code>fmt.Println(&lt;-ch)</code> 这两行从通道中接收并打印这两个值。由于这两个值已经在通道的缓冲区中等待，接收操作立即发生，没有阻塞。</p>\n</li>\n</ol>\n<p>在这个例子中，即使所有操作都在单个goroutine（主goroutine）中进行，程序也能正常运行，没有发生死锁。这是因为有缓冲通道提供了足够的空间来存储发送到通道中的值，直到它们被接收，从而避免了在发送操作时必须立即有一个接收者准备好接收值的需求。</p>\n<p>有缓冲通道是并发Go程序中一个非常有用的工具，允许goroutines在某种程度上独立操作，而不必在每次通信时都完全同步。然而，设计有缓冲通道的程序时需要谨慎，以避免逻辑错误或死锁，特别是当缓冲区满时或在更复杂的通信模式中。</p>\n<h2 id=\"Go支持垃圾回收吗？\"><a href=\"#Go支持垃圾回收吗？\" class=\"headerlink\" title=\"Go支持垃圾回收吗？\"></a>Go支持垃圾回收吗？</h2><p>是的，Go语言支持垃圾回收（Garbage Collection，简称GC）。Go的垃圾回收器是一个实现了自动内存管理的程序部分，它负责检测并自动回收不再被程序使用的内存空间，从而防止内存泄漏。这意味着在Go中，开发者不需要（也不能）手动管理内存的分配和回收，大大简化了编程工作，减少了内存泄漏和其他与手动内存管理相关的错误。</p>\n<p>Go的垃圾回收器设计为“非阻塞式”的，意味着它尽量减少对程序执行的干扰。从Go 1.5版本开始，引入了并发的、三色标记清除算法，该算法允许垃圾收集过程在大部分时间与程序的其他部分并发执行，减少了垃圾收集对程序性能的影响。尽管如此，垃圾收集过程仍然会引入一定的延迟，这在极少数延迟敏感的应用中可能成为一个考虑因素。</p>\n<p>Go的运行时系统还包括其他几个与性能和资源管理相关的特性，如goroutine的调度和网络轮询器，它们一起确保了Go程序的高性能和高效的资源使用。开发者可以使用内置的分析工具（如pprof）来监视和优化程序的内存使用，以及诊断性能问题。</p>\n<h2 id=\"如果Go-代码会被预先编译成原生的机器码，那么它在运行的时候怎么和runtime结合呢\"><a href=\"#如果Go-代码会被预先编译成原生的机器码，那么它在运行的时候怎么和runtime结合呢\" class=\"headerlink\" title=\"如果Go 代码会被预先编译成原生的机器码，那么它在运行的时候怎么和runtime结合呢\"></a>如果Go 代码会被预先编译成原生的机器码，那么它在运行的时候怎么和runtime结合呢</h2><p>Go语言确实编译成原生机器码，这意味着Go程序在执行时不需要依赖于虚拟机，它们直接由操作系统调度。尽管如此，Go的执行模型和运行时（runtime）系统包括了许多复杂的功能，如垃圾回收（GC）、goroutine调度、通道通信、反射以及更多。这些功能的实现是预先集成在每个Go程序中的，部分原因是Go的编译器和链接器在构建最终的可执行文件时会自动包含运行时。</p>\n<p>这里是Go运行时和编译后的机器码结合的一些关键方式：</p>\n<ol>\n<li><p><strong>运行时包含</strong>：当Go程序被编译时，运行时代码被静态链接到最终的二进制中。这包括了垃圾回收器、goroutine调度器等核心功能的实现。因此，即使Go代码被编译成了原生机器码，运行时的功能也被内嵌于程序中，随程序一起运行。</p>\n</li>\n<li><p><strong>初始化运行时</strong>：在Go程序启动时，它的入口点不是 <code>main.main</code> 函数。实际上，程序开始执行于运行时的初始化代码，该代码负责设置运行时环境，包括初始化内存管理器、启动垃圾回收器、创建主goroutine等。只有在这些准备工作完成之后，<code>main.main</code> 函数才会被调用。</p>\n</li>\n<li><p><strong>goroutine调度</strong>：Go语言的并发模型基于goroutines。运行时包含一个调度器，它在用户态模拟多线程环境，允许成千上万的goroutines伪并行地运行在较少的操作系统线程上。编译后的代码中包含与运行时交互的指令，这些指令使得goroutines能被合适地调度和管理。</p>\n</li>\n<li><p><strong>内置函数调用运行时</strong>：一些Go的内置函数，如 <code>make</code>、<code>new</code>，以及用于map、切片和通道操作的函数，实际上是对运行时系统的直接调用。这些函数的实现是在运行时代码中，而非Go的标准库中。</p>\n</li>\n<li><p><strong>接口和反射</strong>：Go的接口和反射机制也依赖于运行时的支持。运行时维护了类型信息，允许程序在运行时查询和操作类型，这是动态语言特性的一个重要基础。</p>\n</li>\n</ol>\n<p>总的来说，虽然Go代码被编译成原生机器码，但通过将运行时的功能静态链接到每个程序、在程序启动时初始化运行时环境、以及在需要时通过编译后的代码调用运行时支持的机制，Go程序能够实现高级的语言特性，同时保持高性能和跨平台的兼容性。</p>\n<h2 id=\"Go语言中变量的生命周期\"><a href=\"#Go语言中变量的生命周期\" class=\"headerlink\" title=\"Go语言中变量的生命周期\"></a>Go语言中变量的生命周期</h2><p>Go语言中变量的生命周期是由变量能够被程序访问的时间段定义的。理解变量的生命周期对于编写高效和无内存泄漏的程序至关重要。在Go中，变量的生命周期取决于它是如何声明的，主要分为两种情况：在堆（heap）上和在栈（stack）上。</p>\n<h3 id=\"栈上的变量\"><a href=\"#栈上的变量\" class=\"headerlink\" title=\"栈上的变量\"></a>栈上的变量</h3><p>栈上的变量通常具有短暂的生命周期。当声明一个局部变量时，它通常位于栈上，其生命周期与包含它的函数调用的生命周期相匹配。当函数被调用时，局部变量被创建；当函数返回时，这些局部变量被销毁。这意味着栈上的变量的生命周期是由它们所在的函数的执行时间来决定的。</p>\n<h3 id=\"堆上的变量\"><a href=\"#堆上的变量\" class=\"headerlink\" title=\"堆上的变量\"></a>堆上的变量</h3><p>堆上的变量有一个更长久的生命周期。当你使用<code>new</code>函数或者复合字面量（如切片、映射、通道等）创建一个变量，而这个变量的引用逃逸到函数外部时，这个变量就会在堆上分配。堆上的变量的生命周期不由单个函数调用控制，而是由是否仍然可达（即程序的其他部分是否还有指向该变量的引用）来决定。只要变量可达，它就会继续存在。当变量变得不可达时，它最终会被垃圾回收器回收。</p>\n<h3 id=\"变量生命周期的决定因素\"><a href=\"#变量生命周期的决定因素\" class=\"headerlink\" title=\"变量生命周期的决定因素\"></a>变量生命周期的决定因素</h3><ul>\n<li><strong>编译器优化</strong>：Go编译器有时会做出决策，将本应在堆上分配的变量改为在栈上分配，如果它能确定变量的生命周期在函数范围内结束。这种优化减少了垃圾回收的负担。</li>\n<li><strong>逃逸分析</strong>：Go编译器执行逃逸分析来决定变量应该分配在堆还是栈上。如果函数内部创建的变量在函数外部仍然被引用（即“逃逸”到函数外部），则这些变量需要在堆上分配，以保证它们在函数返回后仍然存在。</li>\n</ul>\n<p>理解变量的生命周期对于优化Go程序的性能和内存使用非常重要。例如，过度使用堆分配可能会导致频繁的垃圾回收，从而影响程序性能。通过适当的变量作用域控制和利用栈分配，可以提高程序效率。</p>\n<h2 id=\"Go-常量\"><a href=\"#Go-常量\" class=\"headerlink\" title=\"Go 常量\"></a>Go 常量</h2><p>在 Go 语言中，常量是一个简单值的标识符，在程序运行时，其值不会被修改。常量可以是字符、字符串、布尔或数字类型的值。</p>\n<p>定义常量的基本语法如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name [<span class=\"keyword\">type</span>] = value</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>const</code> 关键字用于声明常量。</li>\n<li><code>name</code> 是常量的名称。</li>\n<li><code>type</code> 是可选的，指定常量的类型。</li>\n<li><code>value</code> 是常量的值。</li>\n</ul>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Pi = <span class=\"number\">3.14</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>Pi</code> 是一个常量，其值为 <code>3.14</code>。</p>\n<h3 id=\"常量的类型\"><a href=\"#常量的类型\" class=\"headerlink\" title=\"常量的类型\"></a>常量的类型</h3><p>在 Go 中，常量可以是任何基本类型，如整型、浮点型、布尔型、字符串等。如果在声明常量时没有指定类型，Go 语言会根据常量的值推导出其类型。</p>\n<h3 id=\"iota\"><a href=\"#iota\" class=\"headerlink\" title=\"iota\"></a>iota</h3><p>Go 语言的 <code>iota</code> 关键字用于生成一组以递增整数形式表示的常量，通常用于声明一个枚举。<code>iota</code> 在 <code>const</code> 关键字出现时被重置为 0，然后在每声明一个常量时自动递增。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    a = <span class=\"literal\">iota</span> <span class=\"comment\">// a == 0</span></span><br><span class=\"line\">    b        <span class=\"comment\">// b == 1</span></span><br><span class=\"line\">    c        <span class=\"comment\">// c == 2</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>a</code>、<code>b</code>、<code>c</code> 分别被赋予了递增的整数值 0、1、2。</p>\n<h3 id=\"未类型化常量\"><a href=\"#未类型化常量\" class=\"headerlink\" title=\"未类型化常量\"></a>未类型化常量</h3><p>在 Go 中，可以声明未类型化的常量，这意味着常量没有明确的类型。未类型化常量提供了更高的精度，并可以根据上下文转换为需要的类型。</p>\n<h3 id=\"使用常量\"><a href=\"#使用常量\" class=\"headerlink\" title=\"使用常量\"></a>使用常量</h3><p>常量可以用在任何变量可以使用的地方。使用常量可以提高代码的可读性和维护性。</p>\n<p>总之，Go 语言中的常量是一个非常有用的特性，它允许你在程序中使用固定的值，而不担心这些值会被改变。通过使用 <code>const</code> 关键字和 <code>iota</code> 生成器，你可以方便地声明和管理常量。</p>\n<h2 id=\"Go-创建新结构体\"><a href=\"#Go-创建新结构体\" class=\"headerlink\" title=\"Go 创建新结构体\"></a>Go 创建新结构体</h2><p>在 Go 语言中，结构体（struct）是一种将多个不同类型的变量组织到一个名字下的复合数据类型，常用于定义和创建数据实体。创建新结构体涉及两个步骤：定义结构体类型和实例化该类型的变量。</p>\n<h3 id=\"步骤-1：定义结构体类型\"><a href=\"#步骤-1：定义结构体类型\" class=\"headerlink\" title=\"步骤 1：定义结构体类型\"></a>步骤 1：定义结构体类型</h3><p>定义结构体类型使用 <code>type</code> 和 <code>struct</code> 关键字。结构体类型通常在函数外部定义，以便可以在不同函数间共享。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Name <span class=\"type\">string</span></span><br><span class=\"line\">    Age  <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，我们定义了一个名为 <code>Person</code> 的结构体，它有两个字段：<code>Name</code> 和 <code>Age</code>。</p>\n<h3 id=\"步骤-2：实例化结构体\"><a href=\"#步骤-2：实例化结构体\" class=\"headerlink\" title=\"步骤 2：实例化结构体\"></a>步骤 2：实例化结构体</h3><p>一旦定义了结构体类型，你就可以创建该类型的实例了。有几种不同的方式来实例化结构体。</p>\n<h4 id=\"方法-1：使用-new-关键字\"><a href=\"#方法-1：使用-new-关键字\" class=\"headerlink\" title=\"方法 1：使用 new 关键字\"></a>方法 1：使用 <code>new</code> 关键字</h4><p><code>new</code> 关键字可以用来创建一个指向结构体类型的新实例的指针。此方法会分配内存并将结构体的字段初始化为零值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p1 := <span class=\"built_in\">new</span>(Person)</span><br><span class=\"line\">p1.Name = <span class=\"string\">&quot;Alice&quot;</span></span><br><span class=\"line\">p1.Age = <span class=\"number\">30</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方法-2：使用结构体字面量\"><a href=\"#方法-2：使用结构体字面量\" class=\"headerlink\" title=\"方法 2：使用结构体字面量\"></a>方法 2：使用结构体字面量</h4><p>结构体字面量允许在一个表达式中创建结构体实例，并同时初始化其字段。</p>\n<ul>\n<li><strong>命名字段方式</strong>：</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p2 := Person&#123;Name: <span class=\"string\">&quot;Bob&quot;</span>, Age: <span class=\"number\">25</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>按字段顺序初始化</strong>（不推荐，因为添加或修改字段时易出错）：</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p3 := Person&#123;<span class=\"string\">&quot;Charlie&quot;</span>, <span class=\"number\">28</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方法-3：使用指针和结构体字面量\"><a href=\"#方法-3：使用指针和结构体字面量\" class=\"headerlink\" title=\"方法 3：使用指针和结构体字面量\"></a>方法 3：使用指针和结构体字面量</h4><p>你也可以直接创建一个指向结构体实例的指针，并初始化其字段。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p4 := &amp;Person&#123;Name: <span class=\"string\">&quot;Diana&quot;</span>, Age: <span class=\"number\">32</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Name <span class=\"type\">string</span></span><br><span class=\"line\">    Age  <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 new 关键字</span></span><br><span class=\"line\">    p1 := <span class=\"built_in\">new</span>(Person)</span><br><span class=\"line\">    p1.Name = <span class=\"string\">&quot;Alice&quot;</span></span><br><span class=\"line\">    p1.Age = <span class=\"number\">30</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用结构体字面量</span></span><br><span class=\"line\">    p2 := Person&#123;Name: <span class=\"string\">&quot;Bob&quot;</span>, Age: <span class=\"number\">25</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用指针和结构体字面量</span></span><br><span class=\"line\">    p3 := &amp;Person&#123;Name: <span class=\"string\">&quot;Charlie&quot;</span>, Age: <span class=\"number\">28</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(*p1)</span><br><span class=\"line\">    fmt.Println(p2)</span><br><span class=\"line\">    fmt.Println(*p3)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个例子展示了不同的方式来创建和初始化结构体 <code>Person</code> 的实例。选择哪种方式取决于具体情况，比如是否需要在初始化时立即设置字段值，或者是否需要操作结构体指针。</p>\n<h2 id=\"Go切片append\"><a href=\"#Go切片append\" class=\"headerlink\" title=\"Go切片append\"></a>Go切片append</h2><p>在 Go 语言中，切片（slice）是一个动态数组，它提供了一种灵活、强大的方式来管理数据集合。尽管 Go 语言的切片类型没有直接提供 <code>push back</code> 的方法（类似于其他语言中的数组或列表的 append 功能），但可以使用内建的 <code>append</code> 函数来实现向切片末尾添加元素的效果。</p>\n<h3 id=\"使用-append-函数添加元素\"><a href=\"#使用-append-函数添加元素\" class=\"headerlink\" title=\"使用 append 函数添加元素\"></a>使用 <code>append</code> 函数添加元素</h3><p><code>append</code> 函数可以将一个或多个新的元素添加到切片的末尾，并返回一个包含了这些新元素的新切片。如果原始切片有足够的容量来存储新增的元素，<code>append</code> 会直接在原切片的末尾添加这些元素。否则，它会自动分配一个新的底层数组，将原切片的元素和新元素一起复制到这个新数组中，然后返回这个新数组的切片表示。</p>\n<h3 id=\"示例-3\"><a href=\"#示例-3\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个整数切片</span></span><br><span class=\"line\">    slice := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向切片末尾添加一个元素</span></span><br><span class=\"line\">    slice = <span class=\"built_in\">append</span>(slice, <span class=\"number\">4</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向切片末尾添加多个元素</span></span><br><span class=\"line\">    slice = <span class=\"built_in\">append</span>(slice, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(slice)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出将是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1 2 3 4 5 6 7]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li><strong>容量自动扩展</strong>：<code>append</code> 操作可能会导致切片的容量增加。如果原切片的底层数组没有足够的空间来存放新添加的元素，Go 语言运行时会自动分配一个新的、更大的数组，并将原切片的元素以及新元素一起复制到这个新数组中。</li>\n<li><strong>返回值</strong>：不要忘记 <code>append</code> 函数返回的是更新后的切片。你需要用返回的切片来更新你的切片变量，否则添加的新元素不会被保存。</li>\n</ul>\n<p>通过上面的示例和说明，你可以看到在 Go 语言中，虽然没有直接的 <code>push back</code> 函数或方法，但是通过使用 <code>append</code> 函数，我们可以轻松实现向切片末尾添加新元素的功能。</p>\n<h2 id=\"Go-切片怎样自动扩展\"><a href=\"#Go-切片怎样自动扩展\" class=\"headerlink\" title=\"Go 切片怎样自动扩展\"></a>Go 切片怎样自动扩展</h2><p>在 Go 语言中，切片的自动扩展是通过内建的 <code>append</code> 函数来实现的。当你向一个切片添加元素，而该切片的底层数组没有足够的空间容纳更多元素时，<code>append</code> 会自动处理切片的扩容。这个过程涉及到分配一个新的底层数组，并将原有元素以及新添加的元素复制到这个新数组中。切片的容量（capacity）是指底层数组能够容纳的元素总数。</p>\n<h3 id=\"扩容机制\"><a href=\"#扩容机制\" class=\"headerlink\" title=\"扩容机制\"></a>扩容机制</h3><p>当使用 <code>append</code> 向切片添加元素，导致切片的长度超过其容量时，Go 语言运行时会自动进行如下步骤：</p>\n<ol>\n<li><strong>分配一个新的底层数组</strong>：新数组的容量通常是原数组容量的两倍，但这个增长因子可能根据添加的元素数量和切片的当前容量而变化，尤其是在切片的容量非常大或者添加了多个元素的情况下。</li>\n<li><strong>复制原有元素到新数组</strong>：原切片的元素会被复制到新的底层数组中。</li>\n<li><strong>添加新元素</strong>：新的元素会被添加到复制的元素之后。</li>\n<li><strong>返回新切片</strong>：函数返回新的切片，这个切片引用了新的底层数组，并更新了其长度和容量。</li>\n</ol>\n<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><p>下面的示例演示了如何通过 <code>append</code> 自动扩展切片的容量。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    slice := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 创建一个初始容量为2的切片</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 打印初始切片的长度和容量</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;Initial: Length=%d, Capacity=%d\\n&quot;</span>, <span class=\"built_in\">len</span>(slice), <span class=\"built_in\">cap</span>(slice))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向切片添加元素，超过其初始容量</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">        slice = <span class=\"built_in\">append</span>(slice, i)</span><br><span class=\"line\">        <span class=\"comment\">// 打印每次添加元素后切片的长度和容量</span></span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">&quot;After appending %d: Length=%d, Capacity=%d\\n&quot;</span>, i, <span class=\"built_in\">len</span>(slice), <span class=\"built_in\">cap</span>(slice))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个示例中，初始切片的容量是2，但是随着元素的添加，切片的容量会自动增长，以容纳更多的元素。你会注意到，每当切片的容量不足以添加更多元素时，其容量会增加，通常是翻倍，尽管具体的增长策略可能会有所不同。</p>\n<h3 id=\"注意事项-1\"><a href=\"#注意事项-1\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li><strong>性能考虑</strong>：虽然 <code>append</code> 可以自动扩展切片的容量，但频繁地重新分配内存和复制数据可能会影响性能。如果你预先知道大概需要多少容量，使用 <code>make</code> 预分配一个足够大的切片可能会更高效。</li>\n<li><strong>扩容策略</strong>：Go 语言的切片扩容策略可能会因版本和具体实现而略有差异。通常，对于较小的切片，扩容会翻倍其容量；对于较大的切片，增长因子可能会小于2，以减少因为扩容而浪费的内存。</li>\n</ul>\n<h2 id=\"Go-实现stack-和-queue\"><a href=\"#Go-实现stack-和-queue\" class=\"headerlink\" title=\"Go 实现stack 和 queue\"></a>Go 实现stack 和 queue</h2><p>在 Go 语言中，没有内置的栈（Stack）和队列（Queue）数据结构，但是可以使用切片（Slice）非常容易地实现它们。切片提供了灵活的操作，如 <code>append</code> 函数和切片操作，使得实现栈和队列成为可能。</p>\n<h3 id=\"栈（Stack）\"><a href=\"#栈（Stack）\" class=\"headerlink\" title=\"栈（Stack）\"></a>栈（Stack）</h3><p>栈是一种后进先出（LIFO, Last In First Out）的数据结构，主要操作有：</p>\n<ul>\n<li><strong>Push</strong>：将一个元素放入栈顶。</li>\n<li><strong>Pop</strong>：从栈顶移除一个元素。</li>\n</ul>\n<h4 id=\"实现栈\"><a href=\"#实现栈\" class=\"headerlink\" title=\"实现栈\"></a>实现栈</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Stack []<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Push 添加一个元素到栈顶</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Stack)</span></span> Push(v <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">    *s = <span class=\"built_in\">append</span>(*s, v)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Pop 从栈顶移除一个元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Stack)</span></span> Pop() <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(*s) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;Stack is empty!&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span> <span class=\"comment\">// 返回 -1 表示栈为空</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    index := <span class=\"built_in\">len</span>(*s) - <span class=\"number\">1</span>    <span class=\"comment\">// 获取栈顶元素索引</span></span><br><span class=\"line\">    element := (*s)[index]  <span class=\"comment\">// 获取栈顶元素</span></span><br><span class=\"line\">    *s = (*s)[:index]       <span class=\"comment\">// 移除栈顶元素</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> element</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> stack Stack</span><br><span class=\"line\"></span><br><span class=\"line\">    stack.Push(<span class=\"number\">1</span>)</span><br><span class=\"line\">    stack.Push(<span class=\"number\">2</span>)</span><br><span class=\"line\">    stack.Push(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(stack.Pop()) <span class=\"comment\">// 输出: 3</span></span><br><span class=\"line\">    fmt.Println(stack.Pop()) <span class=\"comment\">// 输出: 2</span></span><br><span class=\"line\">    fmt.Println(stack.Pop()) <span class=\"comment\">// 输出: 1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"队列（Queue）\"><a href=\"#队列（Queue）\" class=\"headerlink\" title=\"队列（Queue）\"></a>队列（Queue）</h3><p>队列是一种先进先出（FIFO, First In First Out）的数据结构，主要操作有：</p>\n<ul>\n<li><strong>Enqueue</strong>：在队列末尾添加一个元素。</li>\n<li><strong>Dequeue</strong>：从队列开头移除一个元素。</li>\n</ul>\n<h4 id=\"实现队列\"><a href=\"#实现队列\" class=\"headerlink\" title=\"实现队列\"></a>实现队列</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Queue []<span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Enqueue 在队列末尾添加一个元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(q *Queue)</span></span> Enqueue(v <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">    *q = <span class=\"built_in\">append</span>(*q, v)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Dequeue 从队列开头移除一个元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(q *Queue)</span></span> Dequeue() <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(*q) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;Queue is empty!&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span> <span class=\"comment\">// 返回 -1 表示队列为空</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    element := (*q)[<span class=\"number\">0</span>]    <span class=\"comment\">// 获取队列开头元素</span></span><br><span class=\"line\">    *q = (*q)[<span class=\"number\">1</span>:]         <span class=\"comment\">// 移除队列开头元素</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> element</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> queue Queue</span><br><span class=\"line\"></span><br><span class=\"line\">    queue.Enqueue(<span class=\"number\">1</span>)</span><br><span class=\"line\">    queue.Enqueue(<span class=\"number\">2</span>)</span><br><span class=\"line\">    queue.Enqueue(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(queue.Dequeue()) <span class=\"comment\">// 输出: 1</span></span><br><span class=\"line\">    fmt.Println(queue.Dequeue()) <span class=\"comment\">// 输出: 2</span></span><br><span class=\"line\">    fmt.Println(queue.Dequeue()) <span class=\"comment\">// 输出: 3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这些示例中，我们使用了切片和其操作来实现栈和队列的基本功能。这两种数据结构在实际应用中非常有用，特别是在需要特定数据处理顺序的场合。通过简单的方法，Go 语言使得实现这些数据结构变得既简单又直接。</p>\n<h2 id=\"make函数在Go中的作用\"><a href=\"#make函数在Go中的作用\" class=\"headerlink\" title=\"make函数在Go中的作用\"></a>make函数在Go中的作用</h2><p>在 Go 语言中，<code>make</code> 函数是一个特殊的内置函数，它被用来初始化并分配内存给内置的数据类型，如切片（slice）、映射（map）和通道（channel）。不同于 <code>new</code> 函数，<code>make</code> 返回的是类型的初始化值，而不是指向该值的指针。<code>make</code> 的使用对于这些复合类型的正确初始化和使用是必要的，因为它们需要在内存中进行特定的布局和初始化。</p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ol>\n<li><p><strong>切片（Slice）</strong>：</p>\n<ul>\n<li><code>make</code> 用于创建一个具有指定长度和容量的切片。如果未指定容量，那么容量将与长度相同。</li>\n<li>使用 <code>make</code> 创建切片可以直接使用，无需担心初始值，因为所有元素都会被初始化为其类型的零值。</li>\n<li>示例：<code>s := make([]int, 5, 10)</code> 创建了一个长度为 5，容量为 10 的 <code>int</code> 类型切片 <code>s</code>。</li>\n</ul>\n</li>\n<li><p><strong>映射（Map）</strong>：</p>\n<ul>\n<li><code>make</code> 用于创建一个映射，并分配足够的内存，以便它可以开始存储键值对。创建的映射将为空，没有任何键值对。</li>\n<li>使用 <code>make</code> 可以确保返回的映射是可用的，避免了将 <code>nil</code> 映射用于赋值或操作的错误。</li>\n<li>示例：<code>m := make(map[string]int)</code> 创建了一个键类型为 <code>string</code>，值类型为 <code>int</code> 的空映射 <code>m</code>。</li>\n</ul>\n</li>\n<li><p><strong>通道（Channel）</strong>：</p>\n<ul>\n<li><code>make</code> 用于创建一个通道，并指定其可以存储的值的类型以及（可选的）缓冲大小。</li>\n<li>创建通道后，可以在协程（goroutines）之间用于通信和同步。</li>\n<li>示例：<code>ch := make(chan int, 5)</code> 创建了一个可以存储 <code>int</code> 类型值，且有 5 个缓冲空间的通道 <code>ch</code>。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">make</span>(T, size, ...optional capacity)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>T</code>：要创建的类型（切片、映射或通道）。</li>\n<li><code>size</code>：对于切片，它是长度（length）；对于通道，它是缓冲大小（buffer capacity）。对于映射，此参数通常省略，因为映射的大小是动态增长的。</li>\n<li><code>optional capacity</code>：可选，仅用于切片，指定切片的容量（capacity）。如果省略，容量将与长度相同。</li>\n</ul>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li>使用 <code>make</code> 初始化的数据结构（切片、映射、通道）可以直接使用，而无需进一步的分配或初始化。</li>\n<li>对于其他类型，如自定义结构体或基本数据类型，应使用 <code>new</code> 函数或字面量构造进行初始化。</li>\n<li><code>make</code> 仅适用于切片、映射和通道，尝试用于其他类型将导致编译错误。</li>\n</ul>\n<p>通过正确使用 <code>make</code> 函数，Go 程序员可以确保他们的数据结构被正确初始化，准备好安全地用于后续操作。</p>\n<h2 id=\"go中怎么样实现Equaler接口\"><a href=\"#go中怎么样实现Equaler接口\" class=\"headerlink\" title=\"go中怎么样实现Equaler接口\"></a>go中怎么样实现Equaler接口</h2><p>在Go语言中，实现一个<code>Equaler</code>接口主要涉及到定义一个接口，该接口包含一个方法，用于比较两个对象是否相等。这样的接口可以被任何想要支持等值比较操作的类型实现。下面是如何定义和实现这样一个<code>Equaler</code>接口的示例：</p>\n<h3 id=\"步骤-1-定义Equaler接口\"><a href=\"#步骤-1-定义Equaler接口\" class=\"headerlink\" title=\"步骤 1: 定义Equaler接口\"></a>步骤 1: 定义<code>Equaler</code>接口</h3><p>首先，你需要定义<code>Equaler</code>接口。通常，这个接口会包含一个<code>Equal</code>方法，这个方法接受另一个相同类型的对象作为参数，并返回一个布尔值，表示这两个对象是否相等。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Equaler 接口定义了一个方法 Equal，任何实现了这个接口的类型</span></span><br><span class=\"line\"><span class=\"comment\">// 都必须提供 Equal 方法的具体实现。</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Equaler <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    Equal(other Equaler) <span class=\"type\">bool</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤-2-实现Equaler接口\"><a href=\"#步骤-2-实现Equaler接口\" class=\"headerlink\" title=\"步骤 2: 实现Equaler接口\"></a>步骤 2: 实现<code>Equaler</code>接口</h3><p>然后，你可以为你自己的类型实现<code>Equaler</code>接口。假设你有一个<code>Point</code>类型，你想要比较两个<code>Point</code>实例是否相等。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Point 表示一个二维点。</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Point <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    X, Y <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Equal 实现了 Equaler 接口，用于比较两个 Point 是否相等。</span></span><br><span class=\"line\"><span class=\"comment\">// 这里的other参数需要被类型断言为*Point，以便进行比较。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Point)</span></span> Equal(other Equaler) <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">    otherPoint, ok := other.(*Point)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.Abs(p.X-otherPoint.X) &lt; <span class=\"number\">0.001</span> &amp;&amp; math.Abs(p.Y-otherPoint.Y) &lt; <span class=\"number\">0.001</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项-2\"><a href=\"#注意事项-2\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>在<code>Equal</code>方法中，参数<code>other</code>被定义为<code>Equaler</code>类型。这允许方法接受任何实现了<code>Equaler</code>接口的类型。然而，在实际的比较中，你通常需要将<code>other</code>类型断言为你需要比较的具体类型（在这个例子中是<code>*Point</code>），以便能够访问该类型的字段。</li>\n<li>使用类型断言（<code>otherPoint, ok := other.(*Point)</code>）时，需要处理断言失败的情况。如果断言失败，表示<code>other</code>不是一个<code>*Point</code>实例，此时应当返回<code>false</code>。</li>\n<li>比较浮点数时使用了一个小的容忍度值（<code>0.001</code>）来判断两个点是否相等。这是因为直接比较浮点数可能会因为精度问题而导致不准确的比较结果。</li>\n</ul>\n<p>通过这种方式，你可以为任何类型实现<code>Equaler</code>接口，只要提供了一个适当的<code>Equal</code>方法即可。这种接口抽象允许你编写更通用、更灵活的代码，因为你可以编写依赖于<code>Equaler</code>接口的函数或方法，而不是依赖于特定的类型。</p>\n<h2 id=\"go中能否让自定义的类型也可以使用-来比较\"><a href=\"#go中能否让自定义的类型也可以使用-来比较\" class=\"headerlink\" title=\"go中能否让自定义的类型也可以使用&#x3D;&#x3D;来比较\"></a>go中能否让自定义的类型也可以使用&#x3D;&#x3D;来比较</h2><p>在Go语言中，使用<code>==</code>运算符来比较两个值是否相等的能力是内建的，且适用于所有基本类型（如<code>int</code>、<code>float64</code>、<code>string</code>等）和一些复合类型（如数组）。对于自定义的类型，能否使用<code>==</code>取决于该类型的底层类型：</p>\n<ol>\n<li><p><strong>基本类型和结构体</strong>：如果你的自定义类型是基于基本类型的（例如通过<code>type</code>关键字定义的新类型），那么可以直接使用<code>==</code>进行比较，因为这种比较是对其底层类型进行的。对于结构体，如果所有字段都可以比较，则可以使用<code>==</code>来比较两个结构体实例是否相等。</p>\n</li>\n<li><p><strong>切片、映射和函数类型</strong>：对于这些类型，即使是作为自定义类型的底层类型，也不能使用<code>==</code>进行比较（切片、映射、函数只能和<code>nil</code>进行比较）。尝试这样做会导致编译错误。</p>\n</li>\n</ol>\n<h3 id=\"示例-4\"><a href=\"#示例-4\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li><strong>基于基本类型的自定义类型</strong>：</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyInt <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a MyInt = <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> b MyInt = <span class=\"number\">5</span></span><br><span class=\"line\">    fmt.Println(a == b) <span class=\"comment\">// 输出: true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里，<code>MyInt</code>是基于<code>int</code>类型的自定义类型，所以可以使用<code>==</code>来比较。</p>\n<ul>\n<li><strong>结构体类型</strong>：</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Point <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    X, Y <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    p1 := Point&#123;X: <span class=\"number\">1</span>, Y: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">    p2 := Point&#123;X: <span class=\"number\">1</span>, Y: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">    fmt.Println(p1 == p2) <span class=\"comment\">// 输出: true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>Point</code>是一个结构体类型，由于它的所有字段都是可以比较的类型，所以两个<code>Point</code>类型的实例可以使用<code>==</code>进行比较。</p>\n<p>总结来说，是否可以使用<code>==</code>来比较自定义类型的值取决于该类型的底层类型以及是否满足Go语言中<code>==</code>运算符适用的类型约束。对于复杂类型或需要更灵活的比较逻辑的情况，通常会实现一个比较函数或方法，如上一条回答中所述的<code>Equaler</code>接口实现。</p>\n<h2 id=\"append是不是永远不会改变传入的切片的值\"><a href=\"#append是不是永远不会改变传入的切片的值\" class=\"headerlink\" title=\"append是不是永远不会改变传入的切片的值\"></a>append是不是永远不会改变传入的切片的值</h2><p><code>append</code>函数在Go语言中的行为有一些特点需要理解，尤其是关于它如何影响传入的切片的值。<code>append</code>操作本身不会直接修改传入的切片的元素。但是，它可能会改变切片的长度和容量，以及返回一个可能指向新数组的切片。这里有几个关键点需要注意：</p>\n<ol>\n<li><p><strong>不修改原切片元素</strong>：<code>append</code>不会改变原有切片中的元素值。如果<code>append</code>操作不导致扩容，添加的元素会出现在原有元素之后。</p>\n</li>\n<li><p><strong>可能返回新的切片</strong>：如果<code>append</code>操作导致了切片扩容（即，需要更多的容量来容纳新元素），Go将分配一个新的数组，并将原切片的元素以及新添加的元素复制到这个新数组中。这时，<code>append</code>返回的切片将指向这个新的数组，而原来的切片仍指向原来的数组。</p>\n</li>\n<li><p><strong>不改变原切片引用</strong>：重要的是，无论<code>append</code>操作是否导致扩容，它都不会更改传入切片本身的引用。换句话说，<code>append</code>函数对原切片的修改是通过返回一个新的切片实现的，而不是直接修改传入的切片变量。</p>\n</li>\n</ol>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>下面的例子展示了<code>append</code>如何工作，以及它是如何影响切片的：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    originalSlice := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Original slice:&quot;</span>, originalSlice)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Append without capacity overflow</span></span><br><span class=\"line\">    modifiedSlice := <span class=\"built_in\">append</span>(originalSlice, <span class=\"number\">4</span>)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Modified slice:&quot;</span>, modifiedSlice)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Original slice after append:&quot;</span>, originalSlice)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Append that causes capacity overflow</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">5</span>; i &lt;= <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">        modifiedSlice = <span class=\"built_in\">append</span>(modifiedSlice, i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Modified slice after more appends:&quot;</span>, modifiedSlice)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Original slice remains unchanged:&quot;</span>, originalSlice)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>originalSlice</code>在初次<code>append</code>后仍指向原来的数组，<code>modifiedSlice</code>可能也指向同一个数组（如果没有超出容量）或者指向一个新的数组（如果执行了扩容）。通过连续的<code>append</code>操作，最终<code>modifiedSlice</code>将指向一个不同的、更大的数组，而<code>originalSlice</code>保持不变，仍然指向最初的数组。</p>\n<p>综上所述，<code>append</code>操作不会改变传入切片的值或其指向的数组中的元素，但它会根据需要扩容的情况返回一个新的切片，这个新切片可能指向一个新的底层数组。</p>\n<h2 id=\"go-什么时候用make\"><a href=\"#go-什么时候用make\" class=\"headerlink\" title=\"go 什么时候用make\"></a>go 什么时候用make</h2><p>在Go语言中，<code>nil</code>是一个预定义的标识符，用于表示指针、通道、函数、接口、映射或切片类型的零值。简而言之，<code>nil</code>用于表示一个未初始化的引用或一个空的引用。以下是<code>nil</code>在不同上下文中的含义和作用：</p>\n<ol>\n<li><strong>指针</strong>：对于指针类型，<code>nil</code>表示没有指向任何对象的指针。</li>\n<li><strong>切片</strong>：对于切片类型，<code>nil</code>表示没有分配空间的切片。一个<code>nil</code>切片的长度和容量都是0，但它不等同于空切片（例如<code>[]int&#123;&#125;</code>）。</li>\n<li><strong>映射</strong>：对于映射类型，<code>nil</code>表示没有分配空间的映射。尝试向一个<code>nil</code>映射添加键值对会引发运行时panic。</li>\n<li><strong>通道</strong>：对于通道类型，<code>nil</code>表示没有分配空间的通道。向<code>nil</code>通道发送或从中接收会永远阻塞。</li>\n<li><strong>函数</strong>：对于函数类型，<code>nil</code>可以表示一个没有被赋予任何实际函数的函数变量。</li>\n<li><strong>接口</strong>：对于接口类型，<code>nil</code>表示没有绑定实现的接口。一个<code>nil</code>接口既没有存储任何值，也没有具体类型。</li>\n</ol>\n<h3 id=\"为什么需要nil？\"><a href=\"#为什么需要nil？\" class=\"headerlink\" title=\"为什么需要nil？\"></a>为什么需要<code>nil</code>？</h3><p><code>nil</code>的存在使得Go语言的错误处理和资源管理变得更加灵活和简洁。以下是一些使用<code>nil</code>的理由：</p>\n<ul>\n<li><strong>区分初始化状态</strong>：通过检查一个变量是否为<code>nil</code>，可以轻松判断出该变量是否已经初始化。这在处理可选的或者延迟初始化的资源时非常有用。</li>\n<li><strong>简化错误处理</strong>：在Go中，返回错误的惯用方式是返回一个值和一个<code>error</code>类型的值。如果没有错误发生，这个<code>error</code>类型的值通常会被设置为<code>nil</code>，这样调用者就可以通过检查<code>error</code>是否为<code>nil</code>来判断操作是否成功。</li>\n<li><strong>节省资源</strong>：<code>nil</code>切片和<code>nil</code>映射在没有分配内存之前不占用额外的内存，这允许开发者在不需要立即使用这些类型的情况下，延迟内存分配，从而更有效地使用资源。</li>\n</ul>\n<p>总之，<code>nil</code>在Go语言中扮演着重要的角色，它不仅帮助标识变量的初始化状态，还参与错误处理和资源管理，使代码更加简洁和高效。</p>\n<h2 id=\"为什么map需要make\"><a href=\"#为什么map需要make\" class=\"headerlink\" title=\"为什么map需要make\"></a>为什么map需要make</h2><p>在Go语言中，映射（map）是一种内建的数据类型，用于存储键值对的集合。映射的键可以是任何可比较的类型，例如整数、字符串等。映射的特性使其成为存储和检索数据的强大工具。然而，与其他一些语言不同，Go的映射需要通过<code>make</code>函数进行初始化才能使用，原因包括：</p>\n<ol>\n<li><p><strong>内存分配</strong>：映射在Go中是引用类型，这意味着当你声明一个映射变量时，变量本身并不直接包含数据，而是指向数据所在的内存地址。使用<code>make</code>函数初始化映射可以为其分配内存空间，从而使映射准备好存储键值对。如果不通过<code>make</code>进行初始化，映射变量将是<code>nil</code>，试图向其添加数据将导致运行时panic。</p>\n</li>\n<li><p><strong>避免<code>nil</code>映射的错误</strong>：直接使用未经初始化的<code>nil</code>映射进行赋值操作会导致运行时错误，因为<code>nil</code>映射没有分配内存空间，无法存储任何数据。通过<code>make</code>函数创建映射，你可以确保映射已经准备好接收数据，避免这种类型的错误。</p>\n</li>\n<li><p><strong>性能优化</strong>：使用<code>make</code>函数初始化映射时，可以选择性地指定初始容量，这有助于提高映射操作的效率。指定一个接近或等于预期存储元素数量的初始容量可以减少映射在存储数据时需要进行的内存重新分配的次数，从而提高性能。</p>\n<p>示例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>, <span class=\"number\">100</span>) <span class=\"comment\">// 创建一个初始容量为100的映射</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>简而言之，通过<code>make</code>初始化映射是为了为其分配内存，确保映射在使用前是非<code>nil</code>的，从而可以安全地添加或访问键值对。此外，<code>make</code>还提供了一种方式来优化映射的内存使用和性能。</p>\n<h2 id=\"如何复制一个map\"><a href=\"#如何复制一个map\" class=\"headerlink\" title=\"如何复制一个map\"></a>如何复制一个map</h2><p>在Go语言中，没有直接复制一个映射（map）的内建方法，因为映射是引用类型。如果你想复制一个映射，需要手动创建一个新映射并将原映射中的所有键值对复制到新映射中。这可以通过遍历原映射并将每个键值对添加到新映射来实现。以下是一个如何复制映射的示例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CopyMap</span><span class=\"params\">(originalMap <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>)</span></span> <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个新的映射，用于存储复制的键值对</span></span><br><span class=\"line\">    newMap := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历原映射，复制每个键值对到新映射</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> key, value := <span class=\"keyword\">range</span> originalMap &#123;</span><br><span class=\"line\">        newMap[key] = value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回新的映射副本</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newMap</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>CopyMap</code>函数接受一个<code>map[string]int</code>类型的映射作为参数，创建一个新的同类型映射，并遍历原映射，将所有键值对复制到新映射中。最后，函数返回这个新映射，实现了映射的复制。</p>\n<p>需要注意的是，这种复制方法是浅复制（shallow copy），意味着如果映射的值是指针或包含指针的复杂类型（如切片、映射等），那么复制的是指针本身，而不是它指向的数据。如果需要深复制（deep copy）这样的值，你需要实现更复杂的逻辑来复制指针指向的数据，而不仅仅是指针本身。</p>\n<h2 id=\"go实现stack\"><a href=\"#go实现stack\" class=\"headerlink\" title=\"go实现stack\"></a>go实现stack</h2><p>在Go语言中，可以使用切片（slice）来实现一个栈（stack）。栈是一种后进先出（LIFO）的数据结构，支持两个基本操作：push（向栈中添加一个元素）和pop（从栈中移除最顶端的元素）。下面是如何使用切片实现栈的一个简单例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Stack 表示栈的结构体</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Stack <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    elements []<span class=\"type\">int</span> <span class=\"comment\">// 使用切片存储栈元素</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewStack 创建并返回一个空栈</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewStack</span><span class=\"params\">()</span></span> *Stack &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;Stack&#123;[]<span class=\"type\">int</span>&#123;&#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Push 向栈中添加一个元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Stack)</span></span> Push(element <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">    s.elements = <span class=\"built_in\">append</span>(s.elements, element)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Pop 从栈中移除最顶端的元素并返回该元素</span></span><br><span class=\"line\"><span class=\"comment\">// 如果栈为空，返回0和一个错误</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Stack)</span></span> Pop() (<span class=\"type\">int</span>, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(s.elements) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>, fmt.Errorf(<span class=\"string\">&quot;stack is empty&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 获取栈顶元素</span></span><br><span class=\"line\">    topElement := s.elements[<span class=\"built_in\">len</span>(s.elements)<span class=\"number\">-1</span>]</span><br><span class=\"line\">    <span class=\"comment\">// 移除栈顶元素</span></span><br><span class=\"line\">    s.elements = s.elements[:<span class=\"built_in\">len</span>(s.elements)<span class=\"number\">-1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> topElement, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IsEmpty 检查栈是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Stack)</span></span> IsEmpty() <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(s.elements) == <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Size 返回栈的大小</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Stack)</span></span> Size() <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(s.elements)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    stack := NewStack()</span><br><span class=\"line\">    stack.Push(<span class=\"number\">1</span>)</span><br><span class=\"line\">    stack.Push(<span class=\"number\">2</span>)</span><br><span class=\"line\">    fmt.Println(stack.Pop()) <span class=\"comment\">// 输出：2 &lt;nil&gt;</span></span><br><span class=\"line\">    fmt.Println(stack.IsEmpty()) <span class=\"comment\">// 输出：false</span></span><br><span class=\"line\">    fmt.Println(stack.Size()) <span class=\"comment\">// 输出：1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个例子中，<code>Stack</code>类型使用一个<code>int</code>类型的切片来存储栈元素。<code>Push</code>方法通过<code>append</code>函数将一个新元素添加到切片的末尾，实现了向栈中添加元素。<code>Pop</code>方法检查栈是否为空，如果不为空，则移除并返回切片的最后一个元素，模拟了从栈中移除元素的操作。此外，<code>IsEmpty</code>和<code>Size</code>方法分别用于检查栈是否为空和获取栈的大小。</p>\n<p>这个栈的实现是泛型的基础版本，只能存储<code>int</code>类型的元素。如果需要一个能够存储任何类型元素的栈，可以考虑使用<code>interface&#123;&#125;</code>类型代替<code>int</code>，或者使用Go 1.18及以上版本引入的泛型特性来实现。</p>\n<h2 id=\"go语言new的作用\"><a href=\"#go语言new的作用\" class=\"headerlink\" title=\"go语言new的作用\"></a>go语言new的作用</h2><p>在Go语言中，<code>new</code>是一个内置的函数，用于分配并初始化一个类型的空间，并返回指向这个新分配空间的指针。<code>new(T)</code>将分配类型<code>T</code>的零值内存空间，并返回一个指向该空间的指针，其类型为<code>*T</code>，其中<code>T</code>表示任意给定的类型。使用<code>new</code>分配的空间被初始化为类型的零值，例如，数值类型的零值是<code>0</code>，布尔类型的零值是<code>false</code>，指针类型的零值是<code>nil</code>等。</p>\n<h3 id=\"使用new的示例\"><a href=\"#使用new的示例\" class=\"headerlink\" title=\"使用new的示例\"></a>使用<code>new</code>的示例</h3><p>假设你有一个简单的结构体：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyStruct <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Field1 <span class=\"type\">int</span></span><br><span class=\"line\">    Field2 <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以使用<code>new</code>来创建这个结构体的一个实例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ms := <span class=\"built_in\">new</span>(MyStruct)</span><br></pre></td></tr></table></figure>\n\n<p>这行代码将分配<code>MyStruct</code>的内存，并将<code>ms</code>初始化为指向这块内存的指针。由于使用了<code>new</code>，<code>MyStruct</code>中的字段<code>Field1</code>和<code>Field2</code>会被初始化为它们各自类型的零值，即<code>Field1</code>为<code>0</code>，<code>Field2</code>为<code>&quot;&quot;</code>（空字符串）。</p>\n<h3 id=\"new与复合字面量的区别\"><a href=\"#new与复合字面量的区别\" class=\"headerlink\" title=\"new与复合字面量的区别\"></a><code>new</code>与复合字面量的区别</h3><p>虽然<code>new</code>可以用来创建类型的实例并获取其指针，Go语言还提供了另一种创建并初始化类型实例的方法，即使用复合字面量（composite literals）：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ms := &amp;MyStruct&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种方法不仅创建了<code>MyStruct</code>的实例，并将其初始化为零值，还返回了指向这个实例的指针，类似于<code>new(MyStruct)</code>的作用。不过，复合字面量还允许你在创建实例的同时初始化字段值：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ms := &amp;MyStruct&#123;Field1: <span class=\"number\">10</span>, Field2: <span class=\"string\">&quot;Hello&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>new</code>函数在Go中用于分配并初始化一个类型的零值实例，并返回指向这个实例的指针。尽管<code>new</code>在某些情况下很有用，但在Go中，使用复合字面量初始化结构体及其指针更加常见，因为这种方法更灵活，可以直接在创建实例时初始化字段。</p>\n<h2 id=\"go-range-本质\"><a href=\"#go-range-本质\" class=\"headerlink\" title=\"go range 本质\"></a>go range 本质</h2><p>在Go语言中，<code>range</code>是一个用于迭代各种集合元素的关键字，包括数组、切片、映射、字符串和通道（channel）。<code>range</code>的本质是提供了一种简洁的语法来遍历容器类型的元素，而具体的迭代逻辑是根据被迭代对象的类型而内置在Go语言中的。下面是<code>range</code>用法的一些关键点，帮助理解其本质：</p>\n<h3 id=\"1-数组和切片\"><a href=\"#1-数组和切片\" class=\"headerlink\" title=\"1. 数组和切片\"></a>1. 数组和切片</h3><p>当使用<code>range</code>迭代数组或切片时，它会返回每个元素的索引和该索引处的值的副本。因为是副本，所以在迭代过程中修改这些值不会影响到原数组或切片中的元素。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slice := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> slice &#123;</span><br><span class=\"line\">    fmt.Println(i, v) <span class=\"comment\">// i 是索引，v 是该索引处的值的副本</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-映射（Map）\"><a href=\"#2-映射（Map）\" class=\"headerlink\" title=\"2. 映射（Map）\"></a>2. 映射（Map）</h3><p>迭代映射时，<code>range</code>返回每个键值对的键和值。由于映射的迭代顺序是不确定的，每次迭代同一个映射可能会得到不同的顺序。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m := <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>&#123;<span class=\"string\">&quot;a&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;b&quot;</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> m &#123;</span><br><span class=\"line\">    fmt.Println(k, v) <span class=\"comment\">// k 是键，v 是对应的值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-字符串\"><a href=\"#3-字符串\" class=\"headerlink\" title=\"3. 字符串\"></a>3. 字符串</h3><p>对于字符串，<code>range</code>迭代的是Unicode字符（rune），而不是字节。它返回当前字符的字节索引（不一定连续，因为Unicode字符可能占多个字节）和字符本身的rune值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := <span class=\"string\">&quot;Go语言&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, r := <span class=\"keyword\">range</span> s &#123;</span><br><span class=\"line\">    fmt.Println(i, r) <span class=\"comment\">// i 是rune的起始字节索引，r 是rune值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-通道（Channel）\"><a href=\"#4-通道（Channel）\" class=\"headerlink\" title=\"4. 通道（Channel）\"></a>4. 通道（Channel）</h3><p>当从通道中迭代时，<code>range</code>会连续从通道接收值，直到通道被关闭。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    c &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">    c &lt;- <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"built_in\">close</span>(c)</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"><span class=\"keyword\">for</span> v := <span class=\"keyword\">range</span> c &#123;</span><br><span class=\"line\">    fmt.Println(v) <span class=\"comment\">// v 是从通道接收到的值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本质理解\"><a href=\"#本质理解\" class=\"headerlink\" title=\"本质理解\"></a>本质理解</h3><p><code>range</code>的本质是语法糖，它为不同的集合类型提供了一种统一的迭代接口。在底层，Go语言根据被迭代对象的类型执行相应的迭代逻辑。这种设计简化了遍历数据结构的代码，使得开发者可以使用相同的语法模式来迭代不同类型的集合，而无需担心每种类型背后具体的迭代实现细节。</p>\n<h2 id=\"go-string如何push-back\"><a href=\"#go-string如何push-back\" class=\"headerlink\" title=\"go string如何push_back\"></a>go string如何push_back</h2><p>在Go语言中，字符串（<code>string</code>）是不可变的，这意味着一旦一个字符串被创建，它所包含的内容就不能被修改了。因此，Go中的字符串没有类似C++中<code>std::string</code>的<code>push_back</code>方法来直接在字符串的末尾添加一个字符。但是，你可以通过字符串连接的方式来“添加”字符或者另一个字符串到现有字符串的末尾，从而实现类似<code>push_back</code>的功能。</p>\n<p>使用<code>+</code>操作符或<code>fmt.Sprintf</code>函数是实现这一点的常见方法：</p>\n<h3 id=\"使用-操作符\"><a href=\"#使用-操作符\" class=\"headerlink\" title=\"使用+操作符\"></a>使用<code>+</code>操作符</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">s += <span class=\"string\">&quot; world&quot;</span> <span class=\"comment\">// 将&quot; world&quot;添加到&quot;hello&quot;的末尾</span></span><br><span class=\"line\">fmt.Println(s) <span class=\"comment\">// 输出: &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用fmt-Sprintf\"><a href=\"#使用fmt-Sprintf\" class=\"headerlink\" title=\"使用fmt.Sprintf\"></a>使用<code>fmt.Sprintf</code></h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">s = fmt.Sprintf(<span class=\"string\">&quot;%s%s&quot;</span>, s, <span class=\"string\">&quot; world&quot;</span>) <span class=\"comment\">// 将&quot; world&quot;添加到&quot;hello&quot;的末尾</span></span><br><span class=\"line\">fmt.Println(s) <span class=\"comment\">// 输出: &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你只想添加一个字符，可以将该字符先转换为字符串：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s := <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">c := <span class=\"string\">&#x27;!&#x27;</span> <span class=\"comment\">// 字符类型在Go中是rune</span></span><br><span class=\"line\">s += <span class=\"type\">string</span>(c) <span class=\"comment\">// 将字符&#x27;!&#x27;添加到&quot;hello&quot;的末尾</span></span><br><span class=\"line\">fmt.Println(s) <span class=\"comment\">// 输出: &quot;hello!&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>请记住，每次字符串连接操作实际上都会创建一个新的字符串，因为Go中的字符串是不可变的。如果你需要执行大量的字符串连接操作，使用<code>strings.Builder</code>类型可能会更高效：</p>\n<h3 id=\"使用strings-Builder\"><a href=\"#使用strings-Builder\" class=\"headerlink\" title=\"使用strings.Builder\"></a>使用<code>strings.Builder</code></h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> builder strings.Builder</span><br><span class=\"line\">builder.WriteString(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">builder.WriteString(<span class=\"string\">&quot; world&quot;</span>)</span><br><span class=\"line\">fmt.Println(builder.String()) <span class=\"comment\">// 输出: &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>strings.Builder</code>提供了一个可变的字符串缓冲区，可以更高效地构建字符串，特别是在涉及到大量字符串拼接操作时。它在内部管理一个字节切片（<code>[]byte</code>）来避免多次分配和复制字符串带来的性能开销。</p>\n<h2 id=\"介绍go中的错误处理\"><a href=\"#介绍go中的错误处理\" class=\"headerlink\" title=\"介绍go中的错误处理\"></a>介绍go中的错误处理</h2><p>在Go语言中，错误处理是通过使用<code>error</code>接口类型来实现的，这与许多其他语言使用异常（exceptions）的方式有所不同。<code>error</code>类型是Go语言标准库中的一个接口，定义如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">error</span> <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    Error() <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>任何拥有<code>Error() string</code>方法的类型都可以实现<code>error</code>接口，从而成为一个可以用于错误处理的错误类型。Go语言鼓励显式的错误处理，这意味着函数在遇到错误情况时，通常会返回一个错误值（实现了<code>error</code>接口的值），调用者应检查此返回值来决定如何应对错误。</p>\n<h3 id=\"错误处理的惯用法\"><a href=\"#错误处理的惯用法\" class=\"headerlink\" title=\"错误处理的惯用法\"></a>错误处理的惯用法</h3><p>在Go中处理错误的典型方式是通过检查函数的返回值中的错误值：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result, err := someFunction()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理错误</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;发生错误：&quot;</span>, err)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"comment\">// 或者其他错误处理</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 继续正常逻辑</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义错误\"><a href=\"#自定义错误\" class=\"headerlink\" title=\"自定义错误\"></a>自定义错误</h3><p>你可以通过实现<code>error</code>接口创建自定义错误类型。这通常通过定义一个结构体，然后为它实现<code>Error() string</code>方法来完成：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyError <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Message <span class=\"type\">string</span></span><br><span class=\"line\">    Code    <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *MyError)</span></span> Error() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">&quot;%d - %s&quot;</span>, e.Code, e.Message)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用自定义错误的函数示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 假设发生了某种错误情况</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;MyError&#123;Message: <span class=\"string\">&quot;出了点问题&quot;</span>, Code: <span class=\"number\">404</span>&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"错误检查与处理\"><a href=\"#错误检查与处理\" class=\"headerlink\" title=\"错误检查与处理\"></a>错误检查与处理</h3><p>Go语言的错误处理模式鼓励开发者显式地检查和处理错误，这可以让错误的来源和处理更加清晰，有助于编写可靠和容易维护的代码。虽然这种方式可能使代码量略增，但它提高了程序的稳定性和可读性。</p>\n<h3 id=\"errors包和fmt-Errorf\"><a href=\"#errors包和fmt-Errorf\" class=\"headerlink\" title=\"errors包和fmt.Errorf\"></a><code>errors</code>包和<code>fmt.Errorf</code></h3><p>Go标准库提供了<code>errors</code>包，用于简化常见错误的创建。使用<code>errors.New</code>函数可以快速创建一个基本的错误实例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;errors&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">err := errors.New(<span class=\"string\">&quot;发生了一个错误&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>另外，<code>fmt</code>包的<code>Errorf</code>函数可以用来格式化错误信息并返回一个错误。这是创建带有格式化信息的错误的便捷方式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err := fmt.Errorf(<span class=\"string\">&quot;发生了错误：%v&quot;</span>, <span class=\"string\">&quot;具体信息&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"错误处理的进阶使用\"><a href=\"#错误处理的进阶使用\" class=\"headerlink\" title=\"错误处理的进阶使用\"></a>错误处理的进阶使用</h3><p>在一些复杂的应用场景中，Go语言的错误处理还涉及错误的封装（wrapping）、检查（inspection）、以及自定义错误类型的设计，以满足更高级的错误处理需求。从Go 1.13开始，标准库<code>errors</code>包引入了对错误封装和展开的支持，使得错误处理更加灵活。</p>\n<h2 id=\"Go的错误处理，和其他语言相比，优点是什么？缺点是什么？\"><a href=\"#Go的错误处理，和其他语言相比，优点是什么？缺点是什么？\" class=\"headerlink\" title=\"Go的错误处理，和其他语言相比，优点是什么？缺点是什么？\"></a>Go的错误处理，和其他语言相比，优点是什么？缺点是什么？</h2><p>Go语言的错误处理模型有其独特之处，相较于其他编程语言，这种模型既有优点也有缺点。</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li><strong>简明易懂</strong>：Go的错误处理非常直接。函数要么成功并返回结果，要么失败并返回错误。这种明确性使得错误处理逻辑易于理解和维护。</li>\n<li><strong>显式错误处理</strong>：强制要求检查错误迫使开发者面对可能出现的错误情况，这有助于提高代码的健壮性。在Go中，忽略错误不是默许的做法，这与一些其他语言中可能通过异常处理隐式地忽略错误的情况不同。</li>\n<li><strong>灵活性</strong>：由于错误被视为普通值，开发者可以使用Go的所有语言特性来处理错误，比如可以很容易地将错误信息记录到日志、添加额外的上下文信息，或者根据错误类型进行不同的处理。</li>\n<li><strong>性能</strong>：相比异常处理机制，Go的错误处理方式通常有更好的性能。在Go中，错误作为返回值处理，避免了异常处理可能带来的性能开销。</li>\n</ol>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ol>\n<li><strong>代码冗余</strong>：在每个可能发生错误的函数调用后都需要检查错误，这可能会导致大量重复的错误检查代码。虽然这提高了代码的明确性和可靠性，但也使得代码更加冗长。</li>\n<li><strong>错误处理分散</strong>：错误需要在它们发生的地方立即被处理，这可能导致错误处理逻辑分散在代码库的各个部分，而不是集中处理。</li>\n<li><strong>缺乏统一的错误处理结构</strong>：虽然Go的<code>interface&#123;&#125;</code>类型允许以统一的方式处理所有错误，但标准库并没有提供一个统一处理错误的结构或者模式，这可能导致不同的开发者或团队采用不同的错误处理策略，降低了代码的一致性。</li>\n<li><strong>功能限制</strong>：与支持异常的语言相比，Go的错误处理模型在某些情况下可能不够灵活。例如，在需要清理资源的情况下，缺少类似于其他语言中<code>finally</code>块的机制，尽管可以通过<code>defer</code>语句在某种程度上实现相似的功能。</li>\n</ol>\n<p>总体而言，Go的错误处理模型强调简洁性和明确性，鼓励开发者显式地处理每个可能出现的错误。这种模型有其明显的优势，特别是在提高代码可读性和可维护性方面，但也要求开发者付出更多努力来管理错误处理代码的冗余和分散。</p>\n<h2 id=\"Go的错误处理和java，C-相比？\"><a href=\"#Go的错误处理和java，C-相比？\" class=\"headerlink\" title=\"Go的错误处理和java，C++相比？\"></a>Go的错误处理和java，C++相比？</h2><p>Go语言的错误处理与Java和C++的异常处理机制有显著不同。每种语言的错误处理机制都有其设计哲学、优势和局限。下面是一个比较概览：</p>\n<h3 id=\"Go\"><a href=\"#Go\" class=\"headerlink\" title=\"Go\"></a>Go</h3><ul>\n<li><strong>错误作为值</strong>：在Go中，错误被视为值，通过<code>error</code>接口表示。函数通常返回一个错误值，以指示是否发生了错误。</li>\n<li><strong>显式检查</strong>：调用者必须显式检查错误值，以决定是否成功执行了函数。</li>\n<li><strong>无异常机制</strong>：Go语言没有异常机制。所有的错误都通过正常的控制流和值来处理。</li>\n</ul>\n<p><strong>优势</strong>：</p>\n<ul>\n<li>易于理解和预测错误处理的流程。</li>\n<li>鼓励开发者面对并显式处理错误情况。</li>\n</ul>\n<p><strong>局限</strong>：</p>\n<ul>\n<li>可能导致大量重复的错误检查代码。</li>\n<li>错误处理逻辑可能会分散于代码的多个地方。</li>\n</ul>\n<h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><ul>\n<li><strong>异常机制</strong>：Java使用异常来处理错误和异常情况。方法可以抛出异常，调用者需要捕获这些异常。</li>\n<li><strong>检查型和非检查型异常</strong>：Java区分检查型（必须显式处理）和非检查型异常（可选处理）。</li>\n<li><strong>try-catch-finally</strong>：通过<code>try-catch</code>语句块捕获和处理异常，<code>finally</code>块用于资源清理。</li>\n</ul>\n<p><strong>优势</strong>：</p>\n<ul>\n<li>异常提供了一种强制错误处理的机制，有助于捕获运行时错误。</li>\n<li>通过异常类型，可以传递丰富的错误信息。</li>\n</ul>\n<p><strong>局限</strong>：</p>\n<ul>\n<li>异常可能导致控制流难以跟踪，尤其是在多层嵌套调用中。</li>\n<li>过度使用异常可能会影响代码的可读性和性能。</li>\n</ul>\n<h3 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C++\"></a>C++</h3><ul>\n<li><strong>异常机制</strong>：C++同样使用异常来处理错误情况。函数可以抛出异常，使用<code>try-catch</code>块捕获异常。</li>\n<li><strong>资源管理</strong>：C++提倡RAII（资源获取即初始化）原则，利用对象生命周期自动管理资源，配合异常使用。</li>\n<li><strong>noexcept</strong>：C++11引入了<code>noexcept</code>关键字，用于指示函数是否抛出异常。</li>\n</ul>\n<p><strong>优势</strong>：</p>\n<ul>\n<li>异常允许将错误处理代码从正常逻辑中分离出来，提高代码清晰度。</li>\n<li>RAII原则和智能指针等机制与异常配合，有效管理资源。</li>\n</ul>\n<p><strong>局限</strong>：</p>\n<ul>\n<li>异常可能导致性能开销，特别是在深层嵌套调用中。</li>\n<li>需要谨慎管理异常安全性和资源泄漏问题。</li>\n</ul>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><strong>Go</strong>的错误处理模式倾向于简单和显式，强迫开发者面对错误，但可能导致代码冗余。</li>\n<li><strong>Java</strong>和**C++**使用异常机制处理错误，能够将错误处理代码与业务逻辑分离，提供更丰富的错误信息，但可能使得控制流程复杂化，且需要注意异常安全性和性能问题。</li>\n</ul>\n<p>选择哪种错误处理方式，很大程度上取决于项目的具体需求、团队的偏好和特定语言的生态。</p>\n<h2 id=\"go中我不想定义自己的err类型，应该用哪种默认的？\"><a href=\"#go中我不想定义自己的err类型，应该用哪种默认的？\" class=\"headerlink\" title=\"go中我不想定义自己的err类型，应该用哪种默认的？\"></a>go中我不想定义自己的err类型，应该用哪种默认的？</h2><p>如果你不想在Go中定义自己的错误类型，可以使用标准库<code>errors</code>包中的<code>errors.New</code>函数来创建一个简单的错误。这种方式适用于那些不需要从错误中提取额外信息的场景。<code>errors.New</code>接收一个字符串参数，返回一个符合<code>error</code>接口的错误对象。</p>\n<h3 id=\"使用errors-New\"><a href=\"#使用errors-New\" class=\"headerlink\" title=\"使用errors.New\"></a>使用<code>errors.New</code></h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;errors&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span><span class=\"params\">()</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 假设发生了某种错误情况</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.New(<span class=\"string\">&quot;这里发生了一个错误&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    err := someFunction()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Println(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"格式化错误信息\"><a href=\"#格式化错误信息\" class=\"headerlink\" title=\"格式化错误信息\"></a>格式化错误信息</h3><p>如果你需要在错误信息中包含变量或者更复杂的数据结构，可以使用<code>fmt.Errorf</code>来代替<code>errors.New</code>。<code>fmt.Errorf</code>允许你像使用<code>fmt.Sprintf</code>一样格式化错误字符串，并返回一个错误对象。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span><span class=\"params\">(param <span class=\"type\">int</span>)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 fmt.Errorf 格式化错误信息</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">&quot;错误发生在 %d&quot;</span>, param)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    err := someFunction(<span class=\"number\">42</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Println(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从Go 1.13开始，<code>errors</code>包提供了<code>As</code>和<code>Is</code>函数，用于检查错误的类型和值。同时，<code>fmt.Errorf</code>支持使用<code>%w</code>动词来包装错误，使得你可以保留原始错误的同时添加上下文信息。即使你不定义自己的错误类型，这些功能也能帮助你更好地管理和检查错误。</p>\n<h3 id=\"使用错误包装\"><a href=\"#使用错误包装\" class=\"headerlink\" title=\"使用错误包装\"></a>使用错误包装</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;errors&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ErrSpecific = errors.New(<span class=\"string\">&quot;特定错误&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span><span class=\"params\">()</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回一个包装了原始错误的新错误</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">&quot;操作失败: %w&quot;</span>, ErrSpecific)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    err := someFunction()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> errors.Is(err, ErrSpecific) &#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;发生了特定的错误:&quot;</span>, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>errors.New</code>和<code>fmt.Errorf</code>可以满足大多数不需要自定义错误类型的场景，并且通过错误包装和检查，你依然可以构建出结构化和可管理的错误处理逻辑。</p>\n<h2 id=\"如何判断-map-中是否包含某个-key-？\"><a href=\"#如何判断-map-中是否包含某个-key-？\" class=\"headerlink\" title=\"如何判断 map 中是否包含某个 key ？\"></a>如何判断 map 中是否包含某个 key ？</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sample <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> _, ok := sample[<span class=\"number\">10</span>]; ok &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"strings-Join-≈-strings-Builder-bytes-Buffer-“-”-fmt-Sprintf\"><a href=\"#strings-Join-≈-strings-Builder-bytes-Buffer-“-”-fmt-Sprintf\" class=\"headerlink\" title=\"strings.Join ≈ strings.Builder &gt; bytes.Buffer &gt; “+” &gt; fmt.Sprintf\"></a>strings.Join ≈ strings.Builder &gt; bytes.Buffer &gt; “+” &gt; fmt.Sprintf</h2><p>在Go语言中，拼接字符串可以通过多种方式实现，每种方式在不同场景下的性能和适用性各有差异。下面是对这五种方法——<code>strings.Join</code>、<code>strings.Builder</code>、<code>bytes.Buffer</code>、<code>&quot;+&quot;</code>操作符、<code>fmt.Sprintf</code>——的分析，按照性能从高到低排列：</p>\n<h3 id=\"1-strings-Join\"><a href=\"#1-strings-Join\" class=\"headerlink\" title=\"1. strings.Join\"></a>1. <code>strings.Join</code></h3><ul>\n<li><strong>适用场景</strong>：当你有一个字符串切片，需要将其元素连接成一个单独的字符串时，<code>strings.Join</code>非常高效。</li>\n<li><strong>性能</strong>：通常比<code>+</code>操作符和<code>fmt.Sprintf</code>更高效，因为它在内部计算结果字符串的确切长度，然后一次性分配足够的内存。</li>\n<li><strong>示例</strong>：  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parts := []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;Hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>&#125;</span><br><span class=\"line\">result := strings.Join(parts, <span class=\"string\">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-strings-Builder\"><a href=\"#2-strings-Builder\" class=\"headerlink\" title=\"2. strings.Builder\"></a>2. <code>strings.Builder</code></h3><ul>\n<li><strong>适用场景</strong>：对于在循环或多个步骤中构建字符串尤其有用。自Go 1.10引入以来，它是推荐的字符串构建方法。</li>\n<li><strong>性能</strong>：提供了高效的字符串构建能力，因为它避免了不必要的内存分配和复制。</li>\n<li><strong>示例</strong>：  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sb strings.Builder</span><br><span class=\"line\">sb.WriteString(<span class=\"string\">&quot;Hello&quot;</span>)</span><br><span class=\"line\">sb.WriteString(<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">sb.WriteString(<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">result := sb.String()</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-bytes-Buffer\"><a href=\"#3-bytes-Buffer\" class=\"headerlink\" title=\"3. bytes.Buffer\"></a>3. <code>bytes.Buffer</code></h3><ul>\n<li><strong>适用场景</strong>：在需要频繁修改字符串或者处理二进制数据和字符串转换时适用。<code>bytes.Buffer</code>与<code>strings.Builder</code>类似，但更通用，也支持字节操作。</li>\n<li><strong>性能</strong>：虽然性能略低于<code>strings.Builder</code>，但在需要处理字节和字符串的场景下是一个很好的选择。</li>\n<li><strong>示例</strong>：  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buf bytes.Buffer</span><br><span class=\"line\">buf.Write([]<span class=\"type\">byte</span>(<span class=\"string\">&quot;Hello&quot;</span>))</span><br><span class=\"line\">buf.WriteString(<span class=\"string\">&quot; world&quot;</span>)</span><br><span class=\"line\">result := buf.String()</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"4-操作符\"><a href=\"#4-操作符\" class=\"headerlink\" title=\"4. &quot;+&quot;操作符\"></a>4. <code>&quot;+&quot;</code>操作符</h3><ul>\n<li><strong>适用场景</strong>：简单的字符串拼接操作，尤其是少量字符串时。</li>\n<li><strong>性能</strong>：在拼接少数几个字符串时性能可接受，但在循环或大量字符串拼接场景中性能较差，因为每次拼接都会产生新的字符串，导致多次内存分配和复制。</li>\n<li><strong>示例</strong>：  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result := <span class=\"string\">&quot;Hello&quot;</span> + <span class=\"string\">&quot; &quot;</span> + <span class=\"string\">&quot;world&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"5-fmt-Sprintf\"><a href=\"#5-fmt-Sprintf\" class=\"headerlink\" title=\"5. fmt.Sprintf\"></a>5. <code>fmt.Sprintf</code></h3><ul>\n<li><strong>适用场景</strong>：需要格式化字符串时，如插入变量、调整格式等。</li>\n<li><strong>性能</strong>：相比于其他方法，性能较低，因为它需要解析格式字符串并执行类型断言等操作，但它提供了非常强大的格式化功能。</li>\n<li><strong>示例</strong>：  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name := <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">result := fmt.Sprintf(<span class=\"string\">&quot;Hello %s&quot;</span>, name)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>选择哪种方法取决于具体的应用场景。对于简单或少量的字符串拼接，直接使用<code>&quot;+&quot;</code>可能是最直观的。当需要构建大量字符串时，<code>strings.Builder</code>是首选。<code>strings.Join</code>适合已经存储在切片中的字符串拼接。<code>fmt.Sprintf</code>提供了格式化的灵活性，适用于需要格式化输出的场景。<code>bytes.Buffer</code>则在处理既包含文本又包含二进制数据的情况下非常有用。</p>\n<h2 id=\"strings-Builder原理\"><a href=\"#strings-Builder原理\" class=\"headerlink\" title=\"strings.Builder原理\"></a>strings.Builder原理</h2><p><code>strings.Builder</code> 是 Go 语言在 1.10 版本中引入的一个结构体，它提供了一种高效构建字符串的方法。与其他字符串拼接方法相比，<code>strings.Builder</code> 更为高效，主要因为它在内部优化了内存的分配和复制操作。下面是 <code>strings.Builder</code> 的一些关键原理和特点：</p>\n<h3 id=\"1-最小化内存分配\"><a href=\"#1-最小化内存分配\" class=\"headerlink\" title=\"1. 最小化内存分配\"></a>1. 最小化内存分配</h3><p><code>strings.Builder</code> 在内部维护了一个字节切片（<code>[]byte</code>）。当向 <code>Builder</code> 添加字符串时，它实际上是将这些字符串的字节追加到内部的字节切片中。<code>Builder</code> 会根据需要自动增长这个字节切片的容量，但它尽量通过预分配足够的内存空间来避免频繁的内存重新分配。</p>\n<h3 id=\"2-避免不必要的复制\"><a href=\"#2-避免不必要的复制\" class=\"headerlink\" title=\"2. 避免不必要的复制\"></a>2. 避免不必要的复制</h3><p>在传统的字符串拼接操作中，每一次拼接都可能产生一个新的字符串对象，这意味着需要复制字符串的内容到新的内存位置。相比之下，<code>strings.Builder</code> 通过直接在已有的字节切片上追加内容，避免了这种复制，从而提升了性能。</p>\n<h3 id=\"3-高效的字符串生成\"><a href=\"#3-高效的字符串生成\" class=\"headerlink\" title=\"3. 高效的字符串生成\"></a>3. 高效的字符串生成</h3><p>当调用 <code>strings.Builder</code> 的 <code>String()</code> 方法来获取最终的字符串时，它会基于内部的字节切片创建一个新的字符串。由于 Go 语言字符串的不可变性，这个操作会涉及一次内存复制。然而，这仅仅发生在整个构建过程的最后，因此相比于多次字符串拼接，总体上仍然大大减少了内存复制的次数。</p>\n<h3 id=\"4-Grow-方法\"><a href=\"#4-Grow-方法\" class=\"headerlink\" title=\"4. Grow 方法\"></a>4. <code>Grow</code> 方法</h3><p><code>strings.Builder</code> 提供了 <code>Grow</code> 方法，允许手动指定预期需要的额外容量。这可以进一步优化性能，因为它可以在大量数据被写入之前预分配足够的内存，从而避免自动扩容过程中的多次内存分配。</p>\n<h3 id=\"5-安全性\"><a href=\"#5-安全性\" class=\"headerlink\" title=\"5. 安全性\"></a>5. 安全性</h3><p><code>strings.Builder</code> 的设计也考虑到了安全性。一旦通过 <code>String()</code> 方法获取了最终的字符串，再尝试向 <code>Builder</code> 写入新的数据将会导致 panic。这个设计确保了一旦字符串被生成，内部的字节切片不会被进一步修改，保持了字符串不可变的特性。</p>\n<p>总的来说，<code>strings.Builder</code> 的设计充分利用了 Go 语言的特性，如切片的灵活性和字符串的不可变性，通过减少内存分配和复制的次数，提供了一种高效且安全的方式来构建字符串。</p>\n<h2 id=\"Go语言-…是什么\"><a href=\"#Go语言-…是什么\" class=\"headerlink\" title=\"Go语言 …是什么\"></a>Go语言 …是什么</h2><p>在Go语言中，<code>...</code>符号有两个主要用途：</p>\n<h3 id=\"1-可变参数函数（Variadic-Function）\"><a href=\"#1-可变参数函数（Variadic-Function）\" class=\"headerlink\" title=\"1. 可变参数函数（Variadic Function）\"></a>1. 可变参数函数（Variadic Function）</h3><p>当<code>...</code>用于函数的参数类型前时，表示该函数可以接收任意数量的该类型的参数。这使得函数可以灵活处理不同数量的参数，类似于其他语言中的可变参数列表。</p>\n<p>例如，定义一个可接收多个<code>int</code>类型参数的函数，并计算它们的和：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(nums ...<span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    total := <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, num := <span class=\"keyword\">range</span> nums &#123;</span><br><span class=\"line\">        total += num</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> total</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)) <span class=\"comment\">// 输出 6</span></span><br><span class=\"line\">    fmt.Println(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)) <span class=\"comment\">// 输出 15</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>sum</code>函数可以接收任意数量的<code>int</code>参数。</p>\n<h3 id=\"2-切片参数展开（Slice-Unfolding）\"><a href=\"#2-切片参数展开（Slice-Unfolding）\" class=\"headerlink\" title=\"2. 切片参数展开（Slice Unfolding）\"></a>2. 切片参数展开（Slice Unfolding）</h3><p>当<code>...</code>用于调用可变参数函数时，紧跟在切片变量后面，表示将切片的元素展开为参数列表传递给函数。</p>\n<p>继续使用上面的<code>sum</code>函数作为例子，如果你有一个<code>int</code>切片，并希望将其元素作为参数传递给<code>sum</code>，可以这样做：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">fmt.Println(sum(nums...)) <span class=\"comment\">// 输出 15</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，<code>nums...</code>将<code>nums</code>切片中的每个元素展开，作为独立的参数传递给<code>sum</code>函数。</p>\n<h3 id=\"总结-3\"><a href=\"#总结-3\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><code>...</code>在Go语言中用作可变参数函数定义和切片参数展开的语法元素，提供了编写灵活函数接口和调用的能力。</p>\n"},{"title":"欢迎来到我的博客","keywords":["个人博客","技术分享","学习笔记","Hexo","编程"],"description":"欢迎来到我的个人技术博客！这里分享技术心得、记录学习历程，包含编程经验、项目开发、读书笔记等内容。","top_img":"/img/index.jpg","cover":"/img/index.jpg","comments":1,"toc":true,"toc_number":true,"toc_style_simple":false,"copyright":true,"copyright_author":"ZhouBufan","copyright_author_href":"https://zhoubufan.github.io","copyright_url":"https://zhoubufan.github.io/2025/01/05/hello-world/","copyright_info":"本文采用 CC BY-NC-SA 4.0 协议，转载请注明出处。","mathjax":false,"katex":false,"aplayer":false,"highlight_shrink":false,"aside":true,"abcjs":false,"noticeOutdate":true,"abbrlink":28184,"date":"2025-01-05T02:30:00.000Z","updated":"2025-01-05T02:30:00.000Z","_content":"\n# 欢迎来到我的个人博客！\n\n你好！欢迎来到我的个人技术博客。这里是我分享技术心得、记录学习历程的地方。\n\n## 关于我\n\n我是 ZhouBufan，一名热爱技术的开发者。这个博客将记录我在技术路上的点点滴滴，包括：\n\n- 📚 技术学习笔记\n- 💡 编程心得分享\n- 🔧 项目开发经验\n- 📖 读书笔记\n- 🌟 生活感悟\n\n## 博客特色\n\n这个博客使用 [Hexo](https://hexo.io/) 静态博客框架搭建，具有以下特点：\n\n- 🚀 快速加载\n- 📱 响应式设计\n- 🔍 SEO 友好\n- 🎨 简洁美观\n\n## 开始使用\n\n如果你也想搭建类似的博客，可以查看 [Hexo 官方文档](https://hexo.io/docs/)。\n\n### 常用命令\n\n```bash\n# 创建新文章\nhexo new \"文章标题\"\n\n# 启动本地服务器\nhexo server\n\n# 生成静态文件\nhexo generate\n\n# 部署到 GitHub Pages\nhexo deploy\n```\n\n感谢你的访问，希望你能在这里找到有用的内容！\n\n---\n\n*最后更新时间：2025年9月10日*\n","source":"_posts/hello-world.md","raw":"---\ntitle: 欢迎来到我的博客\ntags:\n  - 博客\n  - 技术\n  - 学习\ncategories:\n  - 生活\nkeywords:\n  - 个人博客\n  - 技术分享\n  - 学习笔记\n  - Hexo\n  - 编程\ndescription: 欢迎来到我的个人技术博客！这里分享技术心得、记录学习历程，包含编程经验、项目开发、读书笔记等内容。\ntop_img: /img/index.jpg\ncover: /img/index.jpg\ncomments: true\ntoc: true\ntoc_number: true\ntoc_style_simple: false\ncopyright: true\ncopyright_author: ZhouBufan\ncopyright_author_href: 'https://zhoubufan.github.io'\ncopyright_url: 'https://zhoubufan.github.io/2025/01/05/hello-world/'\ncopyright_info: 本文采用 CC BY-NC-SA 4.0 协议，转载请注明出处。\nmathjax: false\nkatex: false\naplayer: false\nhighlight_shrink: false\naside: true\nabcjs: false\nnoticeOutdate: true\nabbrlink: 28184\ndate: 2025-01-05 10:30:00\nupdated: 2025-01-05 10:30:00\n---\n\n# 欢迎来到我的个人博客！\n\n你好！欢迎来到我的个人技术博客。这里是我分享技术心得、记录学习历程的地方。\n\n## 关于我\n\n我是 ZhouBufan，一名热爱技术的开发者。这个博客将记录我在技术路上的点点滴滴，包括：\n\n- 📚 技术学习笔记\n- 💡 编程心得分享\n- 🔧 项目开发经验\n- 📖 读书笔记\n- 🌟 生活感悟\n\n## 博客特色\n\n这个博客使用 [Hexo](https://hexo.io/) 静态博客框架搭建，具有以下特点：\n\n- 🚀 快速加载\n- 📱 响应式设计\n- 🔍 SEO 友好\n- 🎨 简洁美观\n\n## 开始使用\n\n如果你也想搭建类似的博客，可以查看 [Hexo 官方文档](https://hexo.io/docs/)。\n\n### 常用命令\n\n```bash\n# 创建新文章\nhexo new \"文章标题\"\n\n# 启动本地服务器\nhexo server\n\n# 生成静态文件\nhexo generate\n\n# 部署到 GitHub Pages\nhexo deploy\n```\n\n感谢你的访问，希望你能在这里找到有用的内容！\n\n---\n\n*最后更新时间：2025年9月10日*\n","slug":"hello-world","published":1,"layout":"post","photos":[],"_id":"cmgly8kq1000d88vo0yit0joi","content":"<h1 id=\"欢迎来到我的个人博客！\"><a href=\"#欢迎来到我的个人博客！\" class=\"headerlink\" title=\"欢迎来到我的个人博客！\"></a>欢迎来到我的个人博客！</h1><p>你好！欢迎来到我的个人技术博客。这里是我分享技术心得、记录学习历程的地方。</p>\n<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>我是 ZhouBufan，一名热爱技术的开发者。这个博客将记录我在技术路上的点点滴滴，包括：</p>\n<ul>\n<li>📚 技术学习笔记</li>\n<li>💡 编程心得分享</li>\n<li>🔧 项目开发经验</li>\n<li>📖 读书笔记</li>\n<li>🌟 生活感悟</li>\n</ul>\n<h2 id=\"博客特色\"><a href=\"#博客特色\" class=\"headerlink\" title=\"博客特色\"></a>博客特色</h2><p>这个博客使用 <a href=\"https://hexo.io/\">Hexo</a> 静态博客框架搭建，具有以下特点：</p>\n<ul>\n<li>🚀 快速加载</li>\n<li>📱 响应式设计</li>\n<li>🔍 SEO 友好</li>\n<li>🎨 简洁美观</li>\n</ul>\n<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><p>如果你也想搭建类似的博客，可以查看 <a href=\"https://hexo.io/docs/\">Hexo 官方文档</a>。</p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建新文章</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;文章标题&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动本地服务器</span></span><br><span class=\"line\">hexo server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成静态文件</span></span><br><span class=\"line\">hexo generate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 部署到 GitHub Pages</span></span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>感谢你的访问，希望你能在这里找到有用的内容！</p>\n<hr>\n<p><em>最后更新时间：2025年9月10日</em></p>\n","excerpt":"","more":"<h1 id=\"欢迎来到我的个人博客！\"><a href=\"#欢迎来到我的个人博客！\" class=\"headerlink\" title=\"欢迎来到我的个人博客！\"></a>欢迎来到我的个人博客！</h1><p>你好！欢迎来到我的个人技术博客。这里是我分享技术心得、记录学习历程的地方。</p>\n<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>我是 ZhouBufan，一名热爱技术的开发者。这个博客将记录我在技术路上的点点滴滴，包括：</p>\n<ul>\n<li>📚 技术学习笔记</li>\n<li>💡 编程心得分享</li>\n<li>🔧 项目开发经验</li>\n<li>📖 读书笔记</li>\n<li>🌟 生活感悟</li>\n</ul>\n<h2 id=\"博客特色\"><a href=\"#博客特色\" class=\"headerlink\" title=\"博客特色\"></a>博客特色</h2><p>这个博客使用 <a href=\"https://hexo.io/\">Hexo</a> 静态博客框架搭建，具有以下特点：</p>\n<ul>\n<li>🚀 快速加载</li>\n<li>📱 响应式设计</li>\n<li>🔍 SEO 友好</li>\n<li>🎨 简洁美观</li>\n</ul>\n<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><p>如果你也想搭建类似的博客，可以查看 <a href=\"https://hexo.io/docs/\">Hexo 官方文档</a>。</p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建新文章</span></span><br><span class=\"line\">hexo new <span class=\"string\">&quot;文章标题&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动本地服务器</span></span><br><span class=\"line\">hexo server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成静态文件</span></span><br><span class=\"line\">hexo generate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 部署到 GitHub Pages</span></span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>感谢你的访问，希望你能在这里找到有用的内容！</p>\n<hr>\n<p><em>最后更新时间：2025年9月10日</em></p>\n"},{"abbrlink":46191,"title":"Go语言方法接收者详解","date":"2025-01-27T02:00:00.000Z","_content":"# Go语言方法接收者详解\n\n## 概述\n\nGo语言中的方法（Method）是带有特殊接收者参数的函数。接收者出现在自己的参数列表中，位于 `func` 关键字和方法名之间。\n\n## 基本语法\n\n```go\nfunc (接收者变量 接收者类型) 方法名(参数列表) (返回值列表) {\n    // 方法体\n}\n```\n\n## 方法接收者的类型限制\n\n### 核心规则\n\n**你只能为在同一个包中定义的接收者类型声明方法，而不能为其它包中定义的类型（包括 int 之类的内置类型）声明方法。**\n\n### 详细说明\n\n#### ✅ 允许的情况\n\n1. **自定义类型**\n```go\ntype MyInt int\ntype MyString string\ntype MyStruct struct {\n    field int\n}\n\n// 为自定义类型添加方法\nfunc (m MyInt) Double() int {\n    return int(m * 2)\n}\n\nfunc (s MyString) Length() int {\n    return len(string(s))\n}\n\nfunc (ms MyStruct) GetField() int {\n    return ms.field\n}\n```\n\n2. **结构体类型**\n```go\ntype Person struct {\n    Name string\n    Age  int\n}\n\nfunc (p Person) SayHello() {\n    fmt.Printf(\"Hello, I'm %s\\n\", p.Name)\n}\n\nfunc (p *Person) SetAge(age int) {\n    p.Age = age\n}\n```\n\n#### ❌ 不允许的情况\n\n1. **内置类型**\n```go\n// 编译错误：不能为内置类型添加方法\nfunc (i int) Double() int {\n    return i * 2\n}\n\nfunc (s string) Length() int {\n    return len(s)\n}\n```\n\n2. **其他包的类型**\n```go\nimport \"strings\"\n\n// 编译错误：不能为其他包的类型添加方法\nfunc (b strings.Builder) MyMethod() {\n    // ...\n}\n```\n\n## 为什么有这个限制？\n\n### 1. 类型安全\n- 防止意外的类型污染\n- 确保类型系统的完整性\n\n### 2. 包封装\n- 保持包的边界清晰\n- 避免跨包的依赖混乱\n\n### 3. 避免冲突\n- 防止不同包为同一类型定义冲突的方法\n- 确保方法调用的唯一性\n\n## 解决方案\n\n### 方案1：包装类型（Wrapper）\n```go\nimport \"strings\"\n\ntype MyBuilder struct {\n    strings.Builder\n}\n\nfunc (mb MyBuilder) MyMethod() {\n    // 可以调用嵌入的 Builder 的方法\n    mb.WriteString(\"Hello\")\n}\n```\n\n### 方案2：类型别名 + 包装\n```go\ntype MyInt = int  // 类型别名\n\n// 仍然不能直接为 MyInt 添加方法\n// 需要包装\ntype WrappedInt struct {\n    value int\n}\n\nfunc (wi WrappedInt) Double() int {\n    return wi.value * 2\n}\n```\n\n### 方案3：函数式编程\n```go\n// 使用函数而不是方法\nfunc DoubleInt(i int) int {\n    return i * 2\n}\n\nfunc LengthString(s string) int {\n    return len(s)\n}\n```\n\n## 实际应用示例\n\n### 示例1：数值类型方法\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\ntype MyFloat float64\n\nfunc (f MyFloat) Abs() float64 {\n    if f < 0 {\n        return float64(-f)\n    }\n    return float64(f)\n}\n\nfunc (f MyFloat) Sqrt() float64 {\n    return math.Sqrt(float64(f))\n}\n\nfunc main() {\n    f := MyFloat(-math.Sqrt2)\n    fmt.Println(f.Abs())  // 1.4142135623730951\n    fmt.Println(f.Sqrt()) // NaN (负数开方)\n}\n```\n\n### 示例2：字符串类型方法\n```go\ntype MyString string\n\nfunc (s MyString) IsEmpty() bool {\n    return len(s) == 0\n}\n\nfunc (s MyString) ToUpper() MyString {\n    return MyString(strings.ToUpper(string(s)))\n}\n\nfunc (s MyString) Reverse() MyString {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return MyString(runes)\n}\n```\n\n### 示例3：复杂类型方法\n```go\ntype Point struct {\n    X, Y float64\n}\n\nfunc (p Point) Distance() float64 {\n    return math.Sqrt(p.X*p.X + p.Y*p.Y)\n}\n\nfunc (p Point) Add(other Point) Point {\n    return Point{p.X + other.X, p.Y + other.Y}\n}\n\nfunc (p *Point) Scale(factor float64) {\n    p.X *= factor\n    p.Y *= factor\n}\n```\n\n## 最佳实践\n\n### 1. 选择值接收者还是指针接收者\n\n```go\n// 值接收者：适用于小对象，不修改接收者\nfunc (p Point) Distance() float64 { ... }\n\n// 指针接收者：适用于大对象，需要修改接收者\nfunc (p *Point) Scale(factor float64) { ... }\n```\n\n### 2. 一致性原则\n```go\n// 如果有一个方法使用指针接收者，所有方法都应该使用指针接收者\ntype Counter struct {\n    value int\n}\n\nfunc (c *Counter) Increment() {\n    c.value++\n}\n\nfunc (c *Counter) GetValue() int {\n    return c.value\n}\n```\n\n### 3. 接口实现\n```go\ntype Writer interface {\n    Write([]byte) (int, error)\n}\n\ntype MyWriter struct {\n    buffer []byte\n}\n\nfunc (w *MyWriter) Write(data []byte) (int, error) {\n    w.buffer = append(w.buffer, data...)\n    return len(data), nil\n}\n```\n\n## 总结\n\nGo语言的方法接收者限制是语言设计的重要特性，它：\n\n1. **保证了类型安全**：防止意外的类型污染\n2. **维护了包边界**：确保清晰的模块化设计\n3. **避免了命名冲突**：防止不同包的方法冲突\n\n通过理解这个限制，我们可以更好地设计Go程序，选择合适的方式来扩展类型的功能。\n\n## 相关资源\n\n- [Go官方文档 - 方法](https://golang.org/ref/spec#Method_declarations)\n- [Go语言圣经 - 方法](https://gopl-zh.github.io/ch6/ch6-01.html)\n- [Effective Go - 方法](https://golang.org/doc/effective_go.html#methods)\n","source":"_posts/Go方法接收者详解.md","raw":"---\nabbrlink: 46191\ntitle: Go语言方法接收者详解\ndate: 2025-01-27 10:00:00\ntags: \n  - Go\ncategories: \n  - Go学习笔记\n---\n# Go语言方法接收者详解\n\n## 概述\n\nGo语言中的方法（Method）是带有特殊接收者参数的函数。接收者出现在自己的参数列表中，位于 `func` 关键字和方法名之间。\n\n## 基本语法\n\n```go\nfunc (接收者变量 接收者类型) 方法名(参数列表) (返回值列表) {\n    // 方法体\n}\n```\n\n## 方法接收者的类型限制\n\n### 核心规则\n\n**你只能为在同一个包中定义的接收者类型声明方法，而不能为其它包中定义的类型（包括 int 之类的内置类型）声明方法。**\n\n### 详细说明\n\n#### ✅ 允许的情况\n\n1. **自定义类型**\n```go\ntype MyInt int\ntype MyString string\ntype MyStruct struct {\n    field int\n}\n\n// 为自定义类型添加方法\nfunc (m MyInt) Double() int {\n    return int(m * 2)\n}\n\nfunc (s MyString) Length() int {\n    return len(string(s))\n}\n\nfunc (ms MyStruct) GetField() int {\n    return ms.field\n}\n```\n\n2. **结构体类型**\n```go\ntype Person struct {\n    Name string\n    Age  int\n}\n\nfunc (p Person) SayHello() {\n    fmt.Printf(\"Hello, I'm %s\\n\", p.Name)\n}\n\nfunc (p *Person) SetAge(age int) {\n    p.Age = age\n}\n```\n\n#### ❌ 不允许的情况\n\n1. **内置类型**\n```go\n// 编译错误：不能为内置类型添加方法\nfunc (i int) Double() int {\n    return i * 2\n}\n\nfunc (s string) Length() int {\n    return len(s)\n}\n```\n\n2. **其他包的类型**\n```go\nimport \"strings\"\n\n// 编译错误：不能为其他包的类型添加方法\nfunc (b strings.Builder) MyMethod() {\n    // ...\n}\n```\n\n## 为什么有这个限制？\n\n### 1. 类型安全\n- 防止意外的类型污染\n- 确保类型系统的完整性\n\n### 2. 包封装\n- 保持包的边界清晰\n- 避免跨包的依赖混乱\n\n### 3. 避免冲突\n- 防止不同包为同一类型定义冲突的方法\n- 确保方法调用的唯一性\n\n## 解决方案\n\n### 方案1：包装类型（Wrapper）\n```go\nimport \"strings\"\n\ntype MyBuilder struct {\n    strings.Builder\n}\n\nfunc (mb MyBuilder) MyMethod() {\n    // 可以调用嵌入的 Builder 的方法\n    mb.WriteString(\"Hello\")\n}\n```\n\n### 方案2：类型别名 + 包装\n```go\ntype MyInt = int  // 类型别名\n\n// 仍然不能直接为 MyInt 添加方法\n// 需要包装\ntype WrappedInt struct {\n    value int\n}\n\nfunc (wi WrappedInt) Double() int {\n    return wi.value * 2\n}\n```\n\n### 方案3：函数式编程\n```go\n// 使用函数而不是方法\nfunc DoubleInt(i int) int {\n    return i * 2\n}\n\nfunc LengthString(s string) int {\n    return len(s)\n}\n```\n\n## 实际应用示例\n\n### 示例1：数值类型方法\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\ntype MyFloat float64\n\nfunc (f MyFloat) Abs() float64 {\n    if f < 0 {\n        return float64(-f)\n    }\n    return float64(f)\n}\n\nfunc (f MyFloat) Sqrt() float64 {\n    return math.Sqrt(float64(f))\n}\n\nfunc main() {\n    f := MyFloat(-math.Sqrt2)\n    fmt.Println(f.Abs())  // 1.4142135623730951\n    fmt.Println(f.Sqrt()) // NaN (负数开方)\n}\n```\n\n### 示例2：字符串类型方法\n```go\ntype MyString string\n\nfunc (s MyString) IsEmpty() bool {\n    return len(s) == 0\n}\n\nfunc (s MyString) ToUpper() MyString {\n    return MyString(strings.ToUpper(string(s)))\n}\n\nfunc (s MyString) Reverse() MyString {\n    runes := []rune(s)\n    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n        runes[i], runes[j] = runes[j], runes[i]\n    }\n    return MyString(runes)\n}\n```\n\n### 示例3：复杂类型方法\n```go\ntype Point struct {\n    X, Y float64\n}\n\nfunc (p Point) Distance() float64 {\n    return math.Sqrt(p.X*p.X + p.Y*p.Y)\n}\n\nfunc (p Point) Add(other Point) Point {\n    return Point{p.X + other.X, p.Y + other.Y}\n}\n\nfunc (p *Point) Scale(factor float64) {\n    p.X *= factor\n    p.Y *= factor\n}\n```\n\n## 最佳实践\n\n### 1. 选择值接收者还是指针接收者\n\n```go\n// 值接收者：适用于小对象，不修改接收者\nfunc (p Point) Distance() float64 { ... }\n\n// 指针接收者：适用于大对象，需要修改接收者\nfunc (p *Point) Scale(factor float64) { ... }\n```\n\n### 2. 一致性原则\n```go\n// 如果有一个方法使用指针接收者，所有方法都应该使用指针接收者\ntype Counter struct {\n    value int\n}\n\nfunc (c *Counter) Increment() {\n    c.value++\n}\n\nfunc (c *Counter) GetValue() int {\n    return c.value\n}\n```\n\n### 3. 接口实现\n```go\ntype Writer interface {\n    Write([]byte) (int, error)\n}\n\ntype MyWriter struct {\n    buffer []byte\n}\n\nfunc (w *MyWriter) Write(data []byte) (int, error) {\n    w.buffer = append(w.buffer, data...)\n    return len(data), nil\n}\n```\n\n## 总结\n\nGo语言的方法接收者限制是语言设计的重要特性，它：\n\n1. **保证了类型安全**：防止意外的类型污染\n2. **维护了包边界**：确保清晰的模块化设计\n3. **避免了命名冲突**：防止不同包的方法冲突\n\n通过理解这个限制，我们可以更好地设计Go程序，选择合适的方式来扩展类型的功能。\n\n## 相关资源\n\n- [Go官方文档 - 方法](https://golang.org/ref/spec#Method_declarations)\n- [Go语言圣经 - 方法](https://gopl-zh.github.io/ch6/ch6-01.html)\n- [Effective Go - 方法](https://golang.org/doc/effective_go.html#methods)\n","slug":"Go方法接收者详解","published":1,"updated":"2025-10-23T01:54:00.958Z","_id":"cmh2rhxql0000agvodaegbkb1","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"Go语言方法接收者详解\"><a href=\"#Go语言方法接收者详解\" class=\"headerlink\" title=\"Go语言方法接收者详解\"></a>Go语言方法接收者详解</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Go语言中的方法（Method）是带有特殊接收者参数的函数。接收者出现在自己的参数列表中，位于 <code>func</code> 关键字和方法名之间。</p>\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(接收者变量 接收者类型)</span></span> 方法名(参数列表) (返回值列表) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 方法体</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法接收者的类型限制\"><a href=\"#方法接收者的类型限制\" class=\"headerlink\" title=\"方法接收者的类型限制\"></a>方法接收者的类型限制</h2><h3 id=\"核心规则\"><a href=\"#核心规则\" class=\"headerlink\" title=\"核心规则\"></a>核心规则</h3><p><strong>你只能为在同一个包中定义的接收者类型声明方法，而不能为其它包中定义的类型（包括 int 之类的内置类型）声明方法。</strong></p>\n<h3 id=\"详细说明\"><a href=\"#详细说明\" class=\"headerlink\" title=\"详细说明\"></a>详细说明</h3><h4 id=\"✅-允许的情况\"><a href=\"#✅-允许的情况\" class=\"headerlink\" title=\"✅ 允许的情况\"></a>✅ 允许的情况</h4><ol>\n<li><p><strong>自定义类型</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyInt <span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyString <span class=\"type\">string</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyStruct <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    field <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为自定义类型添加方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m MyInt)</span></span> Double() <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">int</span>(m * <span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s MyString)</span></span> Length() <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(<span class=\"type\">string</span>(s))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(ms MyStruct)</span></span> GetField() <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ms.field</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>结构体类型</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Name <span class=\"type\">string</span></span><br><span class=\"line\">    Age  <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Person)</span></span> SayHello() &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;Hello, I&#x27;m %s\\n&quot;</span>, p.Name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Person)</span></span> SetAge(age <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">    p.Age = age</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"❌-不允许的情况\"><a href=\"#❌-不允许的情况\" class=\"headerlink\" title=\"❌ 不允许的情况\"></a>❌ 不允许的情况</h4><ol>\n<li><p><strong>内置类型</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 编译错误：不能为内置类型添加方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(i <span class=\"type\">int</span>)</span></span> Double() <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s <span class=\"type\">string</span>)</span></span> Length() <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>其他包的类型</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 编译错误：不能为其他包的类型添加方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(b strings.Builder)</span></span> MyMethod() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"为什么有这个限制？\"><a href=\"#为什么有这个限制？\" class=\"headerlink\" title=\"为什么有这个限制？\"></a>为什么有这个限制？</h2><h3 id=\"1-类型安全\"><a href=\"#1-类型安全\" class=\"headerlink\" title=\"1. 类型安全\"></a>1. 类型安全</h3><ul>\n<li>防止意外的类型污染</li>\n<li>确保类型系统的完整性</li>\n</ul>\n<h3 id=\"2-包封装\"><a href=\"#2-包封装\" class=\"headerlink\" title=\"2. 包封装\"></a>2. 包封装</h3><ul>\n<li>保持包的边界清晰</li>\n<li>避免跨包的依赖混乱</li>\n</ul>\n<h3 id=\"3-避免冲突\"><a href=\"#3-避免冲突\" class=\"headerlink\" title=\"3. 避免冲突\"></a>3. 避免冲突</h3><ul>\n<li>防止不同包为同一类型定义冲突的方法</li>\n<li>确保方法调用的唯一性</li>\n</ul>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"方案1：包装类型（Wrapper）\"><a href=\"#方案1：包装类型（Wrapper）\" class=\"headerlink\" title=\"方案1：包装类型（Wrapper）\"></a>方案1：包装类型（Wrapper）</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyBuilder <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    strings.Builder</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mb MyBuilder)</span></span> MyMethod() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可以调用嵌入的 Builder 的方法</span></span><br><span class=\"line\">    mb.WriteString(<span class=\"string\">&quot;Hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方案2：类型别名-包装\"><a href=\"#方案2：类型别名-包装\" class=\"headerlink\" title=\"方案2：类型别名 + 包装\"></a>方案2：类型别名 + 包装</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyInt = <span class=\"type\">int</span>  <span class=\"comment\">// 类型别名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 仍然不能直接为 MyInt 添加方法</span></span><br><span class=\"line\"><span class=\"comment\">// 需要包装</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> WrappedInt <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    value <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(wi WrappedInt)</span></span> Double() <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wi.value * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方案3：函数式编程\"><a href=\"#方案3：函数式编程\" class=\"headerlink\" title=\"方案3：函数式编程\"></a>方案3：函数式编程</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用函数而不是方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DoubleInt</span><span class=\"params\">(i <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">LengthString</span><span class=\"params\">(s <span class=\"type\">string</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实际应用示例\"><a href=\"#实际应用示例\" class=\"headerlink\" title=\"实际应用示例\"></a>实际应用示例</h2><h3 id=\"示例1：数值类型方法\"><a href=\"#示例1：数值类型方法\" class=\"headerlink\" title=\"示例1：数值类型方法\"></a>示例1：数值类型方法</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyFloat <span class=\"type\">float64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f MyFloat)</span></span> Abs() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> f &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">float64</span>(-f)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">float64</span>(f)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f MyFloat)</span></span> Sqrt() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.Sqrt(<span class=\"type\">float64</span>(f))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    f := MyFloat(-math.Sqrt2)</span><br><span class=\"line\">    fmt.Println(f.Abs())  <span class=\"comment\">// 1.4142135623730951</span></span><br><span class=\"line\">    fmt.Println(f.Sqrt()) <span class=\"comment\">// NaN (负数开方)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例2：字符串类型方法\"><a href=\"#示例2：字符串类型方法\" class=\"headerlink\" title=\"示例2：字符串类型方法\"></a>示例2：字符串类型方法</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyString <span class=\"type\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s MyString)</span></span> IsEmpty() <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(s) == <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s MyString)</span></span> ToUpper() MyString &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MyString(strings.ToUpper(<span class=\"type\">string</span>(s)))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s MyString)</span></span> Reverse() MyString &#123;</span><br><span class=\"line\">    runes := []<span class=\"type\">rune</span>(s)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, j := <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(runes)<span class=\"number\">-1</span>; i &lt; j; i, j = i+<span class=\"number\">1</span>, j<span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">        runes[i], runes[j] = runes[j], runes[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MyString(runes)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例3：复杂类型方法\"><a href=\"#示例3：复杂类型方法\" class=\"headerlink\" title=\"示例3：复杂类型方法\"></a>示例3：复杂类型方法</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Point <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    X, Y <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Point)</span></span> Distance() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.Sqrt(p.X*p.X + p.Y*p.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Point)</span></span> Add(other Point) Point &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Point&#123;p.X + other.X, p.Y + other.Y&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Point)</span></span> Scale(factor <span class=\"type\">float64</span>) &#123;</span><br><span class=\"line\">    p.X *= factor</span><br><span class=\"line\">    p.Y *= factor</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><h3 id=\"1-选择值接收者还是指针接收者\"><a href=\"#1-选择值接收者还是指针接收者\" class=\"headerlink\" title=\"1. 选择值接收者还是指针接收者\"></a>1. 选择值接收者还是指针接收者</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 值接收者：适用于小对象，不修改接收者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Point)</span></span> Distance() <span class=\"type\">float64</span> &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指针接收者：适用于大对象，需要修改接收者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Point)</span></span> Scale(factor <span class=\"type\">float64</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-一致性原则\"><a href=\"#2-一致性原则\" class=\"headerlink\" title=\"2. 一致性原则\"></a>2. 一致性原则</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果有一个方法使用指针接收者，所有方法都应该使用指针接收者</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Counter <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    value <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Counter)</span></span> Increment() &#123;</span><br><span class=\"line\">    c.value++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Counter)</span></span> GetValue() <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c.value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-接口实现\"><a href=\"#3-接口实现\" class=\"headerlink\" title=\"3. 接口实现\"></a>3. 接口实现</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Writer <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    Write([]<span class=\"type\">byte</span>) (<span class=\"type\">int</span>, <span class=\"type\">error</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyWriter <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    buffer []<span class=\"type\">byte</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(w *MyWriter)</span></span> Write(data []<span class=\"type\">byte</span>) (<span class=\"type\">int</span>, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">    w.buffer = <span class=\"built_in\">append</span>(w.buffer, data...)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(data), <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Go语言的方法接收者限制是语言设计的重要特性，它：</p>\n<ol>\n<li><strong>保证了类型安全</strong>：防止意外的类型污染</li>\n<li><strong>维护了包边界</strong>：确保清晰的模块化设计</li>\n<li><strong>避免了命名冲突</strong>：防止不同包的方法冲突</li>\n</ol>\n<p>通过理解这个限制，我们可以更好地设计Go程序，选择合适的方式来扩展类型的功能。</p>\n<h2 id=\"相关资源\"><a href=\"#相关资源\" class=\"headerlink\" title=\"相关资源\"></a>相关资源</h2><ul>\n<li><a href=\"https://golang.org/ref/spec#Method_declarations\">Go官方文档 - 方法</a></li>\n<li><a href=\"https://gopl-zh.github.io/ch6/ch6-01.html\">Go语言圣经 - 方法</a></li>\n<li><a href=\"https://golang.org/doc/effective_go.html#methods\">Effective Go - 方法</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Go语言方法接收者详解\"><a href=\"#Go语言方法接收者详解\" class=\"headerlink\" title=\"Go语言方法接收者详解\"></a>Go语言方法接收者详解</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Go语言中的方法（Method）是带有特殊接收者参数的函数。接收者出现在自己的参数列表中，位于 <code>func</code> 关键字和方法名之间。</p>\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(接收者变量 接收者类型)</span></span> 方法名(参数列表) (返回值列表) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 方法体</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法接收者的类型限制\"><a href=\"#方法接收者的类型限制\" class=\"headerlink\" title=\"方法接收者的类型限制\"></a>方法接收者的类型限制</h2><h3 id=\"核心规则\"><a href=\"#核心规则\" class=\"headerlink\" title=\"核心规则\"></a>核心规则</h3><p><strong>你只能为在同一个包中定义的接收者类型声明方法，而不能为其它包中定义的类型（包括 int 之类的内置类型）声明方法。</strong></p>\n<h3 id=\"详细说明\"><a href=\"#详细说明\" class=\"headerlink\" title=\"详细说明\"></a>详细说明</h3><h4 id=\"✅-允许的情况\"><a href=\"#✅-允许的情况\" class=\"headerlink\" title=\"✅ 允许的情况\"></a>✅ 允许的情况</h4><ol>\n<li><p><strong>自定义类型</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyInt <span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyString <span class=\"type\">string</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyStruct <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    field <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为自定义类型添加方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m MyInt)</span></span> Double() <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">int</span>(m * <span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s MyString)</span></span> Length() <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(<span class=\"type\">string</span>(s))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(ms MyStruct)</span></span> GetField() <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ms.field</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>结构体类型</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Name <span class=\"type\">string</span></span><br><span class=\"line\">    Age  <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Person)</span></span> SayHello() &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;Hello, I&#x27;m %s\\n&quot;</span>, p.Name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Person)</span></span> SetAge(age <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">    p.Age = age</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"❌-不允许的情况\"><a href=\"#❌-不允许的情况\" class=\"headerlink\" title=\"❌ 不允许的情况\"></a>❌ 不允许的情况</h4><ol>\n<li><p><strong>内置类型</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 编译错误：不能为内置类型添加方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(i <span class=\"type\">int</span>)</span></span> Double() <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s <span class=\"type\">string</span>)</span></span> Length() <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>其他包的类型</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 编译错误：不能为其他包的类型添加方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(b strings.Builder)</span></span> MyMethod() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"为什么有这个限制？\"><a href=\"#为什么有这个限制？\" class=\"headerlink\" title=\"为什么有这个限制？\"></a>为什么有这个限制？</h2><h3 id=\"1-类型安全\"><a href=\"#1-类型安全\" class=\"headerlink\" title=\"1. 类型安全\"></a>1. 类型安全</h3><ul>\n<li>防止意外的类型污染</li>\n<li>确保类型系统的完整性</li>\n</ul>\n<h3 id=\"2-包封装\"><a href=\"#2-包封装\" class=\"headerlink\" title=\"2. 包封装\"></a>2. 包封装</h3><ul>\n<li>保持包的边界清晰</li>\n<li>避免跨包的依赖混乱</li>\n</ul>\n<h3 id=\"3-避免冲突\"><a href=\"#3-避免冲突\" class=\"headerlink\" title=\"3. 避免冲突\"></a>3. 避免冲突</h3><ul>\n<li>防止不同包为同一类型定义冲突的方法</li>\n<li>确保方法调用的唯一性</li>\n</ul>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"方案1：包装类型（Wrapper）\"><a href=\"#方案1：包装类型（Wrapper）\" class=\"headerlink\" title=\"方案1：包装类型（Wrapper）\"></a>方案1：包装类型（Wrapper）</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyBuilder <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    strings.Builder</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(mb MyBuilder)</span></span> MyMethod() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可以调用嵌入的 Builder 的方法</span></span><br><span class=\"line\">    mb.WriteString(<span class=\"string\">&quot;Hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方案2：类型别名-包装\"><a href=\"#方案2：类型别名-包装\" class=\"headerlink\" title=\"方案2：类型别名 + 包装\"></a>方案2：类型别名 + 包装</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyInt = <span class=\"type\">int</span>  <span class=\"comment\">// 类型别名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 仍然不能直接为 MyInt 添加方法</span></span><br><span class=\"line\"><span class=\"comment\">// 需要包装</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> WrappedInt <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    value <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(wi WrappedInt)</span></span> Double() <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wi.value * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方案3：函数式编程\"><a href=\"#方案3：函数式编程\" class=\"headerlink\" title=\"方案3：函数式编程\"></a>方案3：函数式编程</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用函数而不是方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DoubleInt</span><span class=\"params\">(i <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">LengthString</span><span class=\"params\">(s <span class=\"type\">string</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实际应用示例\"><a href=\"#实际应用示例\" class=\"headerlink\" title=\"实际应用示例\"></a>实际应用示例</h2><h3 id=\"示例1：数值类型方法\"><a href=\"#示例1：数值类型方法\" class=\"headerlink\" title=\"示例1：数值类型方法\"></a>示例1：数值类型方法</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyFloat <span class=\"type\">float64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f MyFloat)</span></span> Abs() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> f &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">float64</span>(-f)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">float64</span>(f)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f MyFloat)</span></span> Sqrt() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.Sqrt(<span class=\"type\">float64</span>(f))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    f := MyFloat(-math.Sqrt2)</span><br><span class=\"line\">    fmt.Println(f.Abs())  <span class=\"comment\">// 1.4142135623730951</span></span><br><span class=\"line\">    fmt.Println(f.Sqrt()) <span class=\"comment\">// NaN (负数开方)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例2：字符串类型方法\"><a href=\"#示例2：字符串类型方法\" class=\"headerlink\" title=\"示例2：字符串类型方法\"></a>示例2：字符串类型方法</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyString <span class=\"type\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s MyString)</span></span> IsEmpty() <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(s) == <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s MyString)</span></span> ToUpper() MyString &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MyString(strings.ToUpper(<span class=\"type\">string</span>(s)))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s MyString)</span></span> Reverse() MyString &#123;</span><br><span class=\"line\">    runes := []<span class=\"type\">rune</span>(s)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, j := <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(runes)<span class=\"number\">-1</span>; i &lt; j; i, j = i+<span class=\"number\">1</span>, j<span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">        runes[i], runes[j] = runes[j], runes[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MyString(runes)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例3：复杂类型方法\"><a href=\"#示例3：复杂类型方法\" class=\"headerlink\" title=\"示例3：复杂类型方法\"></a>示例3：复杂类型方法</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Point <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    X, Y <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Point)</span></span> Distance() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> math.Sqrt(p.X*p.X + p.Y*p.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Point)</span></span> Add(other Point) Point &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Point&#123;p.X + other.X, p.Y + other.Y&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Point)</span></span> Scale(factor <span class=\"type\">float64</span>) &#123;</span><br><span class=\"line\">    p.X *= factor</span><br><span class=\"line\">    p.Y *= factor</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><h3 id=\"1-选择值接收者还是指针接收者\"><a href=\"#1-选择值接收者还是指针接收者\" class=\"headerlink\" title=\"1. 选择值接收者还是指针接收者\"></a>1. 选择值接收者还是指针接收者</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 值接收者：适用于小对象，不修改接收者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Point)</span></span> Distance() <span class=\"type\">float64</span> &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指针接收者：适用于大对象，需要修改接收者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Point)</span></span> Scale(factor <span class=\"type\">float64</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-一致性原则\"><a href=\"#2-一致性原则\" class=\"headerlink\" title=\"2. 一致性原则\"></a>2. 一致性原则</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果有一个方法使用指针接收者，所有方法都应该使用指针接收者</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Counter <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    value <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Counter)</span></span> Increment() &#123;</span><br><span class=\"line\">    c.value++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Counter)</span></span> GetValue() <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c.value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-接口实现\"><a href=\"#3-接口实现\" class=\"headerlink\" title=\"3. 接口实现\"></a>3. 接口实现</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Writer <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    Write([]<span class=\"type\">byte</span>) (<span class=\"type\">int</span>, <span class=\"type\">error</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyWriter <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    buffer []<span class=\"type\">byte</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(w *MyWriter)</span></span> Write(data []<span class=\"type\">byte</span>) (<span class=\"type\">int</span>, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">    w.buffer = <span class=\"built_in\">append</span>(w.buffer, data...)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(data), <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Go语言的方法接收者限制是语言设计的重要特性，它：</p>\n<ol>\n<li><strong>保证了类型安全</strong>：防止意外的类型污染</li>\n<li><strong>维护了包边界</strong>：确保清晰的模块化设计</li>\n<li><strong>避免了命名冲突</strong>：防止不同包的方法冲突</li>\n</ol>\n<p>通过理解这个限制，我们可以更好地设计Go程序，选择合适的方式来扩展类型的功能。</p>\n<h2 id=\"相关资源\"><a href=\"#相关资源\" class=\"headerlink\" title=\"相关资源\"></a>相关资源</h2><ul>\n<li><a href=\"https://golang.org/ref/spec#Method_declarations\">Go官方文档 - 方法</a></li>\n<li><a href=\"https://gopl-zh.github.io/ch6/ch6-01.html\">Go语言圣经 - 方法</a></li>\n<li><a href=\"https://golang.org/doc/effective_go.html#methods\">Effective Go - 方法</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cmgly8kpu000188vobv8i6wl7","category_id":"cmgly8kpx000388vo51ofa4hp","_id":"cmgly8kpz000888vo2czbhdjm"},{"post_id":"cmgly8kpz000988vo1n4ldfsa","category_id":"cmgly8kq1000b88vo6ybceapl","_id":"cmgly8kq2000g88vo36so348a"},{"post_id":"cmgly8kq1000d88vo0yit0joi","category_id":"cmgly8kq2000e88voarand1yb","_id":"cmgly8kq2000i88vo3jz7ghnp"},{"post_id":"cmh2rhxql0000agvodaegbkb1","category_id":"cmgly8kpx000388vo51ofa4hp","_id":"cmh2roq490002agvoc77k2akh"}],"PostTag":[{"post_id":"cmgly8kpu000188vobv8i6wl7","tag_id":"cmgly8kpx000488vobpbwh8kq","_id":"cmgly8kpz000788vo0awmd2hj"},{"post_id":"cmgly8kpz000988vo1n4ldfsa","tag_id":"cmgly8kq1000c88vo6dn4dhfm","_id":"cmgly8kq2000l88vofc3xbqsr"},{"post_id":"cmgly8kpz000988vo1n4ldfsa","tag_id":"cmgly8kq2000f88vo3y0sg78x","_id":"cmgly8kq3000m88vo5hpa8a2j"},{"post_id":"cmgly8kpz000988vo1n4ldfsa","tag_id":"cmgly8kq2000h88vohcvx4102","_id":"cmgly8kq3000o88vo51zbe9ho"},{"post_id":"cmgly8kpz000988vo1n4ldfsa","tag_id":"cmgly8kq2000j88vo5w31bj1i","_id":"cmgly8kq3000p88vo9k32762r"},{"post_id":"cmgly8kq0000a88vo5qq20xsq","tag_id":"cmgly8kpx000488vobpbwh8kq","_id":"cmgly8kq3000r88vo3jzz20g7"},{"post_id":"cmgly8kq0000a88vo5qq20xsq","tag_id":"cmgly8kq2000k88vococpfdf2","_id":"cmgly8kq3000s88vo25lub06w"},{"post_id":"cmgly8kq1000d88vo0yit0joi","tag_id":"cmgly8kq3000n88vodwyd1t0c","_id":"cmgly8kq3000u88vo80wsfkrh"},{"post_id":"cmgly8kq1000d88vo0yit0joi","tag_id":"cmgly8kq3000q88vodt2c07lm","_id":"cmgly8kq3000v88voe7bgd1yv"},{"post_id":"cmgly8kq1000d88vo0yit0joi","tag_id":"cmgly8kq3000t88vodd8teivn","_id":"cmgly8kq3000w88vo3gy2a8op"},{"post_id":"cmh2rhxql0000agvodaegbkb1","tag_id":"cmgly8kpx000488vobpbwh8kq","_id":"cmh2roq480001agvo90b84l9c"}],"Tag":[{"name":"Go","_id":"cmgly8kpx000488vobpbwh8kq"},{"name":"前端开发","_id":"cmgly8kq1000c88vo6dn4dhfm"},{"name":"工具推荐","_id":"cmgly8kq2000f88vo3y0sg78x"},{"name":"CodePen","_id":"cmgly8kq2000h88vohcvx4102"},{"name":"在线编辑器","_id":"cmgly8kq2000j88vo5w31bj1i"},{"name":"PL","_id":"cmgly8kq2000k88vococpfdf2"},{"name":"博客","_id":"cmgly8kq3000n88vodwyd1t0c"},{"name":"技术","_id":"cmgly8kq3000q88vodt2c07lm"},{"name":"学习","_id":"cmgly8kq3000t88vodd8teivn"}]}}